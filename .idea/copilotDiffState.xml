<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/Application.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/Application.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact;&#10;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.stage.Stage;&#10;&#10;import java.io.IOException;&#10;&#10;public class Application extends javafx.application.Application {&#10;    @Override&#10;    public void start(Stage stage) throws IOException {&#10;        FXMLLoader fxmlLoader = new FXMLLoader(Application.class.getResource(&quot;/com/juank/utp/finimpact/main-view.fxml&quot;));&#10;        Scene scene = new Scene(fxmlLoader.load(), 800, 600);&#10;        stage.setTitle(&quot;FinImpact - Sistema de Seguimiento de Iniciativas e Impactos Financieros&quot;);&#10;        stage.setScene(scene);&#10;        stage.setMinWidth(600);&#10;        stage.setMinHeight(400);&#10;        stage.setMaximized(true); // Start in full screen&#10;        stage.show();&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        launch();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.juank.utp.finimpact;&#10;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.geometry.Rectangle2D;&#10;import javafx.scene.Scene;&#10;import javafx.stage.Screen;&#10;import javafx.stage.Stage;&#10;&#10;import java.io.IOException;&#10;&#10;public class Application extends javafx.application.Application {&#10;    @Override&#10;    public void start(Stage stage) throws IOException {&#10;        FXMLLoader fxmlLoader = new FXMLLoader(Application.class.getResource(&quot;/com/juank/utp/finimpact/main-view.fxml&quot;));&#10;        Scene scene = new Scene(fxmlLoader.load(), 800, 600);&#10;        stage.setTitle(&quot;FinImpact - Sistema de Seguimiento de Iniciativas e Impactos Financieros&quot;);&#10;        stage.setScene(scene);&#10;        stage.setMinWidth(600);&#10;        stage.setMinHeight(400);&#10;        &#10;        // Set full screen using screen bounds&#10;        Rectangle2D screenBounds = Screen.getPrimary().getVisualBounds();&#10;        stage.setX(screenBounds.getMinX());&#10;        stage.setY(screenBounds.getMinY());&#10;        stage.setWidth(screenBounds.getWidth());&#10;        stage.setHeight(screenBounds.getHeight());&#10;        stage.setMaximized(true);&#10;        stage.show();&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        launch();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/ImpactoController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/ImpactoController.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Impacto;&#10;import com.juank.utp.finimpact.model.Iniciativa;&#10;import com.juank.utp.finimpact.repository.ImpactoRepository;&#10;import com.juank.utp.finimpact.repository.IniciativaRepository;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.geometry.Insets;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.scene.layout.GridPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.stage.Modality;&#10;import javafx.stage.Stage;&#10;&#10;import java.math.BigDecimal;&#10;import java.net.URL;&#10;import java.text.NumberFormat;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;import java.util.Locale;&#10;import java.util.Optional;&#10;import java.util.ResourceBundle;&#10;&#10;/**&#10; * Controlador para la gestión de impactos financieros&#10; */&#10;public class ImpactoController implements Initializable {&#10;&#10;    // Componentes de la vista&#10;    @FXML private ComboBox&lt;String&gt; cbTipo;&#10;    @FXML private ComboBox&lt;String&gt; cbSeveridad;&#10;    @FXML private TextField txtFiltroDescripcion;&#10;    @FXML private TableView&lt;Impacto&gt; tableImpactos;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colId;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colDescripcion;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colTipo;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colSeveridad;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colValorMonetario;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colFechaDeteccion;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colIniciativaId;&#10;    @FXML private TableColumn&lt;Impacto, Void&gt; colAcciones;&#10;&#10;    // Repositorios&#10;    private ImpactoRepository impactoRepository;&#10;    private IniciativaRepository iniciativaRepository;&#10;&#10;    // Lista de datos&#10;    private ObservableList&lt;Impacto&gt; impactosList = FXCollections.observableArrayList();&#10;    private ObservableList&lt;Impacto&gt; impactosFiltradosList = FXCollections.observableArrayList();&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        impactoRepository = new ImpactoRepository();&#10;        iniciativaRepository = new IniciativaRepository();&#10;&#10;        configurarTabla();&#10;        cargarImpactos();&#10;        configurarFiltros();&#10;        configurarFiltrosAutomaticos();&#10;    }&#10;&#10;    private void configurarTabla() {&#10;        // Configurar columnas&#10;        colId.setCellValueFactory(cellData -&gt; new SimpleStringProperty(String.valueOf(cellData.getValue().getIdImpacto())));&#10;        colDescripcion.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getTipoImpacto()));&#10;        colTipo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getTipoImpacto()));&#10;        colSeveridad.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getAtributoImpacto()));&#10;&#10;        colValorMonetario.setCellValueFactory(cellData -&gt; {&#10;            BigDecimal valor = cellData.getValue().getImpacto();&#10;            if (valor != null) {&#10;                NumberFormat formatter = NumberFormat.getCurrencyInstance(new Locale(&quot;es&quot;, &quot;CO&quot;));&#10;                return new SimpleStringProperty(formatter.format(valor));&#10;            }&#10;            return new SimpleStringProperty(&quot;$0&quot;);&#10;        });&#10;&#10;        colFechaDeteccion.setCellValueFactory(cellData -&gt; {&#10;            LocalDate fecha = cellData.getValue().getFechaImpacto();&#10;            return new SimpleStringProperty(fecha != null ? fecha.format(DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;)) : &quot;&quot;);&#10;        });&#10;&#10;        colIniciativaId.setCellValueFactory(cellData -&gt; {&#10;            int iniciativaId = cellData.getValue().getIdIniciativa();&#10;            if (iniciativaId &gt; 0) {&#10;                try {&#10;                    Optional&lt;Iniciativa&gt; iniciativaOpt = iniciativaRepository.findById(iniciativaId);&#10;                    return new SimpleStringProperty(iniciativaOpt.map(Iniciativa::getNombre).orElse(&quot;N/A&quot;));&#10;                } catch (Exception e) {&#10;                    return new SimpleStringProperty(&quot;Error&quot;);&#10;                }&#10;            }&#10;            return new SimpleStringProperty(&quot;Sin asignar&quot;);&#10;        });&#10;&#10;        // Configurar columna de acciones&#10;        colAcciones.setCellFactory(param -&gt; new TableCell&lt;Impacto, Void&gt;() {&#10;            private final Button btnEditar = new Button(&quot;Editar&quot;);&#10;            private final Button btnEliminar = new Button(&quot;Eliminar&quot;);&#10;            private final HBox pane = new HBox(8);&#10;&#10;            {&#10;                // Hacer los botones más grandes&#10;                btnEditar.setPrefWidth(80);&#10;                btnEditar.setPrefHeight(35);&#10;                btnEliminar.setPrefWidth(80);&#10;                btnEliminar.setPrefHeight(35);&#10;&#10;                btnEditar.setStyle(&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;                btnEliminar.setStyle(&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;&#10;                pane.getChildren().addAll(btnEditar, btnEliminar);&#10;                pane.setAlignment(javafx.geometry.Pos.CENTER);&#10;&#10;                btnEditar.setOnAction(event -&gt; {&#10;                    Impacto impacto = getTableView().getItems().get(getIndex());&#10;                    editarImpacto(impacto);&#10;                });&#10;&#10;                btnEliminar.setOnAction(event -&gt; {&#10;                    Impacto impacto = getTableView().getItems().get(getIndex());&#10;                    eliminarImpacto(impacto);&#10;                });&#10;            }&#10;&#10;            @Override&#10;            protected void updateItem(Void item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setGraphic(empty ? null : pane);&#10;            }&#10;        });&#10;&#10;        tableImpactos.setItems(impactosFiltradosList);&#10;    }&#10;&#10;    private void configurarFiltros() {&#10;        cbTipo.setValue(&quot;Todos&quot;);&#10;        cbSeveridad.setValue(&quot;Todos&quot;);&#10;    }&#10;&#10;    private void configurarFiltrosAutomaticos() {&#10;        // Configurar filtros automáticos&#10;        cbTipo.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        cbSeveridad.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        txtFiltroDescripcion.textProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;    }&#10;&#10;    @FXML&#10;    private void mostrarFormularioImpacto() {&#10;        mostrarFormulario(null);&#10;    }&#10;&#10;    @FXML&#10;    private void aplicarFiltros() {&#10;        String tipoFiltro = cbTipo.getValue();&#10;        String severidadFiltro = cbSeveridad.getValue();&#10;        String descripcionFiltro = txtFiltroDescripcion.getText().toLowerCase();&#10;&#10;        impactosFiltradosList.clear();&#10;&#10;        for (Impacto impacto : impactosList) {&#10;            boolean cumpleTipo = &quot;Todos&quot;.equals(tipoFiltro) || impacto.getTipoImpacto().equals(tipoFiltro);&#10;            boolean cumpleSeveridad = &quot;Todos&quot;.equals(severidadFiltro) || impacto.getAtributoImpacto().equals(severidadFiltro);&#10;            boolean cumpleDescripcion = descripcionFiltro.isEmpty() ||&#10;                    impacto.getTipoImpacto().toLowerCase().contains(descripcionFiltro);&#10;&#10;            if (cumpleTipo &amp;&amp; cumpleSeveridad &amp;&amp; cumpleDescripcion) {&#10;                impactosFiltradosList.add(impacto);&#10;            }&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void limpiarFiltros() {&#10;        cbTipo.setValue(&quot;Todos&quot;);&#10;        cbSeveridad.setValue(&quot;Todos&quot;);&#10;        txtFiltroDescripcion.clear();&#10;        impactosFiltradosList.setAll(impactosList);&#10;    }&#10;&#10;    private void cargarImpactos() {&#10;        try {&#10;            List&lt;Impacto&gt; impactos = impactoRepository.findAll();&#10;            impactosList.setAll(impactos);&#10;            impactosFiltradosList.setAll(impactos);&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al cargar impactos&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void editarImpacto(Impacto impacto) {&#10;        mostrarFormulario(impacto);&#10;    }&#10;&#10;    private void eliminarImpacto(Impacto impacto) {&#10;        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);&#10;        alert.setTitle(&quot;Confirmar eliminación&quot;);&#10;        alert.setHeaderText(&quot;¿Está seguro de eliminar este impacto?&quot;);&#10;        alert.setContentText(&quot;Esta acción no se puede deshacer.&quot;);&#10;&#10;        Optional&lt;ButtonType&gt; result = alert.showAndWait();&#10;        if (result.isPresent() &amp;&amp; result.get() == ButtonType.OK) {&#10;            try {&#10;                impactoRepository.delete(impacto.getIdImpacto());&#10;                cargarImpactos();&#10;                mostrarInformacion(&quot;Éxito&quot;, &quot;Impacto eliminado correctamente.&quot;);&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error al eliminar impacto&quot;, e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void mostrarFormulario(Impacto impacto) {&#10;        try {&#10;            Stage stage = new Stage();&#10;            stage.initModality(Modality.APPLICATION_MODAL);&#10;            stage.setTitle(impacto == null ? &quot;Nuevo Impacto&quot; : &quot;Editar Impacto&quot;);&#10;&#10;            GridPane grid = new GridPane();&#10;            grid.setHgap(15);&#10;            grid.setVgap(15);&#10;            grid.setPadding(new Insets(30));&#10;&#10;            // Campos del formulario basados en el modelo Impacto real&#10;            ComboBox&lt;String&gt; cbTipoForm = new ComboBox&lt;&gt;();&#10;            cbTipoForm.getItems().addAll(&quot;Maquinaria&quot;, &quot;Generación&quot;, &quot;Optimización&quot;, &quot;Transformación&quot;);&#10;            cbTipoForm.setValue(impacto != null ? impacto.getTipoImpacto() : &quot;Maquinaria&quot;);&#10;&#10;            ComboBox&lt;String&gt; cbAtributoForm = new ComboBox&lt;&gt;();&#10;            cbAtributoForm.getItems().addAll(&quot;Planeado&quot;, &quot;Estimado&quot;, &quot;Real&quot;);&#10;            cbAtributoForm.setValue(impacto != null ? impacto.getAtributoImpacto() : &quot;Planeado&quot;);&#10;&#10;            ComboBox&lt;Integer&gt; cbMultiplicadorForm = new ComboBox&lt;&gt;();&#10;            cbMultiplicadorForm.getItems().addAll(1, -1);&#10;            cbMultiplicadorForm.setValue(impacto != null ? impacto.getMultiplicador() : 1);&#10;&#10;            TextField txtValorImpacto = new TextField();&#10;            if (impacto != null &amp;&amp; impacto.getImpacto() != null) {&#10;                txtValorImpacto.setText(impacto.getImpacto().toString());&#10;            }&#10;&#10;            DatePicker dpFechaImpacto = new DatePicker(impacto != null ? impacto.getFechaImpacto() : LocalDate.now());&#10;&#10;            ComboBox&lt;Iniciativa&gt; cbIniciativa = new ComboBox&lt;&gt;();&#10;            try {&#10;                List&lt;Iniciativa&gt; iniciativas = iniciativaRepository.findAll();&#10;                cbIniciativa.getItems().setAll(iniciativas);&#10;                if (impacto != null &amp;&amp; impacto.getIdIniciativa() != 0) {&#10;                    Iniciativa iniciativaSeleccionada = iniciativas.stream()&#10;                            .filter(i -&gt; i.getIdIniciativa() == impacto.getIdIniciativa())&#10;                            .findFirst().orElse(null);&#10;                    cbIniciativa.setValue(iniciativaSeleccionada);&#10;                }&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error&quot;, &quot;No se pudieron cargar las iniciativas&quot;);&#10;            }&#10;&#10;            // Agregar campos al grid&#10;            grid.add(new Label(&quot;Tipo de Impacto:&quot;), 0, 0);&#10;            grid.add(cbTipoForm, 1, 0);&#10;            grid.add(new Label(&quot;Atributo:&quot;), 0, 1);&#10;            grid.add(cbAtributoForm, 1, 1);&#10;            grid.add(new Label(&quot;Multiplicador:&quot;), 0, 2);&#10;            grid.add(cbMultiplicadorForm, 1, 2);&#10;            grid.add(new Label(&quot;Valor del Impacto:&quot;), 0, 3);&#10;            grid.add(txtValorImpacto, 1, 3);&#10;            grid.add(new Label(&quot;Fecha del Impacto:&quot;), 0, 4);&#10;            grid.add(dpFechaImpacto, 1, 4);&#10;            grid.add(new Label(&quot;Iniciativa:&quot;), 0, 5);&#10;            grid.add(cbIniciativa, 1, 5);&#10;&#10;            // Botones&#10;            HBox buttonBox = new HBox(10);&#10;            Button btnGuardar = new Button(&quot;Guardar&quot;);&#10;            Button btnCancelar = new Button(&quot;Cancelar&quot;);&#10;            buttonBox.getChildren().addAll(btnGuardar, btnCancelar);&#10;            grid.add(buttonBox, 1, 6);&#10;&#10;            btnGuardar.setOnAction(e -&gt; {&#10;                try {&#10;                    if (cbTipoForm.getValue() == null) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El tipo de impacto es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    Impacto nuevoImpacto = impacto != null ? impacto : new Impacto();&#10;                    nuevoImpacto.setTipoImpacto(cbTipoForm.getValue());&#10;                    nuevoImpacto.setAtributoImpacto(cbAtributoForm.getValue());&#10;                    nuevoImpacto.setMultiplicador(cbMultiplicadorForm.getValue());&#10;                    nuevoImpacto.setFechaImpacto(dpFechaImpacto.getValue());&#10;                    nuevoImpacto.setFechaCreacion(LocalDate.now());&#10;&#10;                    if (!txtValorImpacto.getText().trim().isEmpty()) {&#10;                        try {&#10;                            BigDecimal valor = new BigDecimal(txtValorImpacto.getText().trim());&#10;                            nuevoImpacto.setImpacto(valor);&#10;                        } catch (NumberFormatException ex) {&#10;                            mostrarError(&quot;Error&quot;, &quot;El valor del impacto debe ser un número válido&quot;);&#10;                            return;&#10;                        }&#10;                    }&#10;&#10;                    if (cbIniciativa.getValue() != null) {&#10;                        nuevoImpacto.setIdIniciativa(cbIniciativa.getValue().getIdIniciativa());&#10;                    }&#10;&#10;                    if (impacto == null) {&#10;                        impactoRepository.save(nuevoImpacto);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Impacto creado correctamente.&quot;);&#10;                    } else {&#10;                        impactoRepository.update(nuevoImpacto);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Impacto actualizado correctamente.&quot;);&#10;                    }&#10;&#10;                    cargarImpactos();&#10;                    stage.close();&#10;                } catch (Exception ex) {&#10;                    mostrarError(&quot;Error al guardar impacto&quot;, ex.getMessage());&#10;                }&#10;            });&#10;&#10;            btnCancelar.setOnAction(e -&gt; stage.close());&#10;&#10;            Scene scene = new Scene(grid, 650, 550);&#10;            stage.setScene(scene);&#10;            stage.showAndWait();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al abrir formulario&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Impacto;&#10;import com.juank.utp.finimpact.model.Iniciativa;&#10;import com.juank.utp.finimpact.repository.ImpactoRepository;&#10;import com.juank.utp.finimpact.repository.IniciativaRepository;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.geometry.Insets;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.scene.layout.GridPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.stage.Modality;&#10;import javafx.stage.Stage;&#10;&#10;import java.math.BigDecimal;&#10;import java.net.URL;&#10;import java.text.NumberFormat;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;import java.util.Locale;&#10;import java.util.Optional;&#10;import java.util.ResourceBundle;&#10;&#10;/**&#10; * Controlador para la gestión de impactos financieros&#10; */&#10;public class ImpactoController implements Initializable {&#10;&#10;    // Componentes de la vista&#10;    @FXML private ComboBox&lt;String&gt; cbTipo;&#10;    @FXML private ComboBox&lt;String&gt; cbSeveridad;&#10;    @FXML private TextField txtFiltroDescripcion;&#10;    @FXML private TableView&lt;Impacto&gt; tableImpactos;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colId;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colDescripcion;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colTipo;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colSeveridad;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colValorMonetario;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colFechaDeteccion;&#10;    @FXML private TableColumn&lt;Impacto, String&gt; colIniciativaId;&#10;    @FXML private TableColumn&lt;Impacto, Void&gt; colAcciones;&#10;&#10;    // Repositorios&#10;    private ImpactoRepository impactoRepository;&#10;    private IniciativaRepository iniciativaRepository;&#10;&#10;    // Lista de datos&#10;    private ObservableList&lt;Impacto&gt; impactosList = FXCollections.observableArrayList();&#10;    private ObservableList&lt;Impacto&gt; impactosFiltradosList = FXCollections.observableArrayList();&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        impactoRepository = new ImpactoRepository();&#10;        iniciativaRepository = new IniciativaRepository();&#10;&#10;        configurarTabla();&#10;        cargarImpactos();&#10;        configurarFiltros();&#10;        configurarFiltrosAutomaticos();&#10;    }&#10;&#10;    private void configurarTabla() {&#10;        // Configurar columnas&#10;        colId.setCellValueFactory(cellData -&gt; new SimpleStringProperty(String.valueOf(cellData.getValue().getIdImpacto())));&#10;        colDescripcion.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getTipoImpacto()));&#10;        colTipo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getTipoImpacto()));&#10;        colSeveridad.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getAtributoImpacto()));&#10;&#10;        colValorMonetario.setCellValueFactory(cellData -&gt; {&#10;            BigDecimal valor = cellData.getValue().getImpacto();&#10;            if (valor != null) {&#10;                NumberFormat formatter = NumberFormat.getCurrencyInstance(new Locale(&quot;es&quot;, &quot;CO&quot;));&#10;                return new SimpleStringProperty(formatter.format(valor));&#10;            }&#10;            return new SimpleStringProperty(&quot;$0&quot;);&#10;        });&#10;&#10;        colFechaDeteccion.setCellValueFactory(cellData -&gt; {&#10;            LocalDate fecha = cellData.getValue().getFechaImpacto();&#10;            return new SimpleStringProperty(fecha != null ? fecha.format(DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;)) : &quot;&quot;);&#10;        });&#10;&#10;        colIniciativaId.setCellValueFactory(cellData -&gt; {&#10;            int iniciativaId = cellData.getValue().getIdIniciativa();&#10;            if (iniciativaId &gt; 0) {&#10;                try {&#10;                    Optional&lt;Iniciativa&gt; iniciativaOpt = iniciativaRepository.findById(iniciativaId);&#10;                    return new SimpleStringProperty(iniciativaOpt.map(Iniciativa::getNombre).orElse(&quot;N/A&quot;));&#10;                } catch (Exception e) {&#10;                    return new SimpleStringProperty(&quot;Error&quot;);&#10;                }&#10;            }&#10;            return new SimpleStringProperty(&quot;Sin asignar&quot;);&#10;        });&#10;&#10;        // Configurar columna de acciones&#10;        colAcciones.setCellFactory(param -&gt; new TableCell&lt;Impacto, Void&gt;() {&#10;            private final Button btnEditar = new Button(&quot;Editar&quot;);&#10;            private final Button btnEliminar = new Button(&quot;Eliminar&quot;);&#10;            private final HBox pane = new HBox(8);&#10;&#10;            {&#10;                // Hacer los botones más grandes&#10;                btnEditar.setPrefWidth(80);&#10;                btnEditar.setPrefHeight(35);&#10;                btnEliminar.setPrefWidth(80);&#10;                btnEliminar.setPrefHeight(35);&#10;&#10;                btnEditar.setStyle(&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;                btnEliminar.setStyle(&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;&#10;                pane.getChildren().addAll(btnEditar, btnEliminar);&#10;                pane.setAlignment(javafx.geometry.Pos.CENTER);&#10;&#10;                btnEditar.setOnAction(event -&gt; {&#10;                    Impacto impacto = getTableView().getItems().get(getIndex());&#10;                    editarImpacto(impacto);&#10;                });&#10;&#10;                btnEliminar.setOnAction(event -&gt; {&#10;                    Impacto impacto = getTableView().getItems().get(getIndex());&#10;                    eliminarImpacto(impacto);&#10;                });&#10;            }&#10;&#10;            @Override&#10;            protected void updateItem(Void item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setGraphic(empty ? null : pane);&#10;            }&#10;        });&#10;&#10;        tableImpactos.setItems(impactosFiltradosList);&#10;    }&#10;&#10;    private void configurarFiltros() {&#10;        cbTipo.setValue(&quot;Todos&quot;);&#10;        cbSeveridad.setValue(&quot;Todos&quot;);&#10;    }&#10;&#10;    private void configurarFiltrosAutomaticos() {&#10;        // Configurar filtros automáticos&#10;        cbTipo.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        cbSeveridad.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        txtFiltroDescripcion.textProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;    }&#10;&#10;    @FXML&#10;    private void mostrarFormularioImpacto() {&#10;        mostrarFormulario(null);&#10;    }&#10;&#10;    @FXML&#10;    private void aplicarFiltros() {&#10;        String tipoFiltro = cbTipo.getValue();&#10;        String severidadFiltro = cbSeveridad.getValue();&#10;        String descripcionFiltro = txtFiltroDescripcion.getText().toLowerCase();&#10;&#10;        impactosFiltradosList.clear();&#10;&#10;        for (Impacto impacto : impactosList) {&#10;            boolean cumpleTipo = &quot;Todos&quot;.equals(tipoFiltro) || impacto.getTipoImpacto().equals(tipoFiltro);&#10;            boolean cumpleSeveridad = &quot;Todos&quot;.equals(severidadFiltro) || impacto.getAtributoImpacto().equals(severidadFiltro);&#10;            boolean cumpleDescripcion = descripcionFiltro.isEmpty() ||&#10;                    impacto.getTipoImpacto().toLowerCase().contains(descripcionFiltro);&#10;&#10;            if (cumpleTipo &amp;&amp; cumpleSeveridad &amp;&amp; cumpleDescripcion) {&#10;                impactosFiltradosList.add(impacto);&#10;            }&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void limpiarFiltros() {&#10;        cbTipo.setValue(&quot;Todos&quot;);&#10;        cbSeveridad.setValue(&quot;Todos&quot;);&#10;        txtFiltroDescripcion.clear();&#10;        impactosFiltradosList.setAll(impactosList);&#10;    }&#10;&#10;    private void cargarImpactos() {&#10;        try {&#10;            List&lt;Impacto&gt; impactos = impactoRepository.findAll();&#10;            impactosList.setAll(impactos);&#10;            impactosFiltradosList.setAll(impactos);&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al cargar impactos&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void editarImpacto(Impacto impacto) {&#10;        mostrarFormulario(impacto);&#10;    }&#10;&#10;    private void eliminarImpacto(Impacto impacto) {&#10;        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);&#10;        alert.setTitle(&quot;Confirmar eliminación&quot;);&#10;        alert.setHeaderText(&quot;¿Está seguro de eliminar este impacto?&quot;);&#10;        alert.setContentText(&quot;Esta acción no se puede deshacer.&quot;);&#10;&#10;        Optional&lt;ButtonType&gt; result = alert.showAndWait();&#10;        if (result.isPresent() &amp;&amp; result.get() == ButtonType.OK) {&#10;            try {&#10;                impactoRepository.delete(impacto.getIdImpacto());&#10;                cargarImpactos();&#10;                mostrarInformacion(&quot;Éxito&quot;, &quot;Impacto eliminado correctamente.&quot;);&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error al eliminar impacto&quot;, e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void mostrarFormulario(Impacto impacto) {&#10;        try {&#10;            Stage stage = new Stage();&#10;            stage.initModality(Modality.APPLICATION_MODAL);&#10;            stage.setTitle(impacto == null ? &quot;Nuevo Impacto&quot; : &quot;Editar Impacto&quot;);&#10;            &#10;            // Forzar el tamaño del stage&#10;            stage.setWidth(700);&#10;            stage.setHeight(600);&#10;            stage.setMinWidth(700);&#10;            stage.setMinHeight(600);&#10;            stage.setResizable(true);&#10;&#10;            GridPane grid = new GridPane();&#10;            grid.setHgap(20);&#10;            grid.setVgap(20);&#10;            grid.setPadding(new Insets(40));&#10;&#10;            // Campos del formulario basados en el modelo Impacto real - HACERLOS MÁS GRANDES&#10;            ComboBox&lt;String&gt; cbTipoForm = new ComboBox&lt;&gt;();&#10;            cbTipoForm.getItems().addAll(&quot;Maquinaria&quot;, &quot;Generación&quot;, &quot;Optimización&quot;, &quot;Transformación&quot;);&#10;            cbTipoForm.setValue(impacto != null ? impacto.getTipoImpacto() : &quot;Maquinaria&quot;);&#10;            cbTipoForm.setPrefWidth(300);&#10;            cbTipoForm.setPrefHeight(35);&#10;&#10;            ComboBox&lt;String&gt; cbAtributoForm = new ComboBox&lt;&gt;();&#10;            cbAtributoForm.getItems().addAll(&quot;Planeado&quot;, &quot;Estimado&quot;, &quot;Real&quot;);&#10;            cbAtributoForm.setValue(impacto != null ? impacto.getAtributoImpacto() : &quot;Planeado&quot;);&#10;            cbAtributoForm.setPrefWidth(300);&#10;            cbAtributoForm.setPrefHeight(35);&#10;&#10;            ComboBox&lt;Integer&gt; cbMultiplicadorForm = new ComboBox&lt;&gt;();&#10;            cbMultiplicadorForm.getItems().addAll(1, -1);&#10;            cbMultiplicadorForm.setValue(impacto != null ? impacto.getMultiplicador() : 1);&#10;            cbMultiplicadorForm.setPrefWidth(300);&#10;            cbMultiplicadorForm.setPrefHeight(35);&#10;&#10;            TextField txtValorImpacto = new TextField();&#10;            if (impacto != null &amp;&amp; impacto.getImpacto() != null) {&#10;                txtValorImpacto.setText(impacto.getImpacto().toString());&#10;            }&#10;            txtValorImpacto.setPrefWidth(300);&#10;            txtValorImpacto.setPrefHeight(35);&#10;&#10;            DatePicker dpFechaImpacto = new DatePicker(impacto != null ? impacto.getFechaImpacto() : LocalDate.now());&#10;            dpFechaImpacto.setPrefWidth(300);&#10;            dpFechaImpacto.setPrefHeight(35);&#10;&#10;            ComboBox&lt;Iniciativa&gt; cbIniciativa = new ComboBox&lt;&gt;();&#10;            cbIniciativa.setPrefWidth(300);&#10;            cbIniciativa.setPrefHeight(35);&#10;            &#10;            try {&#10;                List&lt;Iniciativa&gt; iniciativas = iniciativaRepository.findAll();&#10;                cbIniciativa.getItems().setAll(iniciativas);&#10;                if (impacto != null &amp;&amp; impacto.getIdIniciativa() != 0) {&#10;                    Iniciativa iniciativaSeleccionada = iniciativas.stream()&#10;                            .filter(i -&gt; i.getIdIniciativa() == impacto.getIdIniciativa())&#10;                            .findFirst().orElse(null);&#10;                    cbIniciativa.setValue(iniciativaSeleccionada);&#10;                }&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error&quot;, &quot;No se pudieron cargar las iniciativas&quot;);&#10;            }&#10;&#10;            // Hacer las etiquetas más grandes&#10;            Label lblTipo = new Label(&quot;Tipo de Impacto:&quot;);&#10;            lblTipo.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblAtributo = new Label(&quot;Atributo:&quot;);&#10;            lblAtributo.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblMultiplicador = new Label(&quot;Multiplicador:&quot;);&#10;            lblMultiplicador.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblValor = new Label(&quot;Valor del Impacto:&quot;);&#10;            lblValor.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblFecha = new Label(&quot;Fecha del Impacto:&quot;);&#10;            lblFecha.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblIniciativa = new Label(&quot;Iniciativa:&quot;);&#10;            lblIniciativa.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;&#10;            // Agregar campos al grid&#10;            grid.add(lblTipo, 0, 0);&#10;            grid.add(cbTipoForm, 1, 0);&#10;            grid.add(lblAtributo, 0, 1);&#10;            grid.add(cbAtributoForm, 1, 1);&#10;            grid.add(lblMultiplicador, 0, 2);&#10;            grid.add(cbMultiplicadorForm, 1, 2);&#10;            grid.add(lblValor, 0, 3);&#10;            grid.add(txtValorImpacto, 1, 3);&#10;            grid.add(lblFecha, 0, 4);&#10;            grid.add(dpFechaImpacto, 1, 4);&#10;            grid.add(lblIniciativa, 0, 5);&#10;            grid.add(cbIniciativa, 1, 5);&#10;&#10;            // Botones más grandes&#10;            HBox buttonBox = new HBox(15);&#10;            Button btnGuardar = new Button(&quot;Guardar&quot;);&#10;            Button btnCancelar = new Button(&quot;Cancelar&quot;);&#10;            &#10;            btnGuardar.setPrefWidth(120);&#10;            btnGuardar.setPrefHeight(40);&#10;            btnGuardar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            &#10;            btnCancelar.setPrefWidth(120);&#10;            btnCancelar.setPrefHeight(40);&#10;            btnCancelar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            &#10;            buttonBox.getChildren().addAll(btnGuardar, btnCancelar);&#10;            grid.add(buttonBox, 1, 6);&#10;&#10;            btnGuardar.setOnAction(e -&gt; {&#10;                try {&#10;                    if (cbTipoForm.getValue() == null) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El tipo de impacto es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    Impacto nuevoImpacto = impacto != null ? impacto : new Impacto();&#10;                    nuevoImpacto.setTipoImpacto(cbTipoForm.getValue());&#10;                    nuevoImpacto.setAtributoImpacto(cbAtributoForm.getValue());&#10;                    nuevoImpacto.setMultiplicador(cbMultiplicadorForm.getValue());&#10;                    nuevoImpacto.setFechaImpacto(dpFechaImpacto.getValue());&#10;                    nuevoImpacto.setFechaCreacion(LocalDate.now());&#10;&#10;                    if (!txtValorImpacto.getText().trim().isEmpty()) {&#10;                        try {&#10;                            BigDecimal valor = new BigDecimal(txtValorImpacto.getText().trim());&#10;                            nuevoImpacto.setImpacto(valor);&#10;                        } catch (NumberFormatException ex) {&#10;                            mostrarError(&quot;Error&quot;, &quot;El valor del impacto debe ser un número válido&quot;);&#10;                            return;&#10;                        }&#10;                    }&#10;&#10;                    if (cbIniciativa.getValue() != null) {&#10;                        nuevoImpacto.setIdIniciativa(cbIniciativa.getValue().getIdIniciativa());&#10;                    }&#10;&#10;                    if (impacto == null) {&#10;                        impactoRepository.save(nuevoImpacto);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Impacto creado correctamente.&quot;);&#10;                    } else {&#10;                        impactoRepository.update(nuevoImpacto);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Impacto actualizado correctamente.&quot;);&#10;                    }&#10;&#10;                    cargarImpactos();&#10;                    stage.close();&#10;                } catch (Exception ex) {&#10;                    mostrarError(&quot;Error al guardar impacto&quot;, ex.getMessage());&#10;                }&#10;            });&#10;&#10;            btnCancelar.setOnAction(e -&gt; stage.close());&#10;&#10;            Scene scene = new Scene(grid, 700, 600);&#10;            stage.setScene(scene);&#10;            stage.centerOnScreen();&#10;            stage.showAndWait();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al abrir formulario&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/IniciativaController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/IniciativaController.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Iniciativa;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.IniciativaRepository;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.geometry.Insets;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.scene.layout.GridPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.stage.Modality;&#10;import javafx.stage.Stage;&#10;&#10;import java.net.URL;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.ResourceBundle;&#10;&#10;/**&#10; * Controlador para la gestión de iniciativas&#10; */&#10;public class IniciativaController implements Initializable {&#10;&#10;    // Componentes de la vista&#10;    @FXML private ComboBox&lt;String&gt; cbEstado;&#10;    @FXML private ComboBox&lt;String&gt; cbRiesgo;&#10;    @FXML private TextField txtFiltroNombre;&#10;    @FXML private TableView&lt;Iniciativa&gt; tableIniciativas;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colId;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colNombre;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colDescripcion;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colTipo;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colEstado;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colRiesgo;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colFechaInicio;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colFechaFin;&#10;    @FXML private TableColumn&lt;Iniciativa, Void&gt; colAcciones;&#10;&#10;    // Repositorios&#10;    private IniciativaRepository iniciativaRepository;&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    // Lista de datos&#10;    private final ObservableList&lt;Iniciativa&gt; iniciativasList = FXCollections.observableArrayList();&#10;    private final ObservableList&lt;Iniciativa&gt; iniciativasFiltradasList = FXCollections.observableArrayList();&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        iniciativaRepository = new IniciativaRepository();&#10;        usuarioRepository = new UsuarioRepository();&#10;&#10;        configurarTabla();&#10;        cargarIniciativas();&#10;        configurarFiltros();&#10;        configurarFiltrosAutomaticos();&#10;    }&#10;&#10;    private void configurarTabla() {&#10;        // Configurar columnas&#10;        colId.setCellValueFactory(cellData -&gt; new SimpleStringProperty(String.valueOf(cellData.getValue().getIdIniciativa())));&#10;        colNombre.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNombre()));&#10;        colDescripcion.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getDescripcion()));&#10;        colTipo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getTipo()));&#10;        colEstado.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEstado()));&#10;        colRiesgo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getRiesgo()));&#10;&#10;        colFechaInicio.setCellValueFactory(cellData -&gt; {&#10;            LocalDate fecha = cellData.getValue().getFechaInicio();&#10;            return new SimpleStringProperty(fecha != null ? fecha.format(DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;)) : &quot;&quot;);&#10;        });&#10;&#10;        colFechaFin.setCellValueFactory(cellData -&gt; {&#10;            LocalDate fecha = cellData.getValue().getFechaFin();&#10;            return new SimpleStringProperty(fecha != null ? fecha.format(DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;)) : &quot;&quot;);&#10;        });&#10;&#10;        // Configurar columna de acciones&#10;        colAcciones.setCellFactory(param -&gt; new TableCell&lt;&gt;() {&#10;            private final Button btnEditar = new Button(&quot;Editar&quot;);&#10;            private final Button btnEliminar = new Button(&quot;Eliminar&quot;);&#10;            private final HBox pane = new HBox(8);&#10;&#10;            {&#10;                // Hacer los botones más grandes&#10;                btnEditar.setPrefWidth(80);&#10;                btnEditar.setPrefHeight(35);&#10;                btnEliminar.setPrefWidth(80);&#10;                btnEliminar.setPrefHeight(35);&#10;&#10;                btnEditar.setStyle(&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;                btnEliminar.setStyle(&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;&#10;                pane.getChildren().addAll(btnEditar, btnEliminar);&#10;                pane.setAlignment(javafx.geometry.Pos.CENTER);&#10;&#10;                btnEditar.setOnAction(event -&gt; {&#10;                    Iniciativa iniciativa = getTableView().getItems().get(getIndex());&#10;                    editarIniciativa(iniciativa);&#10;                });&#10;&#10;                btnEliminar.setOnAction(event -&gt; {&#10;                    Iniciativa iniciativa = getTableView().getItems().get(getIndex());&#10;                    eliminarIniciativa(iniciativa);&#10;                });&#10;            }&#10;&#10;            @Override&#10;            protected void updateItem(Void item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setGraphic(empty ? null : pane);&#10;            }&#10;        });&#10;&#10;        tableIniciativas.setItems(iniciativasFiltradasList);&#10;    }&#10;&#10;    private void configurarFiltros() {&#10;        cbEstado.setValue(&quot;Todos&quot;);&#10;        cbRiesgo.setValue(&quot;Todos&quot;);&#10;    }&#10;&#10;    private void configurarFiltrosAutomaticos() {&#10;        // Configurar filtros automáticos&#10;        cbEstado.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        cbRiesgo.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        txtFiltroNombre.textProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;    }&#10;&#10;    @FXML&#10;    private void mostrarFormularioIniciativa() {&#10;        mostrarFormulario(null);&#10;    }&#10;&#10;    @FXML&#10;    private void aplicarFiltros() {&#10;        String estadoFiltro = cbEstado.getValue();&#10;        String riesgoFiltro = cbRiesgo.getValue();&#10;        String nombreFiltro = txtFiltroNombre.getText().toLowerCase();&#10;&#10;        iniciativasFiltradasList.clear();&#10;&#10;        for (Iniciativa iniciativa : iniciativasList) {&#10;            boolean cumpleEstado = &quot;Todos&quot;.equals(estadoFiltro) || iniciativa.getEstado().equals(estadoFiltro);&#10;            boolean cumpleRiesgo = &quot;Todos&quot;.equals(riesgoFiltro) || iniciativa.getRiesgo().equals(riesgoFiltro);&#10;            boolean cumpleNombre = nombreFiltro.isEmpty() ||&#10;                    iniciativa.getNombre().toLowerCase().contains(nombreFiltro);&#10;&#10;            if (cumpleEstado &amp;&amp; cumpleRiesgo &amp;&amp; cumpleNombre) {&#10;                iniciativasFiltradasList.add(iniciativa);&#10;            }&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void limpiarFiltros() {&#10;        cbEstado.setValue(&quot;Todos&quot;);&#10;        cbRiesgo.setValue(&quot;Todos&quot;);&#10;        txtFiltroNombre.clear();&#10;        iniciativasFiltradasList.setAll(iniciativasList);&#10;    }&#10;&#10;    private void cargarIniciativas() {&#10;        try {&#10;            List&lt;Iniciativa&gt; iniciativas = iniciativaRepository.findAll();&#10;            iniciativasList.setAll(iniciativas);&#10;            iniciativasFiltradasList.setAll(iniciativas);&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al cargar iniciativas&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void editarIniciativa(Iniciativa iniciativa) {&#10;        mostrarFormulario(iniciativa);&#10;    }&#10;&#10;    private void eliminarIniciativa(Iniciativa iniciativa) {&#10;        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);&#10;        alert.setTitle(&quot;Confirmar eliminación&quot;);&#10;        alert.setHeaderText(&quot;¿Está seguro de eliminar esta iniciativa?&quot;);&#10;        alert.setContentText(&quot;Esta acción no se puede deshacer.&quot;);&#10;&#10;        Optional&lt;ButtonType&gt; result = alert.showAndWait();&#10;        if (result.isPresent() &amp;&amp; result.get() == ButtonType.OK) {&#10;            try {&#10;                iniciativaRepository.delete(iniciativa.getIdIniciativa());&#10;                cargarIniciativas();&#10;                mostrarInformacion(&quot;Éxito&quot;, &quot;Iniciativa eliminada correctamente.&quot;);&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error al eliminar iniciativa&quot;, e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void mostrarFormulario(Iniciativa iniciativa) {&#10;        try {&#10;            Stage stage = new Stage();&#10;            stage.initModality(Modality.APPLICATION_MODAL);&#10;            stage.setTitle(iniciativa == null ? &quot;Nueva Iniciativa&quot; : &quot;Editar Iniciativa&quot;);&#10;&#10;            GridPane grid = new GridPane();&#10;            grid.setHgap(15);&#10;            grid.setVgap(15);&#10;            grid.setPadding(new Insets(30));&#10;&#10;            // Campos del formulario&#10;            TextField txtNombre = new TextField(iniciativa != null ? iniciativa.getNombre() : &quot;&quot;);&#10;            TextArea txtDescripcion = new TextArea(iniciativa != null ? iniciativa.getDescripcion() : &quot;&quot;);&#10;            TextField txtTipo = new TextField(iniciativa != null ? iniciativa.getTipo() : &quot;&quot;);&#10;            ComboBox&lt;String&gt; cbEstadoForm = new ComboBox&lt;&gt;();&#10;            cbEstadoForm.getItems().addAll(&quot;planeado&quot;, &quot;en curso&quot;, &quot;finalizado&quot;, &quot;cancelado&quot;);&#10;            cbEstadoForm.setValue(iniciativa != null ? iniciativa.getEstado() : &quot;planeado&quot;);&#10;&#10;            ComboBox&lt;String&gt; cbRiesgoForm = new ComboBox&lt;&gt;();&#10;            cbRiesgoForm.getItems().addAll(&quot;alto&quot;, &quot;medio&quot;, &quot;bajo&quot;);&#10;            cbRiesgoForm.setValue(iniciativa != null ? iniciativa.getRiesgo() : &quot;medio&quot;);&#10;&#10;            DatePicker dpFechaInicio = new DatePicker(iniciativa != null ? iniciativa.getFechaInicio() : LocalDate.now());&#10;            DatePicker dpFechaFin = new DatePicker(iniciativa != null ? iniciativa.getFechaFin() : null);&#10;&#10;            ComboBox&lt;Usuario&gt; cbUsuario = new ComboBox&lt;&gt;();&#10;            try {&#10;                List&lt;Usuario&gt; usuarios = usuarioRepository.findAll();&#10;                cbUsuario.getItems().setAll(usuarios);&#10;                if (iniciativa != null &amp;&amp; iniciativa.getUsuarioId() != 0) {&#10;                    Usuario usuarioSeleccionado = usuarios.stream()&#10;                            .filter(u -&gt; u.getId() == iniciativa.getUsuarioId())&#10;                            .findFirst().orElse(null);&#10;                    cbUsuario.setValue(usuarioSeleccionado);&#10;                }&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error&quot;, &quot;No se pudieron cargar los usuarios&quot;);&#10;            }&#10;&#10;            txtDescripcion.setPrefRowCount(3);&#10;&#10;            // Agregar campos al grid&#10;            grid.add(new Label(&quot;Nombre:&quot;), 0, 0);&#10;            grid.add(txtNombre, 1, 0);&#10;            grid.add(new Label(&quot;Descripción:&quot;), 0, 1);&#10;            grid.add(txtDescripcion, 1, 1);&#10;            grid.add(new Label(&quot;Tipo:&quot;), 0, 2);&#10;            grid.add(txtTipo, 1, 2);&#10;            grid.add(new Label(&quot;Estado:&quot;), 0, 3);&#10;            grid.add(cbEstadoForm, 1, 3);&#10;            grid.add(new Label(&quot;Riesgo:&quot;), 0, 4);&#10;            grid.add(cbRiesgoForm, 1, 4);&#10;            grid.add(new Label(&quot;Fecha Inicio:&quot;), 0, 5);&#10;            grid.add(dpFechaInicio, 1, 5);&#10;            grid.add(new Label(&quot;Fecha Fin:&quot;), 0, 6);&#10;            grid.add(dpFechaFin, 1, 6);&#10;            grid.add(new Label(&quot;Usuario:&quot;), 0, 7);&#10;            grid.add(cbUsuario, 1, 7);&#10;&#10;            // Botones&#10;            HBox buttonBox = new HBox(10);&#10;            Button btnGuardar = new Button(&quot;Guardar&quot;);&#10;            Button btnCancelar = new Button(&quot;Cancelar&quot;);&#10;            buttonBox.getChildren().addAll(btnGuardar, btnCancelar);&#10;            grid.add(buttonBox, 1, 8);&#10;&#10;            btnGuardar.setOnAction(e -&gt; {&#10;                try {&#10;                    if (txtNombre.getText().trim().isEmpty()) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El nombre es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    Iniciativa nuevaIniciativa = iniciativa != null ? iniciativa : new Iniciativa();&#10;                    nuevaIniciativa.setNombre(txtNombre.getText().trim());&#10;                    nuevaIniciativa.setDescripcion(txtDescripcion.getText().trim());&#10;                    nuevaIniciativa.setTipo(txtTipo.getText().trim());&#10;                    nuevaIniciativa.setEstado(cbEstadoForm.getValue());&#10;                    nuevaIniciativa.setRiesgo(cbRiesgoForm.getValue());&#10;                    nuevaIniciativa.setFechaInicio(dpFechaInicio.getValue());&#10;                    nuevaIniciativa.setFechaFin(dpFechaFin.getValue());&#10;&#10;                    if (cbUsuario.getValue() != null) {&#10;                        nuevaIniciativa.setUsuarioId(cbUsuario.getValue().getId());&#10;                    }&#10;&#10;                    if (iniciativa == null) {&#10;                        iniciativaRepository.save(nuevaIniciativa);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Iniciativa creada correctamente.&quot;);&#10;                    } else {&#10;                        iniciativaRepository.update(nuevaIniciativa);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Iniciativa actualizada correctamente.&quot;);&#10;                    }&#10;&#10;                    cargarIniciativas();&#10;                    stage.close();&#10;                } catch (Exception ex) {&#10;                    mostrarError(&quot;Error al guardar iniciativa&quot;, ex.getMessage());&#10;                }&#10;            });&#10;&#10;            btnCancelar.setOnAction(e -&gt; stage.close());&#10;&#10;            Scene scene = new Scene(grid, 650, 650);&#10;            stage.setScene(scene);&#10;            stage.showAndWait();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al abrir formulario&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Iniciativa;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.IniciativaRepository;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.geometry.Insets;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.scene.layout.GridPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.stage.Modality;&#10;import javafx.stage.Stage;&#10;&#10;import java.net.URL;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.ResourceBundle;&#10;&#10;/**&#10; * Controlador para la gestión de iniciativas&#10; */&#10;public class IniciativaController implements Initializable {&#10;&#10;    // Componentes de la vista&#10;    @FXML private ComboBox&lt;String&gt; cbEstado;&#10;    @FXML private ComboBox&lt;String&gt; cbRiesgo;&#10;    @FXML private TextField txtFiltroNombre;&#10;    @FXML private TableView&lt;Iniciativa&gt; tableIniciativas;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colId;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colNombre;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colDescripcion;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colTipo;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colEstado;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colRiesgo;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colFechaInicio;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colFechaFin;&#10;    @FXML private TableColumn&lt;Iniciativa, Void&gt; colAcciones;&#10;&#10;    // Repositorios&#10;    private IniciativaRepository iniciativaRepository;&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    // Lista de datos&#10;    private final ObservableList&lt;Iniciativa&gt; iniciativasList = FXCollections.observableArrayList();&#10;    private final ObservableList&lt;Iniciativa&gt; iniciativasFiltradasList = FXCollections.observableArrayList();&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        iniciativaRepository = new IniciativaRepository();&#10;        usuarioRepository = new UsuarioRepository();&#10;&#10;        configurarTabla();&#10;        cargarIniciativas();&#10;        configurarFiltros();&#10;        configurarFiltrosAutomaticos();&#10;    }&#10;&#10;    private void configurarTabla() {&#10;        // Configurar columnas&#10;        colId.setCellValueFactory(cellData -&gt; new SimpleStringProperty(String.valueOf(cellData.getValue().getIdIniciativa())));&#10;        colNombre.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNombre()));&#10;        colDescripcion.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getDescripcion()));&#10;        colTipo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getTipo()));&#10;        colEstado.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEstado()));&#10;        colRiesgo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getRiesgo()));&#10;&#10;        colFechaInicio.setCellValueFactory(cellData -&gt; {&#10;            LocalDate fecha = cellData.getValue().getFechaInicio();&#10;            return new SimpleStringProperty(fecha != null ? fecha.format(DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;)) : &quot;&quot;);&#10;        });&#10;&#10;        colFechaFin.setCellValueFactory(cellData -&gt; {&#10;            LocalDate fecha = cellData.getValue().getFechaFin();&#10;            return new SimpleStringProperty(fecha != null ? fecha.format(DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;)) : &quot;&quot;);&#10;        });&#10;&#10;        // Configurar columna de acciones&#10;        colAcciones.setCellFactory(param -&gt; new TableCell&lt;&gt;() {&#10;            private final Button btnEditar = new Button(&quot;Editar&quot;);&#10;            private final Button btnEliminar = new Button(&quot;Eliminar&quot;);&#10;            private final HBox pane = new HBox(8);&#10;&#10;            {&#10;                // Hacer los botones más grandes&#10;                btnEditar.setPrefWidth(80);&#10;                btnEditar.setPrefHeight(35);&#10;                btnEliminar.setPrefWidth(80);&#10;                btnEliminar.setPrefHeight(35);&#10;&#10;                btnEditar.setStyle(&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;                btnEliminar.setStyle(&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;&#10;                pane.getChildren().addAll(btnEditar, btnEliminar);&#10;                pane.setAlignment(javafx.geometry.Pos.CENTER);&#10;&#10;                btnEditar.setOnAction(event -&gt; {&#10;                    Iniciativa iniciativa = getTableView().getItems().get(getIndex());&#10;                    editarIniciativa(iniciativa);&#10;                });&#10;&#10;                btnEliminar.setOnAction(event -&gt; {&#10;                    Iniciativa iniciativa = getTableView().getItems().get(getIndex());&#10;                    eliminarIniciativa(iniciativa);&#10;                });&#10;            }&#10;&#10;            @Override&#10;            protected void updateItem(Void item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setGraphic(empty ? null : pane);&#10;            }&#10;        });&#10;&#10;        tableIniciativas.setItems(iniciativasFiltradasList);&#10;    }&#10;&#10;    private void configurarFiltros() {&#10;        cbEstado.setValue(&quot;Todos&quot;);&#10;        cbRiesgo.setValue(&quot;Todos&quot;);&#10;    }&#10;&#10;    private void configurarFiltrosAutomaticos() {&#10;        // Configurar filtros automáticos&#10;        cbEstado.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        cbRiesgo.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        txtFiltroNombre.textProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;    }&#10;&#10;    @FXML&#10;    private void mostrarFormularioIniciativa() {&#10;        mostrarFormulario(null);&#10;    }&#10;&#10;    @FXML&#10;    private void aplicarFiltros() {&#10;        String estadoFiltro = cbEstado.getValue();&#10;        String riesgoFiltro = cbRiesgo.getValue();&#10;        String nombreFiltro = txtFiltroNombre.getText().toLowerCase();&#10;&#10;        iniciativasFiltradasList.clear();&#10;&#10;        for (Iniciativa iniciativa : iniciativasList) {&#10;            boolean cumpleEstado = &quot;Todos&quot;.equals(estadoFiltro) || iniciativa.getEstado().equals(estadoFiltro);&#10;            boolean cumpleRiesgo = &quot;Todos&quot;.equals(riesgoFiltro) || iniciativa.getRiesgo().equals(riesgoFiltro);&#10;            boolean cumpleNombre = nombreFiltro.isEmpty() ||&#10;                    iniciativa.getNombre().toLowerCase().contains(nombreFiltro);&#10;&#10;            if (cumpleEstado &amp;&amp; cumpleRiesgo &amp;&amp; cumpleNombre) {&#10;                iniciativasFiltradasList.add(iniciativa);&#10;            }&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void limpiarFiltros() {&#10;        cbEstado.setValue(&quot;Todos&quot;);&#10;        cbRiesgo.setValue(&quot;Todos&quot;);&#10;        txtFiltroNombre.clear();&#10;        iniciativasFiltradasList.setAll(iniciativasList);&#10;    }&#10;&#10;    private void cargarIniciativas() {&#10;        try {&#10;            List&lt;Iniciativa&gt; iniciativas = iniciativaRepository.findAll();&#10;            iniciativasList.setAll(iniciativas);&#10;            iniciativasFiltradasList.setAll(iniciativas);&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al cargar iniciativas&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void editarIniciativa(Iniciativa iniciativa) {&#10;        mostrarFormulario(iniciativa);&#10;    }&#10;&#10;    private void eliminarIniciativa(Iniciativa iniciativa) {&#10;        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);&#10;        alert.setTitle(&quot;Confirmar eliminación&quot;);&#10;        alert.setHeaderText(&quot;¿Está seguro de eliminar esta iniciativa?&quot;);&#10;        alert.setContentText(&quot;Esta acción no se puede deshacer.&quot;);&#10;&#10;        Optional&lt;ButtonType&gt; result = alert.showAndWait();&#10;        if (result.isPresent() &amp;&amp; result.get() == ButtonType.OK) {&#10;            try {&#10;                iniciativaRepository.delete(iniciativa.getIdIniciativa());&#10;                cargarIniciativas();&#10;                mostrarInformacion(&quot;Éxito&quot;, &quot;Iniciativa eliminada correctamente.&quot;);&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error al eliminar iniciativa&quot;, e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void mostrarFormulario(Iniciativa iniciativa) {&#10;        try {&#10;            Stage stage = new Stage();&#10;            stage.initModality(Modality.APPLICATION_MODAL);&#10;            stage.setTitle(iniciativa == null ? &quot;Nueva Iniciativa&quot; : &quot;Editar Iniciativa&quot;);&#10;            &#10;            // Forzar el tamaño del stage&#10;            stage.setWidth(750);&#10;            stage.setHeight(700);&#10;            stage.setMinWidth(750);&#10;            stage.setMinHeight(700);&#10;            stage.setResizable(true);&#10;&#10;            GridPane grid = new GridPane();&#10;            grid.setHgap(20);&#10;            grid.setVgap(20);&#10;            grid.setPadding(new Insets(40));&#10;&#10;            // Campos del formulario - HACERLOS MÁS GRANDES&#10;            TextField txtNombre = new TextField(iniciativa != null ? iniciativa.getNombre() : &quot;&quot;);&#10;            txtNombre.setPrefWidth(350);&#10;            txtNombre.setPrefHeight(35);&#10;            &#10;            TextArea txtDescripcion = new TextArea(iniciativa != null ? iniciativa.getDescripcion() : &quot;&quot;);&#10;            txtDescripcion.setPrefRowCount(4);&#10;            txtDescripcion.setPrefWidth(350);&#10;            txtDescripcion.setPrefHeight(100);&#10;            &#10;            TextField txtTipo = new TextField(iniciativa != null ? iniciativa.getTipo() : &quot;&quot;);&#10;            txtTipo.setPrefWidth(350);&#10;            txtTipo.setPrefHeight(35);&#10;            &#10;            ComboBox&lt;String&gt; cbEstadoForm = new ComboBox&lt;&gt;();&#10;            cbEstadoForm.getItems().addAll(&quot;planeado&quot;, &quot;en curso&quot;, &quot;finalizado&quot;, &quot;cancelado&quot;);&#10;            cbEstadoForm.setValue(iniciativa != null ? iniciativa.getEstado() : &quot;planeado&quot;);&#10;            cbEstadoForm.setPrefWidth(350);&#10;            cbEstadoForm.setPrefHeight(35);&#10;&#10;            ComboBox&lt;String&gt; cbRiesgoForm = new ComboBox&lt;&gt;();&#10;            cbRiesgoForm.getItems().addAll(&quot;alto&quot;, &quot;medio&quot;, &quot;bajo&quot;);&#10;            cbRiesgoForm.setValue(iniciativa != null ? iniciativa.getRiesgo() : &quot;medio&quot;);&#10;            cbRiesgoForm.setPrefWidth(350);&#10;            cbRiesgoForm.setPrefHeight(35);&#10;&#10;            DatePicker dpFechaInicio = new DatePicker(iniciativa != null ? iniciativa.getFechaInicio() : LocalDate.now());&#10;            dpFechaInicio.setPrefWidth(350);&#10;            dpFechaInicio.setPrefHeight(35);&#10;            &#10;            DatePicker dpFechaFin = new DatePicker(iniciativa != null ? iniciativa.getFechaFin() : null);&#10;            dpFechaFin.setPrefWidth(350);&#10;            dpFechaFin.setPrefHeight(35);&#10;&#10;            ComboBox&lt;Usuario&gt; cbUsuario = new ComboBox&lt;&gt;();&#10;            cbUsuario.setPrefWidth(350);&#10;            cbUsuario.setPrefHeight(35);&#10;            &#10;            try {&#10;                List&lt;Usuario&gt; usuarios = usuarioRepository.findAll();&#10;                cbUsuario.getItems().setAll(usuarios);&#10;                if (iniciativa != null &amp;&amp; iniciativa.getUsuarioId() != 0) {&#10;                    Usuario usuarioSeleccionado = usuarios.stream()&#10;                            .filter(u -&gt; u.getId() == iniciativa.getUsuarioId())&#10;                            .findFirst().orElse(null);&#10;                    cbUsuario.setValue(usuarioSeleccionado);&#10;                }&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error&quot;, &quot;No se pudieron cargar los usuarios&quot;);&#10;            }&#10;&#10;            // Hacer las etiquetas más grandes&#10;            Label lblNombre = new Label(&quot;Nombre:&quot;);&#10;            lblNombre.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblDescripcion = new Label(&quot;Descripción:&quot;);&#10;            lblDescripcion.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblTipo = new Label(&quot;Tipo:&quot;);&#10;            lblTipo.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblEstado = new Label(&quot;Estado:&quot;);&#10;            lblEstado.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblRiesgo = new Label(&quot;Riesgo:&quot;);&#10;            lblRiesgo.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblFechaInicio = new Label(&quot;Fecha Inicio:&quot;);&#10;            lblFechaInicio.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblFechaFin = new Label(&quot;Fecha Fin:&quot;);&#10;            lblFechaFin.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblUsuario = new Label(&quot;Usuario:&quot;);&#10;            lblUsuario.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;&#10;            // Agregar campos al grid&#10;            grid.add(lblNombre, 0, 0);&#10;            grid.add(txtNombre, 1, 0);&#10;            grid.add(lblDescripcion, 0, 1);&#10;            grid.add(txtDescripcion, 1, 1);&#10;            grid.add(lblTipo, 0, 2);&#10;            grid.add(txtTipo, 1, 2);&#10;            grid.add(lblEstado, 0, 3);&#10;            grid.add(cbEstadoForm, 1, 3);&#10;            grid.add(lblRiesgo, 0, 4);&#10;            grid.add(cbRiesgoForm, 1, 4);&#10;            grid.add(lblFechaInicio, 0, 5);&#10;            grid.add(dpFechaInicio, 1, 5);&#10;            grid.add(lblFechaFin, 0, 6);&#10;            grid.add(dpFechaFin, 1, 6);&#10;            grid.add(lblUsuario, 0, 7);&#10;            grid.add(cbUsuario, 1, 7);&#10;&#10;            // Botones más grandes&#10;            HBox buttonBox = new HBox(15);&#10;            Button btnGuardar = new Button(&quot;Guardar&quot;);&#10;            Button btnCancelar = new Button(&quot;Cancelar&quot;);&#10;            &#10;            btnGuardar.setPrefWidth(120);&#10;            btnGuardar.setPrefHeight(40);&#10;            btnGuardar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            &#10;            btnCancelar.setPrefWidth(120);&#10;            btnCancelar.setPrefHeight(40);&#10;            btnCancelar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            &#10;            buttonBox.getChildren().addAll(btnGuardar, btnCancelar);&#10;            grid.add(buttonBox, 1, 8);&#10;&#10;            btnGuardar.setOnAction(e -&gt; {&#10;                try {&#10;                    if (txtNombre.getText().trim().isEmpty()) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El nombre es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    Iniciativa nuevaIniciativa = iniciativa != null ? iniciativa : new Iniciativa();&#10;                    nuevaIniciativa.setNombre(txtNombre.getText().trim());&#10;                    nuevaIniciativa.setDescripcion(txtDescripcion.getText().trim());&#10;                    nuevaIniciativa.setTipo(txtTipo.getText().trim());&#10;                    nuevaIniciativa.setEstado(cbEstadoForm.getValue());&#10;                    nuevaIniciativa.setRiesgo(cbRiesgoForm.getValue());&#10;                    nuevaIniciativa.setFechaInicio(dpFechaInicio.getValue());&#10;                    nuevaIniciativa.setFechaFin(dpFechaFin.getValue());&#10;&#10;                    if (cbUsuario.getValue() != null) {&#10;                        nuevaIniciativa.setUsuarioId(cbUsuario.getValue().getId());&#10;                    }&#10;&#10;                    if (iniciativa == null) {&#10;                        iniciativaRepository.save(nuevaIniciativa);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Iniciativa creada correctamente.&quot;);&#10;                    } else {&#10;                        iniciativaRepository.update(nuevaIniciativa);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Iniciativa actualizada correctamente.&quot;);&#10;                    }&#10;&#10;                    cargarIniciativas();&#10;                    stage.close();&#10;                } catch (Exception ex) {&#10;                    mostrarError(&quot;Error al guardar iniciativa&quot;, ex.getMessage());&#10;                }&#10;            });&#10;&#10;            btnCancelar.setOnAction(e -&gt; stage.close());&#10;&#10;            Scene scene = new Scene(grid, 750, 700);&#10;            stage.setScene(scene);&#10;            stage.centerOnScreen();&#10;            stage.showAndWait();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al abrir formulario&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/LoginController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/LoginController.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.control.PasswordField;&#10;import javafx.scene.control.TextField;&#10;import javafx.stage.Stage;&#10;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Controlador para la vista de login&#10; */&#10;public class LoginController {&#10;&#10;    @FXML&#10;    private TextField txtEmail;&#10;&#10;    @FXML&#10;    private PasswordField txtPassword;&#10;&#10;    @FXML&#10;    private Button btnIngresar;&#10;&#10;    @FXML&#10;    private Button btnCancelar;&#10;&#10;    @FXML&#10;    private Label lblEmailError;&#10;&#10;    @FXML&#10;    private Label lblPasswordError;&#10;&#10;    @FXML&#10;    private Label lblLoginError;&#10;&#10;    private MainController mainController;&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        usuarioRepository = new UsuarioRepository();&#10;        &#10;        // Configurar validaciones en tiempo real&#10;        txtEmail.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            limpiarErrorEmail();&#10;        });&#10;        &#10;        txtPassword.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            limpiarErrorPassword();&#10;        });&#10;&#10;        // Permitir login con Enter&#10;        txtPassword.setOnAction(event -&gt; handleLogin());&#10;    }&#10;&#10;    /**&#10;     * Establece la referencia al controlador principal&#10;     */&#10;    public void setMainController(MainController mainController) {&#10;        this.mainController = mainController;&#10;    }&#10;&#10;    /**&#10;     * Maneja el evento de login&#10;     */&#10;    @FXML&#10;    private void handleLogin() {&#10;        limpiarErrores();&#10;&#10;        if (!validarCampos()) {&#10;            return;&#10;        }&#10;&#10;        String email = txtEmail.getText().trim();&#10;        String password = txtPassword.getText();&#10;&#10;        // Deshabilitar botón mientras se procesa&#10;        btnIngresar.setDisable(true);&#10;        btnIngresar.setText(&quot;Ingresando...&quot;);&#10;&#10;        try {&#10;            // Intentar autenticación&#10;            Optional&lt;Usuario&gt; usuarioOpt = usuarioRepository.authenticate(email, password);&#10;&#10;            if (usuarioOpt.isPresent()) {&#10;                Usuario usuario = usuarioOpt.get();&#10;                &#10;                // Verificar que el usuario esté activo (doble verificación)&#10;                if (!usuario.isEstado()) {&#10;                    mostrarErrorLogin(&quot;Usuario inactivo. Contacte al administrador.&quot;);&#10;                    return;&#10;                }&#10;&#10;                // Login exitoso&#10;                mainController.setUsuarioLogueado(usuario);&#10;                cerrarVentana();&#10;                &#10;            } else {&#10;                mostrarErrorLogin(&quot;Email o contraseña incorrectos.&quot;);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error durante el login: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            mostrarErrorLogin(&quot;Error de conexión. Intente nuevamente.&quot;);&#10;        } finally {&#10;            // Rehabilitar botón&#10;            btnIngresar.setDisable(false);&#10;            btnIngresar.setText(&quot;Ingresar&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Maneja el evento de cancelar&#10;     */&#10;    @FXML&#10;    private void handleCancelar() {&#10;        cerrarVentana();&#10;    }&#10;&#10;    /**&#10;     * Valida que todos los campos estén llenos y correctos&#10;     */&#10;    private boolean validarCampos() {&#10;        boolean esValido = true;&#10;&#10;        // Validar email&#10;        String email = txtEmail.getText().trim();&#10;        if (email.isEmpty()) {&#10;            mostrarErrorEmail(&quot;El email es requerido&quot;);&#10;            esValido = false;&#10;        } else if (!esEmailValido(email)) {&#10;            mostrarErrorEmail(&quot;Formato de email inválido&quot;);&#10;            esValido = false;&#10;        }&#10;&#10;        // Validar contraseña&#10;        String password = txtPassword.getText();&#10;        if (password.isEmpty()) {&#10;            mostrarErrorPassword(&quot;La contraseña es requerida&quot;);&#10;            esValido = false;&#10;        } else if (password.length() &lt; 3) {&#10;            mostrarErrorPassword(&quot;La contraseña debe tener al menos 3 caracteres&quot;);&#10;            esValido = false;&#10;        }&#10;&#10;        return esValido;&#10;    }&#10;&#10;    /**&#10;     * Valida el formato del email&#10;     */&#10;    private boolean esEmailValido(String email) {&#10;        String emailRegex = &quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&quot;;&#10;        return email.matches(emailRegex);&#10;    }&#10;&#10;    /**&#10;     * Muestra error en el campo email&#10;     */&#10;    private void mostrarErrorEmail(String mensaje) {&#10;        lblEmailError.setText(mensaje);&#10;        lblEmailError.setVisible(true);&#10;        txtEmail.setStyle(&quot;-fx-border-color: #BF616A; -fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Muestra error en el campo contraseña&#10;     */&#10;    private void mostrarErrorPassword(String mensaje) {&#10;        lblPasswordError.setText(mensaje);&#10;        lblPasswordError.setVisible(true);&#10;        txtPassword.setStyle(&quot;-fx-border-color: #BF616A; -fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Muestra error general de login&#10;     */&#10;    private void mostrarErrorLogin(String mensaje) {&#10;        lblLoginError.setText(mensaje);&#10;        lblLoginError.setVisible(true);&#10;    }&#10;&#10;    /**&#10;     * Limpia el error del campo email&#10;     */&#10;    private void limpiarErrorEmail() {&#10;        lblEmailError.setVisible(false);&#10;        txtEmail.setStyle(&quot;-fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Limpia el error del campo contraseña&#10;     */&#10;    private void limpiarErrorPassword() {&#10;        lblPasswordError.setVisible(false);&#10;        txtPassword.setStyle(&quot;-fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Limpia todos los errores&#10;     */&#10;    private void limpiarErrores() {&#10;        limpiarErrorEmail();&#10;        limpiarErrorPassword();&#10;        lblLoginError.setVisible(false);&#10;    }&#10;&#10;    /**&#10;     * Cierra la ventana de login&#10;     */&#10;    private void cerrarVentana() {&#10;        Stage stage = (Stage) btnCancelar.getScene().getWindow();&#10;        stage.close();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Iniciativa.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Iniciativa.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.model;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;&#10;/**&#10; * Modelo que representa una iniciativa empresarial&#10; */&#10;public class Iniciativa {&#10;    private int idIniciativa;&#10;    private String nombre;&#10;    private String descripcion;&#10;    private LocalDate fechaInicio;&#10;    private LocalDate fechaFin;&#10;    private String tipo;&#10;    private String estado; // planeado, en curso, finalizado, cancelado&#10;    private String riesgo; // alto, medio, bajo&#10;    private int idOwner;&#10;    private LocalDateTime fechaRegistro;&#10;&#10;    // Constructor vacío&#10;    public Iniciativa() {}&#10;&#10;    // Constructor completo&#10;    public Iniciativa(int idIniciativa, String nombre, String descripcion, LocalDate fechaInicio,&#10;                     LocalDate fechaFin, String tipo, String estado, String riesgo, int idOwner,&#10;                     LocalDateTime fechaRegistro) {&#10;        this.idIniciativa = idIniciativa;&#10;        this.nombre = nombre;&#10;        this.descripcion = descripcion;&#10;        this.fechaInicio = fechaInicio;&#10;        this.fechaFin = fechaFin;&#10;        this.tipo = tipo;&#10;        this.estado = estado;&#10;        this.riesgo = riesgo;&#10;        this.idOwner = idOwner;&#10;        this.fechaRegistro = fechaRegistro;&#10;    }&#10;&#10;    // Constructor sin ID (para inserción)&#10;    public Iniciativa(String nombre, String descripcion, LocalDate fechaInicio, LocalDate fechaFin,&#10;                     String tipo, String estado, String riesgo, int idOwner) {&#10;        this.nombre = nombre;&#10;        this.descripcion = descripcion;&#10;        this.fechaInicio = fechaInicio;&#10;        this.fechaFin = fechaFin;&#10;        this.tipo = tipo;&#10;        this.estado = estado;&#10;        this.riesgo = riesgo;&#10;        this.idOwner = idOwner;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getIdIniciativa() {&#10;        return idIniciativa;&#10;    }&#10;&#10;    public void setIdIniciativa(int idIniciativa) {&#10;        this.idIniciativa = idIniciativa;&#10;    }&#10;&#10;    public String getNombre() {&#10;        return nombre;&#10;    }&#10;&#10;    public void setNombre(String nombre) {&#10;        this.nombre = nombre;&#10;    }&#10;&#10;    public String getDescripcion() {&#10;        return descripcion;&#10;    }&#10;&#10;    public void setDescripcion(String descripcion) {&#10;        this.descripcion = descripcion;&#10;    }&#10;&#10;    public LocalDate getFechaInicio() {&#10;        return fechaInicio;&#10;    }&#10;&#10;    public void setFechaInicio(LocalDate fechaInicio) {&#10;        this.fechaInicio = fechaInicio;&#10;    }&#10;&#10;    public LocalDate getFechaFin() {&#10;        return fechaFin;&#10;    }&#10;&#10;    public void setFechaFin(LocalDate fechaFin) {&#10;        this.fechaFin = fechaFin;&#10;    }&#10;&#10;    public String getTipo() {&#10;        return tipo;&#10;    }&#10;&#10;    public void setTipo(String tipo) {&#10;        this.tipo = tipo;&#10;    }&#10;&#10;    public String getEstado() {&#10;        return estado;&#10;    }&#10;&#10;    public void setEstado(String estado) {&#10;        this.estado = estado;&#10;    }&#10;&#10;    public String getRiesgo() {&#10;        return riesgo;&#10;    }&#10;&#10;    public void setRiesgo(String riesgo) {&#10;        this.riesgo = riesgo;&#10;    }&#10;&#10;    public int getIdOwner() {&#10;        return idOwner;&#10;    }&#10;&#10;    public void setIdOwner(int idOwner) {&#10;        this.idOwner = idOwner;&#10;    }&#10;&#10;    public LocalDateTime getFechaRegistro() {&#10;        return fechaRegistro;&#10;    }&#10;&#10;    public void setFechaRegistro(LocalDateTime fechaRegistro) {&#10;        this.fechaRegistro = fechaRegistro;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Iniciativa{&quot; +&#10;                &quot;idIniciativa=&quot; + idIniciativa +&#10;                &quot;, nombre='&quot; + nombre + '\'' +&#10;                &quot;, descripcion='&quot; + descripcion + '\'' +&#10;                &quot;, fechaInicio=&quot; + fechaInicio +&#10;                &quot;, fechaFin=&quot; + fechaFin +&#10;                &quot;, tipo='&quot; + tipo + '\'' +&#10;                &quot;, estado='&quot; + estado + '\'' +&#10;                &quot;, riesgo='&quot; + riesgo + '\'' +&#10;                &quot;, idOwner=&quot; + idOwner +&#10;                &quot;, fechaRegistro=&quot; + fechaRegistro +&#10;                '}';&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.model;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;&#10;/**&#10; * Modelo que representa una iniciativa empresarial&#10; */&#10;public class Iniciativa {&#10;    private int idIniciativa;&#10;    private String nombre;&#10;    private String descripcion;&#10;    private LocalDate fechaInicio;&#10;    private LocalDate fechaFin;&#10;    private String tipo;&#10;    private String estado; // planeado, en curso, finalizado, cancelado&#10;    private String riesgo; // alto, medio, bajo&#10;    private int idOwner;&#10;    private LocalDateTime fechaRegistro;&#10;&#10;    // Constructor vacío&#10;    public Iniciativa() {}&#10;&#10;    // Constructor completo&#10;    public Iniciativa(int idIniciativa, String nombre, String descripcion, LocalDate fechaInicio,&#10;                     LocalDate fechaFin, String tipo, String estado, String riesgo, int idOwner,&#10;                     LocalDateTime fechaRegistro) {&#10;        this.idIniciativa = idIniciativa;&#10;        this.nombre = nombre;&#10;        this.descripcion = descripcion;&#10;        this.fechaInicio = fechaInicio;&#10;        this.fechaFin = fechaFin;&#10;        this.tipo = tipo;&#10;        this.estado = estado;&#10;        this.riesgo = riesgo;&#10;        this.idOwner = idOwner;&#10;        this.fechaRegistro = fechaRegistro;&#10;    }&#10;&#10;    // Constructor sin ID (para inserción)&#10;    public Iniciativa(String nombre, String descripcion, LocalDate fechaInicio, LocalDate fechaFin,&#10;                     String tipo, String estado, String riesgo, int idOwner) {&#10;        this.nombre = nombre;&#10;        this.descripcion = descripcion;&#10;        this.fechaInicio = fechaInicio;&#10;        this.fechaFin = fechaFin;&#10;        this.tipo = tipo;&#10;        this.estado = estado;&#10;        this.riesgo = riesgo;&#10;        this.idOwner = idOwner;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getId() {&#10;        return idIniciativa;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.idIniciativa = id;&#10;    }&#10;&#10;    public int getIdIniciativa() {&#10;        return idIniciativa;&#10;    }&#10;&#10;    public void setIdIniciativa(int idIniciativa) {&#10;        this.idIniciativa = idIniciativa;&#10;    }&#10;&#10;    public String getNombre() {&#10;        return nombre;&#10;    }&#10;&#10;    public void setNombre(String nombre) {&#10;        this.nombre = nombre;&#10;    }&#10;&#10;    public String getDescripcion() {&#10;        return descripcion;&#10;    }&#10;&#10;    public void setDescripcion(String descripcion) {&#10;        this.descripcion = descripcion;&#10;    }&#10;&#10;    public LocalDate getFechaInicio() {&#10;        return fechaInicio;&#10;    }&#10;&#10;    public void setFechaInicio(LocalDate fechaInicio) {&#10;        this.fechaInicio = fechaInicio;&#10;    }&#10;&#10;    public LocalDate getFechaFin() {&#10;        return fechaFin;&#10;    }&#10;&#10;    public void setFechaFin(LocalDate fechaFin) {&#10;        this.fechaFin = fechaFin;&#10;    }&#10;&#10;    public String getTipo() {&#10;        return tipo;&#10;    }&#10;&#10;    public void setTipo(String tipo) {&#10;        this.tipo = tipo;&#10;    }&#10;&#10;    public String getEstado() {&#10;        return estado;&#10;    }&#10;&#10;    public void setEstado(String estado) {&#10;        this.estado = estado;&#10;    }&#10;&#10;    public String getRiesgo() {&#10;        return riesgo;&#10;    }&#10;&#10;    public void setRiesgo(String riesgo) {&#10;        this.riesgo = riesgo;&#10;    }&#10;&#10;    public int getUsuarioId() {&#10;        return idOwner;&#10;    }&#10;&#10;    public void setUsuarioId(int usuarioId) {&#10;        this.idOwner = usuarioId;&#10;    }&#10;&#10;    public int getIdOwner() {&#10;        return idOwner;&#10;    }&#10;&#10;    public void setIdOwner(int idOwner) {&#10;        this.idOwner = idOwner;&#10;    }&#10;&#10;    public LocalDateTime getFechaRegistro() {&#10;        return fechaRegistro;&#10;    }&#10;&#10;    public void setFechaRegistro(LocalDateTime fechaRegistro) {&#10;        this.fechaRegistro = fechaRegistro;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return nombre;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Usuario.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Usuario.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.model;&#10;&#10;/**&#10; * Modelo que representa un usuario del sistema&#10; */&#10;public class Usuario {&#10;    private int idUsuario;&#10;    private String nombreCompleto;&#10;    private String email;&#10;    private String password; // Hash de la contraseña&#10;    private String rol; // admin, analista, viewer&#10;    private boolean estado; // true = activo, false = inactivo&#10;&#10;    // Constructor vacío&#10;    public Usuario() {}&#10;&#10;    // Constructor completo&#10;    public Usuario(int idUsuario, String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.idUsuario = idUsuario;&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Constructor sin ID (para inserción)&#10;    public Usuario(String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getIdUsuario() {&#10;        return idUsuario;&#10;    }&#10;&#10;    public void setIdUsuario(int idUsuario) {&#10;        this.idUsuario = idUsuario;&#10;    }&#10;&#10;    public String getNombreCompleto() {&#10;        return nombreCompleto;&#10;    }&#10;&#10;    public void setNombreCompleto(String nombreCompleto) {&#10;        this.nombreCompleto = nombreCompleto;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getRol() {&#10;        return rol;&#10;    }&#10;&#10;    public void setRol(String rol) {&#10;        this.rol = rol;&#10;    }&#10;&#10;    public boolean isEstado() {&#10;        return estado;&#10;    }&#10;&#10;    public void setEstado(boolean estado) {&#10;        this.estado = estado;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Usuario{&quot; +&#10;                &quot;idUsuario=&quot; + idUsuario +&#10;                &quot;, nombreCompleto='&quot; + nombreCompleto + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                &quot;, rol='&quot; + rol + '\'' +&#10;                &quot;, estado=&quot; + estado +&#10;                '}';&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.model;&#10;&#10;/**&#10; * Modelo que representa un usuario del sistema&#10; */&#10;public class Usuario {&#10;    private int idUsuario;&#10;    private String nombreCompleto;&#10;    private String email;&#10;    private String password; // Hash de la contraseña&#10;    private String rol; // admin, analista, viewer&#10;    private boolean estado; // true = activo, false = inactivo&#10;&#10;    // Constructor vacío&#10;    public Usuario() {}&#10;&#10;    // Constructor completo&#10;    public Usuario(int idUsuario, String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.idUsuario = idUsuario;&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Constructor sin ID (para inserción)&#10;    public Usuario(String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getId() {&#10;        return idUsuario;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.idUsuario = id;&#10;    }&#10;&#10;    public int getIdUsuario() {&#10;        return idUsuario;&#10;    }&#10;&#10;    public void setIdUsuario(int idUsuario) {&#10;        this.idUsuario = idUsuario;&#10;    }&#10;&#10;    public String getNombreCompleto() {&#10;        return nombreCompleto;&#10;    }&#10;&#10;    public void setNombreCompleto(String nombreCompleto) {&#10;        this.nombreCompleto = nombreCompleto;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getRol() {&#10;        return rol;&#10;    }&#10;&#10;    public void setRol(String rol) {&#10;        this.rol = rol;&#10;    }&#10;&#10;    public boolean isEstado() {&#10;        return estado;&#10;    }&#10;&#10;    public void setEstado(boolean estado) {&#10;        this.estado = estado;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return nombreCompleto;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/dashboard-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/dashboard-view.fxml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.*?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;VBox alignment=&quot;CENTER&quot; prefHeight=&quot;400.0&quot; prefWidth=&quot;600.0&quot; spacing=&quot;20.0&quot; style=&quot;-fx-background-color: #ECEFF4;&quot; xmlns=&quot;http://javafx.com/javafx/17.0.12&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.DashboardController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;Label text=&quot;Dashboard&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#2E3440&quot;&gt;&#10;         &lt;font&gt;&#10;            &lt;Font name=&quot;System Bold&quot; size=&quot;36.0&quot; /&gt;&#10;         &lt;/font&gt;&#10;      &lt;/Label&gt;&#10;      &lt;Label text=&quot;Vista del Dashboard - Próximamente KPIs y gráficos&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#4C566A&quot;&gt;&#10;         &lt;font&gt;&#10;            &lt;Font size=&quot;16.0&quot; /&gt;&#10;         &lt;/font&gt;&#10;      &lt;/Label&gt;&#10;   &lt;/children&gt;&#10;   &lt;padding&gt;&#10;      &lt;Insets bottom=&quot;20.0&quot; left=&quot;20.0&quot; right=&quot;20.0&quot; top=&quot;20.0&quot; /&gt;&#10;   &lt;/padding&gt;&#10;&lt;/VBox&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/impacto-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/impacto-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.collections.FXCollections?&gt;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&lt;?import java.lang.String?&gt;&#10;&#10;&lt;VBox xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.ImpactoController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #FFFFFF; -fx-border-color: #D8DEE9; -fx-border-width: 0 0 1 0;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Gestión de Impactos&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnNuevoImpacto&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#mostrarFormularioImpacto&quot;&#10;                    style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot;&#10;                    text=&quot;+ Nuevo Impacto&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Filtros --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;15.0&quot; style=&quot;-fx-background-color: #ECEFF4; -fx-padding: 15;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Filtros:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbTipo&quot; promptText=&quot;Tipo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Maquinaria&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Generación&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Optimización&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Transformación&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbSeveridad&quot; promptText=&quot;Atributo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Planeado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Estimado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Real&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;TextField fx:id=&quot;txtFiltroDescripcion&quot; promptText=&quot;Buscar por tipo...&quot; prefWidth=&quot;200.0&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Tabla de Impactos --&gt;&#10;      &lt;TableView fx:id=&quot;tableImpactos&quot; VBox.vgrow=&quot;ALWAYS&quot;&gt;&#10;         &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;colId&quot; prefWidth=&quot;60.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colDescripcion&quot; prefWidth=&quot;250.0&quot; text=&quot;Descripción&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colTipo&quot; prefWidth=&quot;120.0&quot; text=&quot;Tipo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colSeveridad&quot; prefWidth=&quot;100.0&quot; text=&quot;Severidad&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colValorMonetario&quot; prefWidth=&quot;120.0&quot; text=&quot;Valor Monetario&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colFechaDeteccion&quot; prefWidth=&quot;120.0&quot; text=&quot;F. Detección&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colIniciativaId&quot; prefWidth=&quot;100.0&quot; text=&quot;Iniciativa&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colAcciones&quot; prefWidth=&quot;120.0&quot; text=&quot;Acciones&quot; /&gt;&#10;         &lt;/columns&gt;&#10;      &lt;/TableView&gt;&#10;   &lt;/children&gt;&#10;&lt;/VBox&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.collections.FXCollections?&gt;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&lt;?import java.lang.String?&gt;&#10;&#10;&lt;VBox xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.ImpactoController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #FFFFFF; -fx-border-color: #D8DEE9; -fx-border-width: 0 0 1 0;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Gestión de Impactos&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnNuevoImpacto&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#mostrarFormularioImpacto&quot;&#10;                    style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot;&#10;                    text=&quot;+ Nuevo Impacto&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Filtros --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;15.0&quot; style=&quot;-fx-background-color: #ECEFF4; -fx-padding: 15;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Filtros:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbTipo&quot; promptText=&quot;Tipo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Maquinaria&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Generación&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Optimización&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Transformación&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbSeveridad&quot; promptText=&quot;Atributo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Planeado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Estimado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Real&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;TextField fx:id=&quot;txtFiltroDescripcion&quot; promptText=&quot;Buscar por tipo...&quot; prefWidth=&quot;200.0&quot; /&gt;&#10;&#10;            &lt;Button fx:id=&quot;btnLimpiarFiltros&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#limpiarFiltros&quot;&#10;                    style=&quot;-fx-background-color: #D08770; -fx-text-fill: white; -fx-background-radius: 3;&quot;&#10;                    text=&quot;Limpiar Filtros&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Tabla de Impactos --&gt;&#10;      &lt;TableView fx:id=&quot;tableImpactos&quot; VBox.vgrow=&quot;ALWAYS&quot;&gt;&#10;         &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;colId&quot; prefWidth=&quot;60.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colDescripcion&quot; prefWidth=&quot;250.0&quot; text=&quot;Descripción&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colTipo&quot; prefWidth=&quot;120.0&quot; text=&quot;Tipo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colSeveridad&quot; prefWidth=&quot;100.0&quot; text=&quot;Severidad&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colValorMonetario&quot; prefWidth=&quot;120.0&quot; text=&quot;Valor Monetario&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colFechaDeteccion&quot; prefWidth=&quot;120.0&quot; text=&quot;F. Detección&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colIniciativaId&quot; prefWidth=&quot;100.0&quot; text=&quot;Iniciativa&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colAcciones&quot; prefWidth=&quot;120.0&quot; text=&quot;Acciones&quot; /&gt;&#10;         &lt;/columns&gt;&#10;      &lt;/TableView&gt;&#10;   &lt;/children&gt;&#10;&lt;/VBox&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/iniciativa-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/iniciativa-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import java.lang.*?&gt;&#10;&lt;?import javafx.collections.*?&gt;&#10;&lt;?import javafx.geometry.*?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;VBox xmlns=&quot;http://javafx.com/javafx/17.0.12&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.IniciativaController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #FFFFFF; -fx-border-color: #D8DEE9; -fx-border-width: 0 0 1 0;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Gestión de Iniciativas&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnNuevaIniciativa&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#mostrarFormularioIniciativa&quot; style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;+ Nueva Iniciativa&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Filtros --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;15.0&quot; style=&quot;-fx-background-color: #ECEFF4; -fx-padding: 15;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Filtros:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbEstado&quot; promptText=&quot;Estado&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;planeado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;en curso&quot; /&gt;&#10;                     &lt;String fx:value=&quot;finalizado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;cancelado&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbRiesgo&quot; promptText=&quot;Riesgo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;alto&quot; /&gt;&#10;                     &lt;String fx:value=&quot;medio&quot; /&gt;&#10;                     &lt;String fx:value=&quot;bajo&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;TextField fx:id=&quot;txtFiltroNombre&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Buscar por nombre...&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Tabla --&gt;&#10;      &lt;TableView fx:id=&quot;tableIniciativas&quot; VBox.vgrow=&quot;ALWAYS&quot;&gt;&#10;         &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;colId&quot; minWidth=&quot;50.0&quot; prefWidth=&quot;80.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colNombre&quot; minWidth=&quot;150.0&quot; prefWidth=&quot;200.0&quot; text=&quot;Nombre&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colDescripcion&quot; minWidth=&quot;200.0&quot; prefWidth=&quot;250.0&quot; text=&quot;Descripción&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colTipo&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Tipo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colEstado&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Estado&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colRiesgo&quot; minWidth=&quot;80.0&quot; prefWidth=&quot;100.0&quot; text=&quot;Riesgo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colFechaInicio&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Fecha Inicio&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colFechaFin&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;168.0&quot; text=&quot;Fecha Fin&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colAcciones&quot; minWidth=&quot;150.0&quot; prefWidth=&quot;152.0&quot; text=&quot;Acciones&quot; /&gt;&#10;         &lt;/columns&gt;&#10;         &lt;VBox.margin&gt;&#10;            &lt;Insets bottom=&quot;20.0&quot; left=&quot;20.0&quot; right=&quot;20.0&quot; top=&quot;10.0&quot; /&gt;&#10;         &lt;/VBox.margin&gt;&#10;      &lt;/TableView&gt;&#10;   &lt;/children&gt;&#10;&lt;/VBox&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import java.lang.*?&gt;&#10;&lt;?import javafx.collections.*?&gt;&#10;&lt;?import javafx.geometry.*?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;VBox xmlns=&quot;http://javafx.com/javafx/17.0.12&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.IniciativaController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #FFFFFF; -fx-border-color: #D8DEE9; -fx-border-width: 0 0 1 0;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Gestión de Iniciativas&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnNuevaIniciativa&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#mostrarFormularioIniciativa&quot; style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;+ Nueva Iniciativa&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Filtros --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;15.0&quot; style=&quot;-fx-background-color: #ECEFF4; -fx-padding: 15;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Filtros:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbEstado&quot; promptText=&quot;Estado&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;planeado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;en curso&quot; /&gt;&#10;                     &lt;String fx:value=&quot;finalizado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;cancelado&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbRiesgo&quot; promptText=&quot;Riesgo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;alto&quot; /&gt;&#10;                     &lt;String fx:value=&quot;medio&quot; /&gt;&#10;                     &lt;String fx:value=&quot;bajo&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;TextField fx:id=&quot;txtFiltroNombre&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Buscar por nombre...&quot; /&gt;&#10;&#10;            &lt;Button fx:id=&quot;btnLimpiarFiltros&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#limpiarFiltros&quot;&#10;                    style=&quot;-fx-background-color: #D08770; -fx-text-fill: white; -fx-background-radius: 3;&quot;&#10;                    text=&quot;Limpiar Filtros&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Tabla --&gt;&#10;      &lt;TableView fx:id=&quot;tableIniciativas&quot; VBox.vgrow=&quot;ALWAYS&quot;&gt;&#10;         &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;colId&quot; minWidth=&quot;50.0&quot; prefWidth=&quot;80.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colNombre&quot; minWidth=&quot;150.0&quot; prefWidth=&quot;200.0&quot; text=&quot;Nombre&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colDescripcion&quot; minWidth=&quot;200.0&quot; prefWidth=&quot;250.0&quot; text=&quot;Descripción&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colTipo&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Tipo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colEstado&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Estado&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colRiesgo&quot; minWidth=&quot;80.0&quot; prefWidth=&quot;100.0&quot; text=&quot;Riesgo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colFechaInicio&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Fecha Inicio&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colFechaFin&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;168.0&quot; text=&quot;Fecha Fin&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colAcciones&quot; minWidth=&quot;150.0&quot; prefWidth=&quot;152.0&quot; text=&quot;Acciones&quot; /&gt;&#10;         &lt;/columns&gt;&#10;         &lt;VBox.margin&gt;&#10;            &lt;Insets bottom=&quot;20.0&quot; left=&quot;20.0&quot; right=&quot;20.0&quot; top=&quot;10.0&quot; /&gt;&#10;         &lt;/VBox.margin&gt;&#10;      &lt;/TableView&gt;&#10;   &lt;/children&gt;&#10;&lt;/VBox&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/main-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/main-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;BorderPane xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.MainController&quot;&gt;&#10;   &lt;top&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #2E3440;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;FinImpact&quot; textFill=&quot;WHITE&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnLogin&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleLogin&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;100.0&quot; style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Login&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/top&gt;&#10;   &lt;center&gt;&#10;      &lt;StackPane prefHeight=&quot;400.0&quot; prefWidth=&quot;600.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;!-- Vista de bienvenida para usuarios no logueados --&gt;&#10;            &lt;VBox fx:id=&quot;welcomeView&quot; alignment=&quot;CENTER&quot; spacing=&quot;20.0&quot; style=&quot;-fx-background-color: #ECEFF4;&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label text=&quot;Bienvenido a FinImpact&quot; textAlignment=&quot;CENTER&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;                  &lt;Label text=&quot;Sistema de Seguimiento de Iniciativas e Impactos Financieros&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#4C566A&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;16.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- TabPane para usuarios logueados --&gt;&#10;            &lt;TabPane fx:id=&quot;mainTabPane&quot; visible=&quot;false&quot; style=&quot;-fx-background-color: #ECEFF4;&quot; tabClosingPolicy=&quot;UNAVAILABLE&quot;&gt;&#10;               &lt;tabs&gt;&#10;                  &lt;Tab text=&quot;Dashboard&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include source=&quot;dashboard-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;               &lt;/tabs&gt;&#10;            &lt;/TabPane&gt;&#10;         &lt;/children&gt;&#10;      &lt;/StackPane&gt;&#10;   &lt;/center&gt;&#10;   &lt;bottom&gt;&#10;      &lt;HBox alignment=&quot;CENTER&quot; prefHeight=&quot;40.0&quot; style=&quot;-fx-background-color: #D8DEE9;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label fx:id=&quot;lblStatus&quot; text=&quot;No hay usuario autenticado&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/bottom&gt;&#10;&lt;/BorderPane&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;BorderPane xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.MainController&quot;&gt;&#10;   &lt;top&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #2E3440;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;FinImpact&quot; textFill=&quot;WHITE&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnLogin&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleLogin&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;100.0&quot; style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Login&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/top&gt;&#10;   &lt;center&gt;&#10;      &lt;StackPane prefHeight=&quot;400.0&quot; prefWidth=&quot;600.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;!-- Vista de bienvenida para usuarios no logueados --&gt;&#10;            &lt;VBox fx:id=&quot;welcomeView&quot; alignment=&quot;CENTER&quot; spacing=&quot;20.0&quot; style=&quot;-fx-background-color: #ECEFF4;&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label text=&quot;Bienvenido a FinImpact&quot; textAlignment=&quot;CENTER&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;                  &lt;Label text=&quot;Sistema de Seguimiento de Iniciativas e Impactos Financieros&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#4C566A&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;16.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- TabPane para usuarios logueados --&gt;&#10;            &lt;TabPane fx:id=&quot;mainTabPane&quot; visible=&quot;false&quot; style=&quot;-fx-background-color: #ECEFF4;&quot; tabClosingPolicy=&quot;UNAVAILABLE&quot;&gt;&#10;               &lt;tabs&gt;&#10;                  &lt;Tab text=&quot;Dashboard&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include source=&quot;dashboard-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;                  &lt;Tab text=&quot;Iniciativas&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include source=&quot;iniciativa-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;                  &lt;Tab text=&quot;Impactos&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include source=&quot;impacto-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;               &lt;/tabs&gt;&#10;            &lt;/TabPane&gt;&#10;         &lt;/children&gt;&#10;      &lt;/StackPane&gt;&#10;   &lt;/center&gt;&#10;   &lt;bottom&gt;&#10;      &lt;HBox alignment=&quot;CENTER&quot; prefHeight=&quot;40.0&quot; style=&quot;-fx-background-color: #D8DEE9;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label fx:id=&quot;lblStatus&quot; text=&quot;No hay usuario autenticado&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/bottom&gt;&#10;&lt;/BorderPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>