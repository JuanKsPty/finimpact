<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/PerfilController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/PerfilController.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import com.juank.utp.finimpact.utils.PasswordUtils;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;&#10;/**&#10; * Controlador para la vista de perfil del usuario&#10; */&#10;public class PerfilController {&#10;&#10;    // Componentes de información personal&#10;    @FXML private Label lblNombreCompleto;&#10;    @FXML private Label lblUsuario;&#10;    @FXML private Label lblEmail;&#10;    @FXML private Label lblTipo;&#10;&#10;    // Componentes de cambio de contraseña&#10;    @FXML private PasswordField txtPasswordActual;&#10;    @FXML private PasswordField txtPasswordNueva;&#10;    @FXML private PasswordField txtPasswordConfirmar;&#10;&#10;    private Usuario usuario;&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    public void initialize() {&#10;        usuarioRepository = new UsuarioRepository();&#10;    }&#10;&#10;    /**&#10;     * Establece el usuario cuyo perfil se va a mostrar&#10;     */&#10;    public void setUsuario(Usuario usuario) {&#10;        this.usuario = usuario;&#10;        cargarDatosUsuario();&#10;    }&#10;&#10;    /**&#10;     * Carga los datos del usuario en la interfaz&#10;     */&#10;    private void cargarDatosUsuario() {&#10;        if (usuario != null) {&#10;            lblNombreCompleto.setText(usuario.getNombreCompleto());&#10;            lblUsuario.setText(usuario.getEmail()); // Usar email como nombre de usuario&#10;            lblEmail.setText(usuario.getEmail());&#10;            lblTipo.setText(getTipoDisplayName(usuario.getRol())); // Usar getRol() en lugar de getTipo()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Maneja el evento de cambiar contraseña&#10;     */&#10;    @FXML&#10;    private void cambiarPassword() {&#10;        if (usuario == null) {&#10;            mostrarError(&quot;Error&quot;, &quot;No se ha cargado la información del usuario.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Validaciones&#10;        String passwordActual = txtPasswordActual.getText().trim();&#10;        String passwordNueva = txtPasswordNueva.getText().trim();&#10;        String passwordConfirmar = txtPasswordConfirmar.getText().trim();&#10;&#10;        if (passwordActual.isEmpty()) {&#10;            mostrarError(&quot;Error&quot;, &quot;Debe ingresar su contraseña actual.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (passwordNueva.isEmpty()) {&#10;            mostrarError(&quot;Error&quot;, &quot;Debe ingresar la nueva contraseña.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (passwordNueva.length() &lt; 6) {&#10;            mostrarError(&quot;Error&quot;, &quot;La nueva contraseña debe tener al menos 6 caracteres.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!passwordNueva.equals(passwordConfirmar)) {&#10;            mostrarError(&quot;Error&quot;, &quot;La confirmación de contraseña no coincide.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Verificar contraseña actual&#10;        if (!PasswordUtils.verifyPassword(passwordActual, usuario.getPassword())) {&#10;            mostrarError(&quot;Error&quot;, &quot;La contraseña actual es incorrecta.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Cambiar contraseña&#10;        try {&#10;            // No hashear aquí, se hace en el repositorio&#10;            usuario.setPassword(passwordNueva);&#10;            usuarioRepository.update(usuario);&#10;&#10;            mostrarInformacion(&quot;Éxito&quot;, &quot;Contraseña cambiada correctamente.&quot;);&#10;            limpiarCampos();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error&quot;, &quot;Error al cambiar la contraseña: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Limpia los campos de contraseña&#10;     */&#10;    @FXML&#10;    private void limpiarCampos() {&#10;        txtPasswordActual.clear();&#10;        txtPasswordNueva.clear();&#10;        txtPasswordConfirmar.clear();&#10;    }&#10;&#10;    /**&#10;     * Convierte el rol técnico a un nombre más amigable&#10;     */&#10;    private String getTipoDisplayName(String rol) {&#10;        switch (rol.toLowerCase()) {&#10;            case &quot;admin&quot;:&#10;                return &quot;Administrador&quot;;&#10;            case &quot;analista&quot;:&#10;                return &quot;Analista&quot;;&#10;            case &quot;viewer&quot;:&#10;                return &quot;Visualizador&quot;;&#10;            default:&#10;                return rol;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Muestra un mensaje de error&#10;     */&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    /**&#10;     * Muestra un mensaje de información&#10;     */&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import com.juank.utp.finimpact.utils.PasswordUtils;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;&#10;/**&#10; * Controlador para la vista de perfil del usuario&#10; */&#10;public class PerfilController {&#10;&#10;    // Componentes de información personal&#10;    @FXML private Label lblNombreCompleto;&#10;    @FXML private Label lblUsuario;&#10;    @FXML private Label lblEmail;&#10;    @FXML private Label lblTipo;&#10;&#10;    // Componentes de cambio de contraseña&#10;    @FXML private PasswordField txtPasswordActual;&#10;    @FXML private PasswordField txtPasswordNueva;&#10;    @FXML private PasswordField txtPasswordConfirmar;&#10;&#10;    private Usuario usuario;&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    public void initialize() {&#10;        usuarioRepository = new UsuarioRepository();&#10;    }&#10;&#10;    /**&#10;     * Establece el usuario cuyo perfil se va a mostrar&#10;     */&#10;    public void setUsuario(Usuario usuario) {&#10;        this.usuario = usuario;&#10;        cargarDatosUsuario();&#10;    }&#10;&#10;    /**&#10;     * Carga los datos del usuario en la interfaz&#10;     */&#10;    private void cargarDatosUsuario() {&#10;        if (usuario != null) {&#10;            lblNombreCompleto.setText(usuario.getNombreCompleto());&#10;            lblUsuario.setText(usuario.getEmail()); // Usar email como nombre de usuario&#10;            lblEmail.setText(usuario.getEmail());&#10;            lblTipo.setText(getTipoDisplayName(usuario.getRol())); // Usar getRol() en lugar de getTipo()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Maneja el evento de cambiar contraseña&#10;     */&#10;    @FXML&#10;    private void cambiarPassword() {&#10;        if (usuario == null) {&#10;            mostrarError(&quot;Error&quot;, &quot;No se ha cargado la información del usuario.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Validaciones&#10;        String passwordActual = txtPasswordActual.getText().trim();&#10;        String passwordNueva = txtPasswordNueva.getText().trim();&#10;        String passwordConfirmar = txtPasswordConfirmar.getText().trim();&#10;&#10;        if (passwordActual.isEmpty()) {&#10;            mostrarError(&quot;Error&quot;, &quot;Debe ingresar su contraseña actual.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (passwordNueva.isEmpty()) {&#10;            mostrarError(&quot;Error&quot;, &quot;Debe ingresar la nueva contraseña.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (passwordNueva.length() &lt; 6) {&#10;            mostrarError(&quot;Error&quot;, &quot;La nueva contraseña debe tener al menos 6 caracteres.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!passwordNueva.equals(passwordConfirmar)) {&#10;            mostrarError(&quot;Error&quot;, &quot;La confirmación de contraseña no coincide.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Verificar contraseña actual&#10;        if (!PasswordUtils.verifyPassword(passwordActual, usuario.getPassword())) {&#10;            mostrarError(&quot;Error&quot;, &quot;La contraseña actual es incorrecta.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Cambiar contraseña&#10;        try {&#10;            // No hashear aquí, se hace en el repositorio&#10;            usuario.setPassword(passwordNueva);&#10;            usuarioRepository.update(usuario);&#10;&#10;            mostrarInformacion(&quot;Éxito&quot;, &quot;Contraseña cambiada correctamente.&quot;);&#10;            limpiarCampos();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error&quot;, &quot;Error al cambiar la contraseña: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Limpia los campos de contraseña&#10;     */&#10;    @FXML&#10;    private void limpiarCampos() {&#10;        txtPasswordActual.clear();&#10;        txtPasswordNueva.clear();&#10;        txtPasswordConfirmar.clear();&#10;    }&#10;&#10;    /**&#10;     * Convierte el rol técnico a un nombre más amigable&#10;     */&#10;    private String getTipoDisplayName(String rol) {&#10;        switch (rol.toLowerCase()) {&#10;            case &quot;admin&quot;:&#10;                return &quot;Administrador&quot;;&#10;            case &quot;analista&quot;:&#10;                return &quot;Analista&quot;;&#10;            case &quot;viewer&quot;:&#10;                return &quot;Visualizador&quot;;&#10;            default:&#10;                return rol;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Muestra un mensaje de error&#10;     */&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    /**&#10;     * Muestra un mensaje de información&#10;     */&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/UsuarioController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/UsuarioController.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.geometry.Insets;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.layout.GridPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.stage.Modality;&#10;import javafx.stage.Stage;&#10;&#10;import java.net.URL;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.ResourceBundle;&#10;&#10;/**&#10; * Controlador para la gestión de usuarios (solo admin)&#10; */&#10;public class UsuarioController implements Initializable {&#10;&#10;    // Componentes de la vista&#10;    @FXML private ComboBox&lt;String&gt; cbTipo;&#10;    @FXML private TextField txtFiltroNombre;&#10;    @FXML private TableView&lt;Usuario&gt; tableUsuarios;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colId;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colNombreCompleto;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colUsuario;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colEmail;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colTipo;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colEstado;&#10;    @FXML private TableColumn&lt;Usuario, Void&gt; colAcciones;&#10;&#10;    // Repositorio&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    // Lista de datos&#10;    private final ObservableList&lt;Usuario&gt; usuariosList = FXCollections.observableArrayList();&#10;    private final ObservableList&lt;Usuario&gt; usuariosFiltradosList = FXCollections.observableArrayList();&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        usuarioRepository = new UsuarioRepository();&#10;&#10;        configurarTabla();&#10;        cargarUsuarios();&#10;        configurarFiltros();&#10;        configurarFiltrosAutomaticos();&#10;    }&#10;&#10;    private void configurarTabla() {&#10;        // Configurar columnas&#10;        colId.setCellValueFactory(cellData -&gt; new SimpleStringProperty(String.valueOf(cellData.getValue().getId())));&#10;        colNombreCompleto.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNombreCompleto()));&#10;        colUsuario.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEmail())); // Usando email como usuario&#10;        colEmail.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEmail()));&#10;        colTipo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(getTipoDisplayName(cellData.getValue().getRol())));&#10;        colEstado.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().isEstado() ? &quot;Activo&quot; : &quot;Inactivo&quot;));&#10;&#10;        // Configurar columna de acciones&#10;        colAcciones.setCellFactory(param -&gt; new TableCell&lt;&gt;() {&#10;            private final Button btnEditar = new Button(&quot;Editar&quot;);&#10;            private final Button btnEstado = new Button();&#10;            private final Button btnEliminar = new Button(&quot;Eliminar&quot;);&#10;            private final HBox pane = new HBox(5);&#10;&#10;            {&#10;                // Configurar tamaños de botones&#10;                btnEditar.setPrefWidth(70);&#10;                btnEditar.setPrefHeight(30);&#10;                btnEstado.setPrefWidth(85);&#10;                btnEstado.setPrefHeight(30);&#10;                btnEliminar.setPrefWidth(70);&#10;                btnEliminar.setPrefHeight(30);&#10;&#10;                // Estilos de botones&#10;                btnEditar.setStyle(&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 10px; -fx-font-weight: bold;&quot;);&#10;                btnEliminar.setStyle(&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 10px; -fx-font-weight: bold;&quot;);&#10;&#10;                pane.getChildren().addAll(btnEditar, btnEstado, btnEliminar);&#10;                pane.setAlignment(javafx.geometry.Pos.CENTER);&#10;&#10;                btnEditar.setOnAction(event -&gt; {&#10;                    Usuario usuario = getTableView().getItems().get(getIndex());&#10;                    editarUsuario(usuario);&#10;                });&#10;&#10;                btnEstado.setOnAction(event -&gt; {&#10;                    Usuario usuario = getTableView().getItems().get(getIndex());&#10;                    cambiarEstadoUsuario(usuario);&#10;                });&#10;&#10;                btnEliminar.setOnAction(event -&gt; {&#10;                    Usuario usuario = getTableView().getItems().get(getIndex());&#10;                    eliminarUsuario(usuario);&#10;                });&#10;            }&#10;&#10;            @Override&#10;            protected void updateItem(Void item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                if (empty) {&#10;                    setGraphic(null);&#10;                } else {&#10;                    Usuario usuario = getTableView().getItems().get(getIndex());&#10;                    if (usuario != null) {&#10;                        // Configurar botón de estado según el estado actual&#10;                        if (usuario.isEstado()) {&#10;                            btnEstado.setText(&quot;Desactivar&quot;);&#10;                            btnEstado.setStyle(&quot;-fx-background-color: #FF9800; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 10px; -fx-font-weight: bold;&quot;);&#10;                        } else {&#10;                            btnEstado.setText(&quot;Activar&quot;);&#10;                            btnEstado.setStyle(&quot;-fx-background-color: #2196F3; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 10px; -fx-font-weight: bold;&quot;);&#10;                        }&#10;                    }&#10;                    setGraphic(pane);&#10;                }&#10;            }&#10;        });&#10;&#10;        tableUsuarios.setItems(usuariosFiltradosList);&#10;    }&#10;&#10;    private void configurarFiltros() {&#10;        cbTipo.setValue(&quot;Todos&quot;);&#10;    }&#10;&#10;    private void configurarFiltrosAutomaticos() {&#10;        // Configurar filtros automáticos&#10;        cbTipo.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        txtFiltroNombre.textProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;    }&#10;&#10;    @FXML&#10;    private void mostrarFormularioUsuario() {&#10;        mostrarFormulario(null);&#10;    }&#10;&#10;    @FXML&#10;    private void aplicarFiltros() {&#10;        String tipoFiltro = cbTipo.getValue();&#10;        String nombreFiltro = txtFiltroNombre.getText().toLowerCase();&#10;&#10;        usuariosFiltradosList.clear();&#10;&#10;        for (Usuario usuario : usuariosList) {&#10;            boolean cumpleTipo = &quot;Todos&quot;.equals(tipoFiltro) || usuario.getRol().equals(tipoFiltro);&#10;            boolean cumpleNombre = nombreFiltro.isEmpty() ||&#10;                    usuario.getNombreCompleto().toLowerCase().contains(nombreFiltro) ||&#10;                    usuario.getEmail().toLowerCase().contains(nombreFiltro);&#10;&#10;            if (cumpleTipo &amp;&amp; cumpleNombre) {&#10;                usuariosFiltradosList.add(usuario);&#10;            }&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void limpiarFiltros() {&#10;        cbTipo.setValue(&quot;Todos&quot;);&#10;        txtFiltroNombre.clear();&#10;        usuariosFiltradosList.setAll(usuariosList);&#10;    }&#10;&#10;    private void cargarUsuarios() {&#10;        try {&#10;            System.out.println(&quot; Recargando lista de usuarios...&quot;);&#10;            List&lt;Usuario&gt; usuarios = usuarioRepository.findAll();&#10;            System.out.println(&quot; Usuarios encontrados: &quot; + usuarios.size());&#10;&#10;            usuariosList.clear();&#10;            usuariosList.setAll(usuarios);&#10;&#10;            usuariosFiltradosList.clear();&#10;            usuariosFiltradosList.setAll(usuarios);&#10;&#10;            // Forzar refresh de la tabla&#10;            tableUsuarios.refresh();&#10;&#10;            System.out.println(&quot;✅ Tabla de usuarios actualizada&quot;);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Error al cargar usuarios: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            mostrarError(&quot;Error al cargar usuarios&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void editarUsuario(Usuario usuario) {&#10;        mostrarFormulario(usuario);&#10;    }&#10;&#10;    private void eliminarUsuario(Usuario usuario) {&#10;        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);&#10;        alert.setTitle(&quot;Confirmar eliminación&quot;);&#10;        alert.setHeaderText(&quot;¿Está seguro de eliminar este usuario?&quot;);&#10;        alert.setContentText(&quot;Esta acción no se puede deshacer.&quot;);&#10;&#10;        Optional&lt;ButtonType&gt; result = alert.showAndWait();&#10;        if (result.isPresent() &amp;&amp; result.get() == ButtonType.OK) {&#10;            try {&#10;                boolean eliminado = usuarioRepository.delete(usuario.getId());&#10;                if (eliminado) {&#10;                    cargarUsuarios();&#10;                    mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario eliminado correctamente.&quot;);&#10;                } else {&#10;                    mostrarError(&quot;Error&quot;, &quot;No se pudo eliminar el usuario.&quot;);&#10;                }&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error al eliminar usuario&quot;, e.getMessage());&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Cambia el estado activo/inactivo de un usuario&#10;     */&#10;    private void cambiarEstadoUsuario(Usuario usuario) {&#10;        String accion = usuario.isEstado() ? &quot;desactivar&quot; : &quot;activar&quot;;&#10;        String mensaje = usuario.isEstado() ?&#10;            &quot;¿Está seguro de desactivar este usuario? No podrá iniciar sesión.&quot; :&#10;            &quot;¿Está seguro de activar este usuario? Podrá iniciar sesión nuevamente.&quot;;&#10;&#10;        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);&#10;        alert.setTitle(&quot;Confirmar cambio de estado&quot;);&#10;        alert.setHeaderText(&quot;¿Cambiar estado del usuario?&quot;);&#10;        alert.setContentText(mensaje);&#10;&#10;        Optional&lt;ButtonType&gt; result = alert.showAndWait();&#10;        if (result.isPresent() &amp;&amp; result.get() == ButtonType.OK) {&#10;            try {&#10;                // Cambiar el estado del usuario&#10;                usuario.setEstado(!usuario.isEstado());&#10;                boolean actualizado = usuarioRepository.updateEstado(usuario.getId(), usuario.isEstado());&#10;&#10;                if (actualizado) {&#10;                    cargarUsuarios(); // Recargar la tabla para mostrar los cambios&#10;                    String estadoTexto = usuario.isEstado() ? &quot;activado&quot; : &quot;desactivado&quot;;&#10;                    mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario &quot; + estadoTexto + &quot; correctamente.&quot;);&#10;                } else {&#10;                    // Revertir el cambio si falló la actualización&#10;                    usuario.setEstado(!usuario.isEstado());&#10;                    mostrarError(&quot;Error&quot;, &quot;No se pudo cambiar el estado del usuario.&quot;);&#10;                }&#10;            } catch (Exception e) {&#10;                // Revertir el cambio si hubo excepción&#10;                usuario.setEstado(!usuario.isEstado());&#10;                mostrarError(&quot;Error al cambiar estado&quot;, e.getMessage());&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void mostrarFormulario(Usuario usuario) {&#10;        try {&#10;            Stage stage = new Stage();&#10;            stage.initModality(Modality.APPLICATION_MODAL);&#10;            stage.setTitle(usuario == null ? &quot;Nuevo Usuario&quot; : &quot;Editar Usuario&quot;);&#10;&#10;            // Forzar el tamaño del stage&#10;            stage.setWidth(650);&#10;            stage.setHeight(500);&#10;            stage.setMinWidth(650);&#10;            stage.setMinHeight(500);&#10;            stage.setResizable(true);&#10;&#10;            GridPane grid = new GridPane();&#10;            grid.setHgap(20);&#10;            grid.setVgap(20);&#10;            grid.setPadding(new Insets(40));&#10;&#10;            // Campos del formulario - HACERLOS MÁS GRANDES&#10;            TextField txtNombreCompleto = new TextField(usuario != null ? usuario.getNombreCompleto() : &quot;&quot;);&#10;            txtNombreCompleto.setPrefWidth(350);&#10;            txtNombreCompleto.setPrefHeight(35);&#10;&#10;            TextField txtEmail = new TextField(usuario != null ? usuario.getEmail() : &quot;&quot;);&#10;            txtEmail.setPrefWidth(350);&#10;            txtEmail.setPrefHeight(35);&#10;&#10;            ComboBox&lt;String&gt; cbRolForm = new ComboBox&lt;&gt;();&#10;            cbRolForm.getItems().addAll(&quot;admin&quot;, &quot;analista&quot;, &quot;viewer&quot;);&#10;            cbRolForm.setValue(usuario != null ? usuario.getRol() : &quot;viewer&quot;);&#10;            cbRolForm.setPrefWidth(350);&#10;            cbRolForm.setPrefHeight(35);&#10;&#10;            PasswordField txtPassword = new PasswordField();&#10;            txtPassword.setPromptText(usuario != null ? &quot;Dejar vacío para mantener contraseña actual&quot; : &quot;Contraseña&quot;);&#10;            txtPassword.setPrefWidth(350);&#10;            txtPassword.setPrefHeight(35);&#10;&#10;            // Hacer las etiquetas más grandes&#10;            Label lblNombre = new Label(&quot;Nombre Completo:&quot;);&#10;            lblNombre.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblEmail = new Label(&quot;Email:&quot;);&#10;            lblEmail.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblRol = new Label(&quot;Rol:&quot;);&#10;            lblRol.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblPassword = new Label(&quot;Contraseña:&quot;);&#10;            lblPassword.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;&#10;            // Agregar campos al grid&#10;            grid.add(lblNombre, 0, 0);&#10;            grid.add(txtNombreCompleto, 1, 0);&#10;            grid.add(lblEmail, 0, 1);&#10;            grid.add(txtEmail, 1, 1);&#10;            grid.add(lblRol, 0, 2);&#10;            grid.add(cbRolForm, 1, 2);&#10;            grid.add(lblPassword, 0, 3);&#10;            grid.add(txtPassword, 1, 3);&#10;&#10;            // Botones más grandes&#10;            HBox buttonBox = new HBox(15);&#10;            Button btnGuardar = new Button(&quot;Guardar&quot;);&#10;            Button btnCancelar = new Button(&quot;Cancelar&quot;);&#10;&#10;            btnGuardar.setPrefWidth(120);&#10;            btnGuardar.setPrefHeight(40);&#10;            btnGuardar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;&#10;            btnCancelar.setPrefWidth(120);&#10;            btnCancelar.setPrefHeight(40);&#10;            btnCancelar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;&#10;            buttonBox.getChildren().addAll(btnGuardar, btnCancelar);&#10;            grid.add(buttonBox, 1, 4);&#10;&#10;            btnGuardar.setOnAction(e -&gt; {&#10;                try {&#10;                    if (txtNombreCompleto.getText().trim().isEmpty()) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El nombre completo es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;                    if (txtEmail.getText().trim().isEmpty()) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El email es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    Usuario nuevoUsuario = usuario != null ? usuario : new Usuario();&#10;                    nuevoUsuario.setNombreCompleto(txtNombreCompleto.getText().trim());&#10;                    nuevoUsuario.setEmail(txtEmail.getText().trim());&#10;                    nuevoUsuario.setRol(cbRolForm.getValue());&#10;                    nuevoUsuario.setEstado(true); // Usuario activo por defecto&#10;&#10;                    // Solo cambiar contraseña si se ingresó una nueva&#10;                    if (!txtPassword.getText().trim().isEmpty()) {&#10;                        // No hashear aquí, se hace en el repositorio&#10;                        nuevoUsuario.setPassword(txtPassword.getText().trim());&#10;                    } else if (usuario != null) {&#10;                        // Para edición, mantener la contraseña existente sin cambios&#10;                        nuevoUsuario.setPassword(null); // Esto indica que no se debe actualizar la contraseña&#10;                    }&#10;&#10;                    if (usuario == null) {&#10;                        // Nuevo usuario, la contraseña es obligatoria&#10;                        if (txtPassword.getText().trim().isEmpty()) {&#10;                            mostrarError(&quot;Error&quot;, &quot;La contraseña es obligatoria para nuevos usuarios&quot;);&#10;                            return;&#10;                        }&#10;                        usuarioRepository.save(nuevoUsuario);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario creado correctamente.&quot;);&#10;                    } else {&#10;                        usuarioRepository.update(nuevoUsuario);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario actualizado correctamente.&quot;);&#10;                    }&#10;&#10;                    cargarUsuarios();&#10;                    stage.close();&#10;                } catch (Exception ex) {&#10;                    mostrarError(&quot;Error al guardar usuario&quot;, ex.getMessage());&#10;                }&#10;            });&#10;&#10;            btnCancelar.setOnAction(e -&gt; stage.close());&#10;&#10;            Scene scene = new Scene(grid, 650, 500);&#10;            stage.setScene(scene);&#10;            stage.centerOnScreen();&#10;            stage.showAndWait();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al abrir formulario&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private String getTipoDisplayName(String rol) {&#10;        switch (rol.toLowerCase()) {&#10;            case &quot;admin&quot;:&#10;                return &quot;Administrador&quot;;&#10;            case &quot;analista&quot;:&#10;                return &quot;Analista&quot;;&#10;            case &quot;viewer&quot;:&#10;                return &quot;Visualizador&quot;;&#10;            default:&#10;                return rol;&#10;        }&#10;    }&#10;&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.geometry.Insets;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.layout.GridPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.stage.Modality;&#10;import javafx.stage.Stage;&#10;&#10;import java.net.URL;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.ResourceBundle;&#10;&#10;/**&#10; * Controlador para la gestión de usuarios (solo admin)&#10; */&#10;public class UsuarioController implements Initializable {&#10;&#10;    // Componentes de la vista&#10;    @FXML private ComboBox&lt;String&gt; cbTipo;&#10;    @FXML private TextField txtFiltroNombre;&#10;    @FXML private TableView&lt;Usuario&gt; tableUsuarios;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colId;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colNombreCompleto;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colUsuario;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colEmail;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colTipo;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colEstado;&#10;    @FXML private TableColumn&lt;Usuario, Void&gt; colAcciones;&#10;&#10;    // Repositorio&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    // Lista de datos&#10;    private final ObservableList&lt;Usuario&gt; usuariosList = FXCollections.observableArrayList();&#10;    private final ObservableList&lt;Usuario&gt; usuariosFiltradosList = FXCollections.observableArrayList();&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        usuarioRepository = new UsuarioRepository();&#10;&#10;        configurarTabla();&#10;        cargarUsuarios();&#10;        configurarFiltros();&#10;        configurarFiltrosAutomaticos();&#10;    }&#10;&#10;    private void configurarTabla() {&#10;        // Configurar columnas&#10;        colId.setCellValueFactory(cellData -&gt; new SimpleStringProperty(String.valueOf(cellData.getValue().getId())));&#10;        colNombreCompleto.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNombreCompleto()));&#10;        colUsuario.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEmail())); // Usando email como usuario&#10;        colEmail.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEmail()));&#10;        colTipo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(getTipoDisplayName(cellData.getValue().getRol())));&#10;        colEstado.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().isEstado() ? &quot;Activo&quot; : &quot;Inactivo&quot;));&#10;&#10;        // Configurar columna de acciones&#10;        colAcciones.setCellFactory(param -&gt; new TableCell&lt;&gt;() {&#10;            private final Button btnEditar = new Button(&quot;Editar&quot;);&#10;            private final Button btnEliminar = new Button(&quot;Eliminar&quot;);&#10;            private final HBox pane = new HBox(8);&#10;&#10;            {&#10;                // Configurar tamaños de botones&#10;                btnEditar.setPrefWidth(80);&#10;                btnEditar.setPrefHeight(35);&#10;                btnEliminar.setPrefWidth(80);&#10;                btnEliminar.setPrefHeight(35);&#10;&#10;                // Estilos de botones&#10;                btnEditar.setStyle(&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;                btnEliminar.setStyle(&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;&#10;                pane.getChildren().addAll(btnEditar, btnEliminar);&#10;                pane.setAlignment(javafx.geometry.Pos.CENTER);&#10;&#10;                btnEditar.setOnAction(event -&gt; {&#10;                    Usuario usuario = getTableView().getItems().get(getIndex());&#10;                    editarUsuario(usuario);&#10;                });&#10;&#10;                btnEliminar.setOnAction(event -&gt; {&#10;                    Usuario usuario = getTableView().getItems().get(getIndex());&#10;                    eliminarUsuario(usuario);&#10;                });&#10;            }&#10;&#10;            @Override&#10;            protected void updateItem(Void item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setGraphic(empty ? null : pane);&#10;            }&#10;        });&#10;&#10;        tableUsuarios.setItems(usuariosFiltradosList);&#10;    }&#10;&#10;    private void configurarFiltros() {&#10;        cbTipo.setValue(&quot;Todos&quot;);&#10;    }&#10;&#10;    private void configurarFiltrosAutomaticos() {&#10;        // Configurar filtros automáticos&#10;        cbTipo.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        txtFiltroNombre.textProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;    }&#10;&#10;    @FXML&#10;    private void mostrarFormularioUsuario() {&#10;        mostrarFormulario(null);&#10;    }&#10;&#10;    @FXML&#10;    private void aplicarFiltros() {&#10;        String tipoFiltro = cbTipo.getValue();&#10;        String nombreFiltro = txtFiltroNombre.getText().toLowerCase();&#10;&#10;        usuariosFiltradosList.clear();&#10;&#10;        for (Usuario usuario : usuariosList) {&#10;            boolean cumpleTipo = &quot;Todos&quot;.equals(tipoFiltro) || usuario.getRol().equals(tipoFiltro);&#10;            boolean cumpleNombre = nombreFiltro.isEmpty() ||&#10;                    usuario.getNombreCompleto().toLowerCase().contains(nombreFiltro) ||&#10;                    usuario.getEmail().toLowerCase().contains(nombreFiltro);&#10;&#10;            if (cumpleTipo &amp;&amp; cumpleNombre) {&#10;                usuariosFiltradosList.add(usuario);&#10;            }&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void limpiarFiltros() {&#10;        cbTipo.setValue(&quot;Todos&quot;);&#10;        txtFiltroNombre.clear();&#10;        usuariosFiltradosList.setAll(usuariosList);&#10;    }&#10;&#10;    private void cargarUsuarios() {&#10;        try {&#10;            System.out.println(&quot; Recargando lista de usuarios...&quot;);&#10;            List&lt;Usuario&gt; usuarios = usuarioRepository.findAll();&#10;            System.out.println(&quot; Usuarios encontrados: &quot; + usuarios.size());&#10;&#10;            usuariosList.clear();&#10;            usuariosList.setAll(usuarios);&#10;&#10;            usuariosFiltradosList.clear();&#10;            usuariosFiltradosList.setAll(usuarios);&#10;&#10;            // Forzar refresh de la tabla&#10;            tableUsuarios.refresh();&#10;&#10;            System.out.println(&quot;✅ Tabla de usuarios actualizada&quot;);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Error al cargar usuarios: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            mostrarError(&quot;Error al cargar usuarios&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void editarUsuario(Usuario usuario) {&#10;        mostrarFormulario(usuario);&#10;    }&#10;&#10;    private void eliminarUsuario(Usuario usuario) {&#10;        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);&#10;        alert.setTitle(&quot;Confirmar eliminación&quot;);&#10;        alert.setHeaderText(&quot;¿Está seguro de eliminar este usuario?&quot;);&#10;        alert.setContentText(&quot;Esta acción no se puede deshacer.&quot;);&#10;&#10;        Optional&lt;ButtonType&gt; result = alert.showAndWait();&#10;        if (result.isPresent() &amp;&amp; result.get() == ButtonType.OK) {&#10;            try {&#10;                boolean eliminado = usuarioRepository.delete(usuario.getId());&#10;                if (eliminado) {&#10;                    cargarUsuarios();&#10;                    mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario eliminado correctamente.&quot;);&#10;                } else {&#10;                    mostrarError(&quot;Error&quot;, &quot;No se pudo eliminar el usuario.&quot;);&#10;                }&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error al eliminar usuario&quot;, e.getMessage());&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Cambia el estado activo/inactivo de un usuario&#10;     */&#10;    private void cambiarEstadoUsuario(Usuario usuario) {&#10;        String accion = usuario.isEstado() ? &quot;desactivar&quot; : &quot;activar&quot;;&#10;        String mensaje = usuario.isEstado() ?&#10;            &quot;¿Está seguro de desactivar este usuario? No podrá iniciar sesión.&quot; :&#10;            &quot;¿Está seguro de activar este usuario? Podrá iniciar sesión nuevamente.&quot;;&#10;&#10;        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);&#10;        alert.setTitle(&quot;Confirmar cambio de estado&quot;);&#10;        alert.setHeaderText(&quot;¿Cambiar estado del usuario?&quot;);&#10;        alert.setContentText(mensaje);&#10;&#10;        Optional&lt;ButtonType&gt; result = alert.showAndWait();&#10;        if (result.isPresent() &amp;&amp; result.get() == ButtonType.OK) {&#10;            try {&#10;                // Cambiar el estado del usuario&#10;                usuario.setEstado(!usuario.isEstado());&#10;                boolean actualizado = usuarioRepository.updateEstado(usuario.getId(), usuario.isEstado());&#10;&#10;                if (actualizado) {&#10;                    cargarUsuarios(); // Recargar la tabla para mostrar los cambios&#10;                    String estadoTexto = usuario.isEstado() ? &quot;activado&quot; : &quot;desactivado&quot;;&#10;                    mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario &quot; + estadoTexto + &quot; correctamente.&quot;);&#10;                } else {&#10;                    // Revertir el cambio si falló la actualización&#10;                    usuario.setEstado(!usuario.isEstado());&#10;                    mostrarError(&quot;Error&quot;, &quot;No se pudo cambiar el estado del usuario.&quot;);&#10;                }&#10;            } catch (Exception e) {&#10;                // Revertir el cambio si hubo excepción&#10;                usuario.setEstado(!usuario.isEstado());&#10;                mostrarError(&quot;Error al cambiar estado&quot;, e.getMessage());&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void mostrarFormulario(Usuario usuario) {&#10;        try {&#10;            Stage stage = new Stage();&#10;            stage.initModality(Modality.APPLICATION_MODAL);&#10;            stage.setTitle(usuario == null ? &quot;Nuevo Usuario&quot; : &quot;Editar Usuario&quot;);&#10;&#10;            // Forzar el tamaño del stage&#10;            stage.setWidth(650);&#10;            stage.setHeight(500);&#10;            stage.setMinWidth(650);&#10;            stage.setMinHeight(500);&#10;            stage.setResizable(true);&#10;&#10;            GridPane grid = new GridPane();&#10;            grid.setHgap(20);&#10;            grid.setVgap(20);&#10;            grid.setPadding(new Insets(40));&#10;&#10;            // Campos del formulario - HACERLOS MÁS GRANDES&#10;            TextField txtNombreCompleto = new TextField(usuario != null ? usuario.getNombreCompleto() : &quot;&quot;);&#10;            txtNombreCompleto.setPrefWidth(350);&#10;            txtNombreCompleto.setPrefHeight(35);&#10;&#10;            TextField txtEmail = new TextField(usuario != null ? usuario.getEmail() : &quot;&quot;);&#10;            txtEmail.setPrefWidth(350);&#10;            txtEmail.setPrefHeight(35);&#10;&#10;            ComboBox&lt;String&gt; cbRolForm = new ComboBox&lt;&gt;();&#10;            cbRolForm.getItems().addAll(&quot;admin&quot;, &quot;analista&quot;, &quot;viewer&quot;);&#10;            cbRolForm.setValue(usuario != null ? usuario.getRol() : &quot;viewer&quot;);&#10;            cbRolForm.setPrefWidth(350);&#10;            cbRolForm.setPrefHeight(35);&#10;&#10;            PasswordField txtPassword = new PasswordField();&#10;            txtPassword.setPromptText(usuario != null ? &quot;Dejar vacío para mantener contraseña actual&quot; : &quot;Contraseña&quot;);&#10;            txtPassword.setPrefWidth(350);&#10;            txtPassword.setPrefHeight(35);&#10;&#10;            // Hacer las etiquetas más grandes&#10;            Label lblNombre = new Label(&quot;Nombre Completo:&quot;);&#10;            lblNombre.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblEmail = new Label(&quot;Email:&quot;);&#10;            lblEmail.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblRol = new Label(&quot;Rol:&quot;);&#10;            lblRol.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblPassword = new Label(&quot;Contraseña:&quot;);&#10;            lblPassword.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;&#10;            // Agregar campos al grid&#10;            grid.add(lblNombre, 0, 0);&#10;            grid.add(txtNombreCompleto, 1, 0);&#10;            grid.add(lblEmail, 0, 1);&#10;            grid.add(txtEmail, 1, 1);&#10;            grid.add(lblRol, 0, 2);&#10;            grid.add(cbRolForm, 1, 2);&#10;            grid.add(lblPassword, 0, 3);&#10;            grid.add(txtPassword, 1, 3);&#10;&#10;            // Botones más grandes&#10;            HBox buttonBox = new HBox(15);&#10;            Button btnGuardar = new Button(&quot;Guardar&quot;);&#10;            Button btnCancelar = new Button(&quot;Cancelar&quot;);&#10;&#10;            btnGuardar.setPrefWidth(120);&#10;            btnGuardar.setPrefHeight(40);&#10;            btnGuardar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;&#10;            btnCancelar.setPrefWidth(120);&#10;            btnCancelar.setPrefHeight(40);&#10;            btnCancelar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;&#10;            buttonBox.getChildren().addAll(btnGuardar, btnCancelar);&#10;            grid.add(buttonBox, 1, 4);&#10;&#10;            btnGuardar.setOnAction(e -&gt; {&#10;                try {&#10;                    if (txtNombreCompleto.getText().trim().isEmpty()) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El nombre completo es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;                    if (txtEmail.getText().trim().isEmpty()) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El email es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    Usuario nuevoUsuario = usuario != null ? usuario : new Usuario();&#10;                    nuevoUsuario.setNombreCompleto(txtNombreCompleto.getText().trim());&#10;                    nuevoUsuario.setEmail(txtEmail.getText().trim());&#10;                    nuevoUsuario.setRol(cbRolForm.getValue());&#10;                    nuevoUsuario.setEstado(true); // Usuario activo por defecto&#10;&#10;                    // Solo cambiar contraseña si se ingresó una nueva&#10;                    if (!txtPassword.getText().trim().isEmpty()) {&#10;                        // No hashear aquí, se hace en el repositorio&#10;                        nuevoUsuario.setPassword(txtPassword.getText().trim());&#10;                    } else if (usuario != null) {&#10;                        // Para edición, mantener la contraseña existente sin cambios&#10;                        nuevoUsuario.setPassword(null); // Esto indica que no se debe actualizar la contraseña&#10;                    }&#10;&#10;                    if (usuario == null) {&#10;                        // Nuevo usuario, la contraseña es obligatoria&#10;                        if (txtPassword.getText().trim().isEmpty()) {&#10;                            mostrarError(&quot;Error&quot;, &quot;La contraseña es obligatoria para nuevos usuarios&quot;);&#10;                            return;&#10;                        }&#10;                        usuarioRepository.save(nuevoUsuario);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario creado correctamente.&quot;);&#10;                    } else {&#10;                        usuarioRepository.update(nuevoUsuario);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario actualizado correctamente.&quot;);&#10;                    }&#10;&#10;                    cargarUsuarios();&#10;                    stage.close();&#10;                } catch (Exception ex) {&#10;                    mostrarError(&quot;Error al guardar usuario&quot;, ex.getMessage());&#10;                }&#10;            });&#10;&#10;            btnCancelar.setOnAction(e -&gt; stage.close());&#10;&#10;            Scene scene = new Scene(grid, 650, 500);&#10;            stage.setScene(scene);&#10;            stage.centerOnScreen();&#10;            stage.showAndWait();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al abrir formulario&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private String getTipoDisplayName(String rol) {&#10;        switch (rol.toLowerCase()) {&#10;            case &quot;admin&quot;:&#10;                return &quot;Administrador&quot;;&#10;            case &quot;analista&quot;:&#10;                return &quot;Analista&quot;;&#10;            case &quot;viewer&quot;:&#10;                return &quot;Visualizador&quot;;&#10;            default:&#10;                return rol;&#10;        }&#10;    }&#10;&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Usuario.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Usuario.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.model;&#10;&#10;/**&#10; * Modelo que representa un usuario del sistema&#10; */&#10;public class Usuario {&#10;    private int idUsuario;&#10;    private String nombreCompleto;&#10;    private String email;&#10;    private String password; // Hash de la contraseña&#10;    private String rol; // admin, analista, viewer&#10;    private boolean estado; // true = activo, false = inactivo&#10;&#10;    // Constructor vacío&#10;    public Usuario() {}&#10;&#10;    // Constructor completo&#10;    public Usuario(int idUsuario, String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.idUsuario = idUsuario;&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Constructor sin ID (para inserción)&#10;    public Usuario(String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getRol() {&#10;        return rol;&#10;    }&#10;&#10;    public void setRol(String rol) {&#10;        this.rol = rol;&#10;    }&#10;&#10;    public boolean isEstado() {&#10;        return estado;&#10;    }&#10;&#10;    public void setEstado(boolean estado) {&#10;        this.estado = estado;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Usuario{&quot; +&#10;                &quot;idUsuario=&quot; + idUsuario +&#10;                &quot;, nombreCompleto='&quot; + nombreCompleto + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                &quot;, rol='&quot; + rol + '\'' +&#10;                &quot;, estado=&quot; + estado +&#10;                '}';&#10;    }&#10;        return &quot;Usuario{&quot; +&#10;                &quot;idUsuario=&quot; + idUsuario +&#10;                &quot;, nombreCompleto='&quot; + nombreCompleto + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                &quot;, rol='&quot; + rol + '\'' +&#10;                &quot;, estado=&quot; + estado +&#10;                '}';&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.model;&#10;&#10;/**&#10; * Modelo que representa un usuario del sistema&#10; */&#10;public class Usuario {&#10;    private int idUsuario;&#10;    private String nombreCompleto;&#10;    private String email;&#10;    private String password; // Hash de la contraseña&#10;    private String rol; // admin, analista, viewer&#10;    private boolean estado; // true = activo, false = inactivo&#10;&#10;    // Constructor vacío&#10;    public Usuario() {}&#10;&#10;    // Constructor completo&#10;    public Usuario(int idUsuario, String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.idUsuario = idUsuario;&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Constructor sin ID (para inserción)&#10;    public Usuario(String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getId() {&#10;        return idUsuario;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.idUsuario = id;&#10;    }&#10;&#10;    public int getIdUsuario() {&#10;        return idUsuario;&#10;    }&#10;&#10;    public void setIdUsuario(int idUsuario) {&#10;        this.idUsuario = idUsuario;&#10;    }&#10;&#10;    public String getNombreCompleto() {&#10;        return nombreCompleto;&#10;    }&#10;&#10;    public void setNombreCompleto(String nombreCompleto) {&#10;        this.nombreCompleto = nombreCompleto;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getRol() {&#10;        return rol;&#10;    }&#10;&#10;    public void setRol(String rol) {&#10;        this.rol = rol;&#10;    }&#10;&#10;    public boolean isEstado() {&#10;        return estado;&#10;    }&#10;&#10;    public void setEstado(boolean estado) {&#10;        this.estado = estado;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return nombreCompleto;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/ImpactoRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/ImpactoRepository.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.repository;&#10;&#10;import com.juank.utp.finimpact.model.Impacto;&#10;import com.juank.utp.finimpact.utils.DatabaseConfig;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;import java.time.LocalDate;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repositorio para operaciones CRUD de impactos financieros&#10; */&#10;public class ImpactoRepository {&#10;&#10;    /**&#10;     * Obtiene todos los impactos&#10;     */&#10;    public List&lt;Impacto&gt; findAll() {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos ORDER BY fecha_creacion DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Busca un impacto por ID&#10;     */&#10;    public Optional&lt;Impacto&gt; findById(int id) {&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE id_impacto = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                return Optional.of(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar impacto por ID: &quot; + e.getMessage());&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por iniciativa&#10;     */&#10;    public List&lt;Impacto&gt; findByIniciativa(int idIniciativa) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE id_iniciativa = ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idIniciativa);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por tipo de impacto&#10;     */&#10;    public List&lt;Impacto&gt; findByTipoImpacto(String tipoImpacto) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE tipo_impacto = ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, tipoImpacto);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por tipo: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por atributo (Planeado, Estimado, Real)&#10;     */&#10;    public List&lt;Impacto&gt; findByAtributoImpacto(String atributoImpacto) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE atributo_impacto = ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, atributoImpacto);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por atributo: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por rango de fechas&#10;     */&#10;    public List&lt;Impacto&gt; findByFechaRange(LocalDate fechaInicio, LocalDate fechaFin) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE fecha_impacto BETWEEN ? AND ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setDate(1, Date.valueOf(fechaInicio));&#10;            stmt.setDate(2, Date.valueOf(fechaFin));&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por rango de fechas: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos con filtros múltiples&#10;     */&#10;    public List&lt;Impacto&gt; findByFilters(String tipoImpacto, String atributoImpacto, Integer idIniciativa, LocalDate fechaInicio, LocalDate fechaFin) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE 1=1&quot;);&#10;        List&lt;Object&gt; parameters = new ArrayList&lt;&gt;();&#10;&#10;        if (tipoImpacto != null &amp;&amp; !tipoImpacto.isEmpty()) {&#10;            sql.append(&quot; AND tipo_impacto = ?&quot;);&#10;            parameters.add(tipoImpacto);&#10;        }&#10;&#10;        if (atributoImpacto != null &amp;&amp; !atributoImpacto.isEmpty()) {&#10;            sql.append(&quot; AND atributo_impacto = ?&quot;);&#10;            parameters.add(atributoImpacto);&#10;        }&#10;&#10;        if (idIniciativa != null) {&#10;            sql.append(&quot; AND id_iniciativa = ?&quot;);&#10;            parameters.add(idIniciativa);&#10;        }&#10;&#10;        if (fechaInicio != null) {&#10;            sql.append(&quot; AND fecha_impacto &gt;= ?&quot;);&#10;            parameters.add(Date.valueOf(fechaInicio));&#10;        }&#10;&#10;        if (fechaFin != null) {&#10;            sql.append(&quot; AND fecha_impacto &lt;= ?&quot;);&#10;            parameters.add(Date.valueOf(fechaFin));&#10;        }&#10;&#10;        sql.append(&quot; ORDER BY fecha_impacto DESC&quot;);&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql.toString())) {&#10;&#10;            for (int i = 0; i &lt; parameters.size(); i++) {&#10;                stmt.setObject(i + 1, parameters.get(i));&#10;            }&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por filtros: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Crea un nuevo impacto&#10;     */&#10;    public boolean save(Impacto impacto) {&#10;        String sql = &quot;INSERT INTO impactos (id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto) VALUES (?, ?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;&#10;            stmt.setInt(1, impacto.getIdIniciativa());&#10;            stmt.setDate(2, Date.valueOf(impacto.getFechaCreacion()));&#10;            stmt.setString(3, impacto.getTipoImpacto());&#10;            stmt.setInt(4, impacto.getMultiplicador());&#10;            stmt.setString(5, impacto.getAtributoImpacto());&#10;            stmt.setDate(6, Date.valueOf(impacto.getFechaImpacto()));&#10;            stmt.setBigDecimal(7, impacto.getImpacto());&#10;&#10;            int rowsAffected = stmt.executeUpdate();&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                ResultSet rs = stmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    impacto.setIdImpacto(rs.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al crear impacto: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza un impacto existente&#10;     */&#10;    public boolean update(Impacto impacto) {&#10;        String sql = &quot;UPDATE impactos SET id_iniciativa = ?, fecha_creacion = ?, tipo_impacto = ?, multiplicador = ?, atributo_impacto = ?, fecha_impacto = ?, impacto = ? WHERE id_impacto = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, impacto.getIdIniciativa());&#10;            stmt.setDate(2, Date.valueOf(impacto.getFechaCreacion()));&#10;            stmt.setString(3, impacto.getTipoImpacto());&#10;            stmt.setInt(4, impacto.getMultiplicador());&#10;            stmt.setString(5, impacto.getAtributoImpacto());&#10;            stmt.setDate(6, Date.valueOf(impacto.getFechaImpacto()));&#10;            stmt.setBigDecimal(7, impacto.getImpacto());&#10;            stmt.setInt(8, impacto.getIdImpacto());&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar impacto: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Elimina un impacto&#10;     */&#10;    public boolean delete(int idImpacto) {&#10;        String sql = &quot;DELETE FROM impactos WHERE id_impacto = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idImpacto);&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al eliminar impacto: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Calcula la suma de impactos por atributo en un rango de fechas&#10;     */&#10;    public BigDecimal sumImpactosByAtributoAndFecha(String atributoImpacto, LocalDate fechaInicio, LocalDate fechaFin) {&#10;        String sql = &quot;SELECT COALESCE(SUM(impacto * multiplicador), 0) FROM impactos WHERE atributo_impacto = ? AND fecha_impacto BETWEEN ? AND ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, atributoImpacto);&#10;            stmt.setDate(2, Date.valueOf(fechaInicio));&#10;            stmt.setDate(3, Date.valueOf(fechaFin));&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                return rs.getBigDecimal(1);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al calcular suma de impactos: &quot; + e.getMessage());&#10;        }&#10;&#10;        return BigDecimal.ZERO;&#10;    }&#10;&#10;    /**&#10;     * Obtiene estadísticas de impactos por tipo&#10;     */&#10;    public List&lt;Object[]&gt; getEstadisticasPorTipo() {&#10;        List&lt;Object[]&gt; estadisticas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT tipo_impacto, COUNT(*) as cantidad, SUM(impacto * multiplicador) as total FROM impactos GROUP BY tipo_impacto ORDER BY total DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Object[] fila = new Object[3];&#10;                fila[0] = rs.getString(&quot;tipo_impacto&quot;);&#10;                fila[1] = rs.getInt(&quot;cantidad&quot;);&#10;                fila[2] = rs.getBigDecimal(&quot;total&quot;);&#10;                estadisticas.add(fila);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener estadísticas por tipo: &quot; + e.getMessage());&#10;        }&#10;&#10;        return estadisticas;&#10;    }&#10;&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.repository;&#10;&#10;import com.juank.utp.finimpact.model.Impacto;&#10;import com.juank.utp.finimpact.utils.DatabaseConfig;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;import java.time.LocalDate;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repositorio para operaciones CRUD de impactos financieros&#10; */&#10;public class ImpactoRepository {&#10;&#10;    /**&#10;     * Obtiene todos los impactos&#10;     */&#10;    public List&lt;Impacto&gt; findAll() {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos ORDER BY fecha_creacion DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Busca un impacto por ID&#10;     */&#10;    public Optional&lt;Impacto&gt; findById(int id) {&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE id_impacto = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                return Optional.of(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar impacto por ID: &quot; + e.getMessage());&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por iniciativa&#10;     */&#10;    public List&lt;Impacto&gt; findByIniciativa(int idIniciativa) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE id_iniciativa = ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idIniciativa);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por tipo de impacto&#10;     */&#10;    public List&lt;Impacto&gt; findByTipoImpacto(String tipoImpacto) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE tipo_impacto = ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, tipoImpacto);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por tipo: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por atributo (Planeado, Estimado, Real)&#10;     */&#10;    public List&lt;Impacto&gt; findByAtributoImpacto(String atributoImpacto) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE atributo_impacto = ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, atributoImpacto);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por atributo: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por rango de fechas&#10;     */&#10;    public List&lt;Impacto&gt; findByFechaRange(LocalDate fechaInicio, LocalDate fechaFin) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE fecha_impacto BETWEEN ? AND ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setDate(1, Date.valueOf(fechaInicio));&#10;            stmt.setDate(2, Date.valueOf(fechaFin));&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por rango de fechas: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos con filtros múltiples&#10;     */&#10;    public List&lt;Impacto&gt; findByFilters(String tipoImpacto, String atributoImpacto, Integer idIniciativa, LocalDate fechaInicio, LocalDate fechaFin) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE 1=1&quot;);&#10;        List&lt;Object&gt; parameters = new ArrayList&lt;&gt;();&#10;&#10;        if (tipoImpacto != null &amp;&amp; !tipoImpacto.isEmpty()) {&#10;            sql.append(&quot; AND tipo_impacto = ?&quot;);&#10;            parameters.add(tipoImpacto);&#10;        }&#10;&#10;        if (atributoImpacto != null &amp;&amp; !atributoImpacto.isEmpty()) {&#10;            sql.append(&quot; AND atributo_impacto = ?&quot;);&#10;            parameters.add(atributoImpacto);&#10;        }&#10;&#10;        if (idIniciativa != null) {&#10;            sql.append(&quot; AND id_iniciativa = ?&quot;);&#10;            parameters.add(idIniciativa);&#10;        }&#10;&#10;        if (fechaInicio != null) {&#10;            sql.append(&quot; AND fecha_impacto &gt;= ?&quot;);&#10;            parameters.add(Date.valueOf(fechaInicio));&#10;        }&#10;&#10;        if (fechaFin != null) {&#10;            sql.append(&quot; AND fecha_impacto &lt;= ?&quot;);&#10;            parameters.add(Date.valueOf(fechaFin));&#10;        }&#10;&#10;        sql.append(&quot; ORDER BY fecha_impacto DESC&quot;);&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql.toString())) {&#10;&#10;            for (int i = 0; i &lt; parameters.size(); i++) {&#10;                stmt.setObject(i + 1, parameters.get(i));&#10;            }&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por filtros: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Crea un nuevo impacto&#10;     */&#10;    public boolean save(Impacto impacto) {&#10;        String sql = &quot;INSERT INTO impactos (id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto) VALUES (?, ?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;&#10;            stmt.setInt(1, impacto.getIdIniciativa());&#10;            stmt.setDate(2, Date.valueOf(impacto.getFechaCreacion()));&#10;            stmt.setString(3, impacto.getTipoImpacto());&#10;            stmt.setInt(4, impacto.getMultiplicador());&#10;            stmt.setString(5, impacto.getAtributoImpacto());&#10;            stmt.setDate(6, Date.valueOf(impacto.getFechaImpacto()));&#10;            stmt.setBigDecimal(7, impacto.getImpacto());&#10;&#10;            int rowsAffected = stmt.executeUpdate();&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                ResultSet rs = stmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    impacto.setIdImpacto(rs.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al crear impacto: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza un impacto existente&#10;     */&#10;    public boolean update(Impacto impacto) {&#10;        String sql = &quot;UPDATE impactos SET id_iniciativa = ?, fecha_creacion = ?, tipo_impacto = ?, multiplicador = ?, atributo_impacto = ?, fecha_impacto = ?, impacto = ? WHERE id_impacto = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, impacto.getIdIniciativa());&#10;            stmt.setDate(2, Date.valueOf(impacto.getFechaCreacion()));&#10;            stmt.setString(3, impacto.getTipoImpacto());&#10;            stmt.setInt(4, impacto.getMultiplicador());&#10;            stmt.setString(5, impacto.getAtributoImpacto());&#10;            stmt.setDate(6, Date.valueOf(impacto.getFechaImpacto()));&#10;            stmt.setBigDecimal(7, impacto.getImpacto());&#10;            stmt.setInt(8, impacto.getIdImpacto());&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar impacto: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Elimina un impacto&#10;     */&#10;    public boolean delete(int idImpacto) {&#10;        String sql = &quot;DELETE FROM impactos WHERE id_impacto = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idImpacto);&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al eliminar impacto: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Calcula la suma de impactos por atributo en un rango de fechas&#10;     */&#10;    public BigDecimal sumImpactosByAtributoAndFecha(String atributoImpacto, LocalDate fechaInicio, LocalDate fechaFin) {&#10;        String sql = &quot;SELECT COALESCE(SUM(impacto * multiplicador), 0) FROM impactos WHERE atributo_impacto = ? AND fecha_impacto BETWEEN ? AND ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, atributoImpacto);&#10;            stmt.setDate(2, Date.valueOf(fechaInicio));&#10;            stmt.setDate(3, Date.valueOf(fechaFin));&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                return rs.getBigDecimal(1);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al calcular suma de impactos: &quot; + e.getMessage());&#10;        }&#10;&#10;        return BigDecimal.ZERO;&#10;    }&#10;&#10;    /**&#10;     * Obtiene estadísticas de impactos por tipo&#10;     */&#10;    public List&lt;Object[]&gt; getEstadisticasPorTipo() {&#10;        List&lt;Object[]&gt; estadisticas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT tipo_impacto, COUNT(*) as cantidad, SUM(impacto * multiplicador) as total FROM impactos GROUP BY tipo_impacto ORDER BY total DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Object[] fila = new Object[3];&#10;                fila[0] = rs.getString(&quot;tipo_impacto&quot;);&#10;                fila[1] = rs.getInt(&quot;cantidad&quot;);&#10;                fila[2] = rs.getBigDecimal(&quot;total&quot;);&#10;                estadisticas.add(fila);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener estadísticas por tipo: &quot; + e.getMessage());&#10;        }&#10;&#10;        return estadisticas;&#10;    }&#10;&#10;    /**&#10;     * Suma de impactos planeados del mes actual&#10;     */&#10;    public BigDecimal getSumaImpactosPlaneadosMesActual() {&#10;        String sql = &quot;SELECT COALESCE(SUM(impacto * multiplicador), 0) FROM impactos &quot; +&#10;                    &quot;WHERE atributo_impacto = 'Planeado' &quot; +&#10;                    &quot;AND YEAR(fecha_impacto) = YEAR(GETDATE()) &quot; +&#10;                    &quot;AND MONTH(fecha_impacto) = MONTH(GETDATE())&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            if (rs.next()) {&#10;                return rs.getBigDecimal(1);&#10;            }&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener suma de impactos planeados del mes: &quot; + e.getMessage());&#10;        }&#10;&#10;        return BigDecimal.ZERO;&#10;    }&#10;&#10;    /**&#10;     * Suma de impactos reales del mes actual&#10;     */&#10;    public BigDecimal getSumaImpactosRealesMesActual() {&#10;        String sql = &quot;SELECT COALESCE(SUM(impacto * multiplicador), 0) FROM impactos &quot; +&#10;                    &quot;WHERE atributo_impacto = 'Real' &quot; +&#10;                    &quot;AND YEAR(fecha_impacto) = YEAR(GETDATE()) &quot; +&#10;                    &quot;AND MONTH(fecha_impacto) = MONTH(GETDATE())&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            if (rs.next()) {&#10;                return rs.getBigDecimal(1);&#10;            }&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener suma de impactos reales del mes: &quot; + e.getMessage());&#10;        }&#10;&#10;        return BigDecimal.ZERO;&#10;    }&#10;&#10;    /**&#10;     * Obtiene la distribución de impactos por tipo para gráfico de pastel&#10;     */&#10;    public List&lt;Object[]&gt; getDistribucionPorTipo() {&#10;        List&lt;Object[]&gt; distribucion = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT tipo_impacto, SUM(impacto * multiplicador) as total &quot; +&#10;                    &quot;FROM impactos &quot; +&#10;                    &quot;GROUP BY tipo_impacto &quot; +&#10;                    &quot;ORDER BY total DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                String tipo = rs.getString(&quot;tipo_impacto&quot;);&#10;                BigDecimal total = rs.getBigDecimal(&quot;total&quot;);&#10;                distribucion.add(new Object[]{tipo, total});&#10;            }&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener distribución por tipo: &quot; + e.getMessage());&#10;        }&#10;&#10;        return distribucion;&#10;    }&#10;&#10;    /**&#10;     * Obtiene datos de comparación planeado vs real por mes para gráfico de barras&#10;     */&#10;    public List&lt;Object[]&gt; getComparacionPlaneadoVsReal() {&#10;        List&lt;Object[]&gt; comparacion = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT &quot; +&#10;                    &quot;YEAR(fecha_impacto) as año, &quot; +&#10;                    &quot;MONTH(fecha_impacto) as mes, &quot; +&#10;                    &quot;atributo_impacto, &quot; +&#10;                    &quot;SUM(impacto * multiplicador) as total &quot; +&#10;                    &quot;FROM impactos &quot; +&#10;                    &quot;WHERE atributo_impacto IN ('Planeado', 'Real') &quot; +&#10;                    &quot;AND fecha_impacto &gt;= DATEADD(month, -6, GETDATE()) &quot; +&#10;                    &quot;GROUP BY YEAR(fecha_impacto), MONTH(fecha_impacto), atributo_impacto &quot; +&#10;                    &quot;ORDER BY año, mes, atributo_impacto&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                int año = rs.getInt(&quot;año&quot;);&#10;                int mes = rs.getInt(&quot;mes&quot;);&#10;                String atributo = rs.getString(&quot;atributo_impacto&quot;);&#10;                BigDecimal total = rs.getBigDecimal(&quot;total&quot;);&#10;                comparacion.add(new Object[]{año, mes, atributo, total});&#10;            }&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener comparación planeado vs real: &quot; + e.getMessage());&#10;        }&#10;&#10;        return comparacion;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por múltiples IDs de iniciativas&#10;     */&#10;    public List&lt;Impacto&gt; findByIniciativaIds(List&lt;Integer&gt; idsIniciativas) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        if (idsIniciativas == null || idsIniciativas.isEmpty()) {&#10;            return impactos;&#10;        }&#10;&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE id_iniciativa IN (&quot;);&#10;        for (int i = 0; i &lt; idsIniciativas.size(); i++) {&#10;            sql.append(&quot;?&quot;);&#10;            if (i &lt; idsIniciativas.size() - 1) {&#10;                sql.append(&quot;,&quot;);&#10;            }&#10;        }&#10;        sql.append(&quot;) ORDER BY fecha_impacto DESC&quot;);&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql.toString())) {&#10;&#10;            for (int i = 0; i &lt; idsIniciativas.size(); i++) {&#10;                stmt.setInt(i + 1, idsIniciativas.get(i));&#10;            }&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por IDs de iniciativas: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por propietario de iniciativa (para analistas)&#10;     */&#10;    public List&lt;Impacto&gt; findByOwner(int idOwner) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT imp.id_impacto, imp.id_iniciativa, imp.fecha_creacion, imp.tipo_impacto, imp.multiplicador, imp.atributo_impacto, imp.fecha_impacto, imp.impacto &quot; +&#10;                    &quot;FROM impactos imp &quot; +&#10;                    &quot;INNER JOIN iniciativas ini ON imp.id_iniciativa = ini.id_iniciativa &quot; +&#10;                    &quot;WHERE ini.id_owner = ? &quot; +&#10;                    &quot;ORDER BY imp.fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idOwner);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por propietario: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Método auxiliar para crear un objeto Impacto desde ResultSet&#10;     */&#10;    private Impacto createImpactoFromResultSet(ResultSet rs) throws SQLException {&#10;        Impacto impacto = new Impacto();&#10;        impacto.setIdImpacto(rs.getInt(&quot;id_impacto&quot;));&#10;        impacto.setIdIniciativa(rs.getInt(&quot;id_iniciativa&quot;));&#10;        impacto.setFechaCreacion(rs.getDate(&quot;fecha_creacion&quot;).toLocalDate());&#10;        impacto.setTipoImpacto(rs.getString(&quot;tipo_impacto&quot;));&#10;        impacto.setMultiplicador(rs.getInt(&quot;multiplicador&quot;));&#10;        impacto.setAtributoImpacto(rs.getString(&quot;atributo_impacto&quot;));&#10;        impacto.setFechaImpacto(rs.getDate(&quot;fecha_impacto&quot;).toLocalDate());&#10;        impacto.setImpacto(rs.getBigDecimal(&quot;impacto&quot;));&#10;&#10;        return impacto;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/IniciativaRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/IniciativaRepository.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.repository;&#10;&#10;import com.juank.utp.finimpact.model.Iniciativa;&#10;import com.juank.utp.finimpact.utils.DatabaseConfig;&#10;&#10;import java.sql.*;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repositorio para operaciones CRUD de iniciativas&#10; */&#10;public class IniciativaRepository {&#10;&#10;    /**&#10;     * Obtiene todas las iniciativas&#10;     */&#10;    public List&lt;Iniciativa&gt; findAll() {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas ORDER BY fecha_registro DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Busca una iniciativa por ID&#10;     */&#10;    public Optional&lt;Iniciativa&gt; findById(int id) {&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE id_iniciativa = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                return Optional.of(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar iniciativa por ID: &quot; + e.getMessage());&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por owner&#10;     */&#10;    public List&lt;Iniciativa&gt; findByOwner(int idOwner) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE id_owner = ? ORDER BY fecha_registro DESC&quot;;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idOwner);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por owner: &quot; + e.getMessage());&#10;            System.err.println(&quot;Error al obtener iniciativas por owner: &quot; + e.getMessage());&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por estado&#10;     */&#10;    public List&lt;Iniciativa&gt; findByEstado(String estado) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE estado = ? ORDER BY fecha_registro DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, estado);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por estado: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por múltiples filtros&#10;     */&#10;    public List&lt;Iniciativa&gt; findByFilters(String estado, String tipo, String riesgo, Integer idOwner) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE 1=1&quot;);&#10;        List&lt;Object&gt; parameters = new ArrayList&lt;&gt;();&#10;&#10;        if (estado != null &amp;&amp; !estado.isEmpty()) {&#10;            sql.append(&quot; AND estado = ?&quot;);&#10;            parameters.add(estado);&#10;        }&#10;&#10;        if (tipo != null &amp;&amp; !tipo.isEmpty()) {&#10;            sql.append(&quot; AND tipo = ?&quot;);&#10;            parameters.add(tipo);&#10;        }&#10;&#10;        if (riesgo != null &amp;&amp; !riesgo.isEmpty()) {&#10;            sql.append(&quot; AND riesgo = ?&quot;);&#10;            parameters.add(riesgo);&#10;        }&#10;&#10;        if (idOwner != null) {&#10;            sql.append(&quot; AND id_owner = ?&quot;);&#10;            parameters.add(idOwner);&#10;        }&#10;&#10;        sql.append(&quot; ORDER BY fecha_registro DESC&quot;);&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql.toString())) {&#10;&#10;            for (int i = 0; i &lt; parameters.size(); i++) {&#10;                stmt.setObject(i + 1, parameters.get(i));&#10;            }&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por filtros: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Crea una nueva iniciativa&#10;     */&#10;    public boolean save(Iniciativa iniciativa) {&#10;        String sql = &quot;INSERT INTO iniciativas (nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;&#10;            stmt.setString(1, iniciativa.getNombre());&#10;            stmt.setString(2, iniciativa.getDescripcion());&#10;            stmt.setDate(3, iniciativa.getFechaInicio() != null ? Date.valueOf(iniciativa.getFechaInicio()) : null);&#10;            stmt.setDate(4, iniciativa.getFechaFin() != null ? Date.valueOf(iniciativa.getFechaFin()) : null);&#10;            stmt.setString(5, iniciativa.getTipo());&#10;            stmt.setString(6, iniciativa.getEstado());&#10;            stmt.setString(7, iniciativa.getRiesgo());&#10;            stmt.setInt(8, iniciativa.getIdOwner());&#10;&#10;            int rowsAffected = stmt.executeUpdate();&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                ResultSet rs = stmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    iniciativa.setIdIniciativa(rs.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al crear iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza una iniciativa existente&#10;     */&#10;    public boolean update(Iniciativa iniciativa) {&#10;        String sql = &quot;UPDATE iniciativas SET nombre = ?, descripcion = ?, fecha_inicio = ?, fecha_fin = ?, tipo = ?, estado = ?, riesgo = ?, id_owner = ? WHERE id_iniciativa = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, iniciativa.getNombre());&#10;            stmt.setString(2, iniciativa.getDescripcion());&#10;            stmt.setDate(3, iniciativa.getFechaInicio() != null ? Date.valueOf(iniciativa.getFechaInicio()) : null);&#10;            stmt.setDate(4, iniciativa.getFechaFin() != null ? Date.valueOf(iniciativa.getFechaFin()) : null);&#10;            stmt.setString(5, iniciativa.getTipo());&#10;            stmt.setString(6, iniciativa.getEstado());&#10;            stmt.setString(7, iniciativa.getRiesgo());&#10;            stmt.setInt(8, iniciativa.getIdOwner());&#10;            stmt.setInt(9, iniciativa.getIdIniciativa());&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Elimina una iniciativa&#10;     */&#10;    public boolean delete(int idIniciativa) {&#10;        String sql = &quot;DELETE FROM iniciativas WHERE id_iniciativa = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idIniciativa);&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al eliminar iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Cuenta iniciativas activas&#10;     * Cuenta iniciativas activas&#10;    public int countIniciativasActivas() {&#10;        String sql = &quot;SELECT COUNT(*) FROM iniciativas WHERE estado IN ('planeado', 'en curso')&quot;;&#10;        String sql = &quot;SELECT COUNT(*) FROM iniciativas WHERE estado IN ('planeado', 'en curso')&quot;;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            if (rs.next()) {&#10;                return rs.getInt(1);&#10;            }&#10;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al contar iniciativas activas: &quot; + e.getMessage());&#10;        }&#10;&#10;        return 0;&#10;    }&#10;&#10;    /**&#10;     * Método auxiliar para crear un objeto Iniciativa desde ResultSet&#10;     */&#10;    private Iniciativa createIniciativaFromResultSet(ResultSet rs) throws SQLException {&#10;        Iniciativa iniciativa = new Iniciativa();&#10;        iniciativa.setIdIniciativa(rs.getInt(&quot;id_iniciativa&quot;));&#10;        iniciativa.setNombre(rs.getString(&quot;nombre&quot;));&#10;        iniciativa.setDescripcion(rs.getString(&quot;descripcion&quot;));&#10;&#10;        Date fechaInicio = rs.getDate(&quot;fecha_inicio&quot;);&#10;        if (fechaInicio != null) {&#10;            iniciativa.setFechaInicio(fechaInicio.toLocalDate());&#10;        }&#10;&#10;        Date fechaFin = rs.getDate(&quot;fecha_fin&quot;);&#10;        if (fechaFin != null) {&#10;            iniciativa.setFechaFin(fechaFin.toLocalDate());&#10;        }&#10;&#10;        iniciativa.setTipo(rs.getString(&quot;tipo&quot;));&#10;        iniciativa.setEstado(rs.getString(&quot;estado&quot;));&#10;        iniciativa.setRiesgo(rs.getString(&quot;riesgo&quot;));&#10;        iniciativa.setIdOwner(rs.getInt(&quot;id_owner&quot;));&#10;&#10;        Timestamp fechaRegistro = rs.getTimestamp(&quot;fecha_registro&quot;);&#10;        if (fechaRegistro != null) {&#10;            iniciativa.setFechaRegistro(fechaRegistro.toLocalDateTime());&#10;        }&#10;&#10;        return iniciativa;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.repository;&#10;&#10;import com.juank.utp.finimpact.model.Iniciativa;&#10;import com.juank.utp.finimpact.utils.DatabaseConfig;&#10;&#10;import java.sql.*;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repositorio para operaciones CRUD de iniciativas&#10; */&#10;public class IniciativaRepository {&#10;&#10;    /**&#10;     * Obtiene todas las iniciativas&#10;     */&#10;    public List&lt;Iniciativa&gt; findAll() {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas ORDER BY fecha_registro DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Busca una iniciativa por ID&#10;     */&#10;    public Optional&lt;Iniciativa&gt; findById(int id) {&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE id_iniciativa = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                return Optional.of(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar iniciativa por ID: &quot; + e.getMessage());&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por owner&#10;     */&#10;    public List&lt;Iniciativa&gt; findByOwner(int idOwner) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro &quot; +&#10;                    &quot;FROM iniciativas WHERE id_owner = ? ORDER BY fecha_registro DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idOwner);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por propietario: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por estado&#10;     */&#10;    public List&lt;Iniciativa&gt; findByEstado(String estado) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE estado = ? ORDER BY fecha_registro DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, estado);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por estado: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por múltiples filtros&#10;     */&#10;    public List&lt;Iniciativa&gt; findByFilters(String estado, String tipo, String riesgo, Integer idOwner) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE 1=1&quot;);&#10;        List&lt;Object&gt; parameters = new ArrayList&lt;&gt;();&#10;&#10;        if (estado != null &amp;&amp; !estado.isEmpty()) {&#10;            sql.append(&quot; AND estado = ?&quot;);&#10;            parameters.add(estado);&#10;        }&#10;&#10;        if (tipo != null &amp;&amp; !tipo.isEmpty()) {&#10;            sql.append(&quot; AND tipo = ?&quot;);&#10;            parameters.add(tipo);&#10;        }&#10;&#10;        if (riesgo != null &amp;&amp; !riesgo.isEmpty()) {&#10;            sql.append(&quot; AND riesgo = ?&quot;);&#10;            parameters.add(riesgo);&#10;        }&#10;&#10;        if (idOwner != null) {&#10;            sql.append(&quot; AND id_owner = ?&quot;);&#10;            parameters.add(idOwner);&#10;        }&#10;&#10;        sql.append(&quot; ORDER BY fecha_registro DESC&quot;);&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql.toString())) {&#10;&#10;            for (int i = 0; i &lt; parameters.size(); i++) {&#10;                stmt.setObject(i + 1, parameters.get(i));&#10;            }&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por filtros: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Crea una nueva iniciativa&#10;     */&#10;    public boolean save(Iniciativa iniciativa) {&#10;        String sql = &quot;INSERT INTO iniciativas (nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;&#10;            stmt.setString(1, iniciativa.getNombre());&#10;            stmt.setString(2, iniciativa.getDescripcion());&#10;            stmt.setDate(3, iniciativa.getFechaInicio() != null ? Date.valueOf(iniciativa.getFechaInicio()) : null);&#10;            stmt.setDate(4, iniciativa.getFechaFin() != null ? Date.valueOf(iniciativa.getFechaFin()) : null);&#10;            stmt.setString(5, iniciativa.getTipo());&#10;            stmt.setString(6, iniciativa.getEstado());&#10;            stmt.setString(7, iniciativa.getRiesgo());&#10;            stmt.setInt(8, iniciativa.getIdOwner());&#10;&#10;            int rowsAffected = stmt.executeUpdate();&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                ResultSet rs = stmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    iniciativa.setIdIniciativa(rs.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al crear iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza una iniciativa existente&#10;     */&#10;    public boolean update(Iniciativa iniciativa) {&#10;        String sql = &quot;UPDATE iniciativas SET nombre = ?, descripcion = ?, fecha_inicio = ?, fecha_fin = ?, tipo = ?, estado = ?, riesgo = ?, id_owner = ? WHERE id_iniciativa = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, iniciativa.getNombre());&#10;            stmt.setString(2, iniciativa.getDescripcion());&#10;            stmt.setDate(3, iniciativa.getFechaInicio() != null ? Date.valueOf(iniciativa.getFechaInicio()) : null);&#10;            stmt.setDate(4, iniciativa.getFechaFin() != null ? Date.valueOf(iniciativa.getFechaFin()) : null);&#10;            stmt.setString(5, iniciativa.getTipo());&#10;            stmt.setString(6, iniciativa.getEstado());&#10;            stmt.setString(7, iniciativa.getRiesgo());&#10;            stmt.setInt(8, iniciativa.getIdOwner());&#10;            stmt.setInt(9, iniciativa.getIdIniciativa());&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Elimina una iniciativa&#10;     */&#10;    public boolean delete(int idIniciativa) {&#10;        String sql = &quot;DELETE FROM iniciativas WHERE id_iniciativa = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idIniciativa);&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al eliminar iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Cuenta el número de iniciativas activas (en curso)&#10;     */&#10;    public int countIniciativasActivas() {&#10;        String sql = &quot;SELECT COUNT(*) FROM iniciativas WHERE estado = 'en curso'&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            if (rs.next()) {&#10;                return rs.getInt(1);&#10;            }&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al contar iniciativas activas: &quot; + e.getMessage());&#10;        }&#10;&#10;        return 0;&#10;    }&#10;&#10;    /**&#10;     * Método auxiliar para crear un objeto Iniciativa desde ResultSet&#10;     */&#10;    private Iniciativa createIniciativaFromResultSet(ResultSet rs) throws SQLException {&#10;        Iniciativa iniciativa = new Iniciativa();&#10;        iniciativa.setIdIniciativa(rs.getInt(&quot;id_iniciativa&quot;));&#10;        iniciativa.setNombre(rs.getString(&quot;nombre&quot;));&#10;        iniciativa.setDescripcion(rs.getString(&quot;descripcion&quot;));&#10;&#10;        Date fechaInicio = rs.getDate(&quot;fecha_inicio&quot;);&#10;        if (fechaInicio != null) {&#10;            iniciativa.setFechaInicio(fechaInicio.toLocalDate());&#10;        }&#10;&#10;        Date fechaFin = rs.getDate(&quot;fecha_fin&quot;);&#10;        if (fechaFin != null) {&#10;            iniciativa.setFechaFin(fechaFin.toLocalDate());&#10;        }&#10;&#10;        iniciativa.setTipo(rs.getString(&quot;tipo&quot;));&#10;        iniciativa.setEstado(rs.getString(&quot;estado&quot;));&#10;        iniciativa.setRiesgo(rs.getString(&quot;riesgo&quot;));&#10;        iniciativa.setIdOwner(rs.getInt(&quot;id_owner&quot;));&#10;&#10;        Timestamp fechaRegistro = rs.getTimestamp(&quot;fecha_registro&quot;);&#10;        if (fechaRegistro != null) {&#10;            iniciativa.setFechaRegistro(fechaRegistro.toLocalDateTime());&#10;        }&#10;&#10;        return iniciativa;&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por nombre&#10;     */&#10;    public List&lt;Iniciativa&gt; findByName(String nombre) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro &quot; +&#10;                    &quot;FROM iniciativas WHERE nombre = ? ORDER BY fecha_registro DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, nombre);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por nombre: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por propietario y nombre específico&#10;     */&#10;    public List&lt;Iniciativa&gt; findByOwnerAndName(int idOwner, String nombre) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro &quot; +&#10;                    &quot;FROM iniciativas WHERE id_owner = ? AND nombre = ? ORDER BY fecha_registro DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idOwner);&#10;            stmt.setString(2, nombre);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por propietario y nombre: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/UsuarioRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/UsuarioRepository.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.repository;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.utils.DatabaseConfig;&#10;import com.juank.utp.finimpact.utils.PasswordUtils;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repositorio para operaciones CRUD de usuarios&#10; */&#10;public class UsuarioRepository {&#10;&#10;    /**&#10;     * Busca un usuario por email para autenticación&#10;     */&#10;    public Optional&lt;Usuario&gt; findByEmail(String email) {&#10;        String sql = &quot;SELECT id_usuario, nombre_completo, email, password, rol, estado FROM usuarios WHERE email = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, email);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Usuario usuario = new Usuario(&#10;                    rs.getInt(&quot;id_usuario&quot;),&#10;                    rs.getString(&quot;nombre_completo&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getString(&quot;password&quot;),&#10;                    rs.getString(&quot;rol&quot;),&#10;                    rs.getBoolean(&quot;estado&quot;)&#10;                );&#10;                return Optional.of(usuario);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar usuario por email: &quot; + e.getMessage());&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Autentica un usuario con email y contraseña&#10;     */&#10;    public Optional&lt;Usuario&gt; authenticate(String email, String password) {&#10;        Optional&lt;Usuario&gt; usuarioOpt = findByEmail(email);&#10;&#10;        if (usuarioOpt.isPresent()) {&#10;            Usuario usuario = usuarioOpt.get();&#10;            if (usuario.isEstado() &amp;&amp; PasswordUtils.verifyPassword(password, usuario.getPassword())) {&#10;                return usuarioOpt;&#10;            }&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Obtiene todos los usuarios&#10;     */&#10;    public List&lt;Usuario&gt; findAll() {&#10;        List&lt;Usuario&gt; usuarios = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_usuario, nombre_completo, email, password, rol, estado FROM usuarios ORDER BY nombre_completo&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Usuario usuario = new Usuario(&#10;                    rs.getInt(&quot;id_usuario&quot;),&#10;                    rs.getString(&quot;nombre_completo&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getString(&quot;password&quot;),&#10;                    rs.getString(&quot;rol&quot;),&#10;                    rs.getBoolean(&quot;estado&quot;)&#10;                );&#10;                usuarios.add(usuario);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener usuarios: &quot; + e.getMessage());&#10;        }&#10;&#10;        return usuarios;&#10;    }&#10;&#10;    /**&#10;     * Busca un usuario por ID&#10;     */&#10;    public Optional&lt;Usuario&gt; findById(int id) {&#10;        String sql = &quot;SELECT id_usuario, nombre_completo, email, password, rol, estado FROM usuarios WHERE id_usuario = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Usuario usuario = new Usuario(&#10;                    rs.getInt(&quot;id_usuario&quot;),&#10;                    rs.getString(&quot;nombre_completo&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getString(&quot;password&quot;),&#10;                    rs.getString(&quot;rol&quot;),&#10;                    rs.getBoolean(&quot;estado&quot;)&#10;                );&#10;                return Optional.of(usuario);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar usuario por ID: &quot; + e.getMessage());&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Crea un nuevo usuario&#10;     */&#10;    public boolean save(Usuario usuario) {&#10;        String sql = &quot;INSERT INTO usuarios (nombre_completo, email, password, rol, estado) VALUES (?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;&#10;            stmt.setString(1, usuario.getNombreCompleto());&#10;            stmt.setString(2, usuario.getEmail());&#10;            // Hash la contraseña solo si no está ya hasheada&#10;            String passwordToSave = usuario.getPassword();&#10;            if (!passwordToSave.startsWith(&quot;$2a$&quot;)) { // BCrypt hash starts with $2a$&#10;                passwordToSave = PasswordUtils.hashPassword(passwordToSave);&#10;            }&#10;            stmt.setString(3, passwordToSave);&#10;            stmt.setString(4, usuario.getRol());&#10;            stmt.setBoolean(5, usuario.isEstado());&#10;&#10;            int rowsAffected = stmt.executeUpdate();&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                ResultSet rs = stmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    usuario.setIdUsuario(rs.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al crear usuario: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza un usuario existente&#10;     */&#10;    public boolean update(Usuario usuario) {&#10;        // Si el usuario tiene una nueva contraseña, incluirla en la actualización&#10;        String sql;&#10;        if (usuario.getPassword() != null &amp;&amp; !usuario.getPassword().isEmpty()) {&#10;            sql = &quot;UPDATE usuarios SET nombre_completo = ?, email = ?, password = ?, rol = ?, estado = ? WHERE id_usuario = ?&quot;;&#10;        } else {&#10;            sql = &quot;UPDATE usuarios SET nombre_completo = ?, email = ?, rol = ?, estado = ? WHERE id_usuario = ?&quot;;&#10;        }&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, usuario.getNombreCompleto());&#10;            stmt.setString(2, usuario.getEmail());&#10;&#10;            if (usuario.getPassword() != null &amp;&amp; !usuario.getPassword().isEmpty()) {&#10;                // Hash la contraseña solo si no está ya hasheada&#10;                String passwordToSave = usuario.getPassword();&#10;                if (!passwordToSave.startsWith(&quot;$2a$&quot;)) { // BCrypt hash starts with $2a$&#10;                    passwordToSave = PasswordUtils.hashPassword(passwordToSave);&#10;                }&#10;                stmt.setString(3, passwordToSave);&#10;                stmt.setString(4, usuario.getRol());&#10;                stmt.setBoolean(5, usuario.isEstado());&#10;                stmt.setInt(6, usuario.getIdUsuario());&#10;            } else {&#10;                stmt.setString(3, usuario.getRol());&#10;                stmt.setBoolean(4, usuario.isEstado());&#10;                stmt.setInt(5, usuario.getIdUsuario());&#10;            }&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar usuario: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza la contraseña de un usuario&#10;     */&#10;    public boolean updatePassword(int idUsuario, String newPassword) {&#10;        String sql = &quot;UPDATE usuarios SET password = ? WHERE id_usuario = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, PasswordUtils.hashPassword(newPassword));&#10;            stmt.setInt(2, idUsuario);&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar contraseña: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Elimina un usuario (soft delete - cambiar estado a inactivo)&#10;     */&#10;    public boolean delete(int idUsuario) {&#10;        String sql = &quot;UPDATE usuarios SET estado = 0 WHERE id_usuario = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idUsuario);&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al eliminar usuario: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Obtiene usuarios activos por rol&#10;     */&#10;    public List&lt;Usuario&gt; findByRolAndEstado(String rol, boolean estado) {&#10;        List&lt;Usuario&gt; usuarios = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_usuario, nombre_completo, email, password, rol, estado FROM usuarios WHERE rol = ? AND estado = ? ORDER BY nombre_completo&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, rol);&#10;            stmt.setBoolean(2, estado);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Usuario usuario = new Usuario(&#10;                    rs.getInt(&quot;id_usuario&quot;),&#10;                    rs.getString(&quot;nombre_completo&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getString(&quot;password&quot;),&#10;                    rs.getString(&quot;rol&quot;),&#10;                    rs.getBoolean(&quot;estado&quot;)&#10;                );&#10;                usuarios.add(usuario);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar usuarios por rol y estado: &quot; + e.getMessage());&#10;        }&#10;&#10;        return usuarios;&#10;    }&#10;&#10;    /**&#10;     * Actualiza solo el estado de un usuario&#10;     */&#10;    public boolean updateEstado(int idUsuario, boolean estado) {&#10;        String sql = &quot;UPDATE usuarios SET estado = ? WHERE id_usuario = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setBoolean(1, estado);&#10;            stmt.setInt(2, idUsuario);&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar estado del usuario: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.repository;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.utils.DatabaseConfig;&#10;import com.juank.utp.finimpact.utils.PasswordUtils;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repositorio para operaciones CRUD de usuarios&#10; */&#10;public class UsuarioRepository {&#10;&#10;    /**&#10;     * Busca un usuario por email para autenticación&#10;     */&#10;    public Optional&lt;Usuario&gt; findByEmail(String email) {&#10;        String sql = &quot;SELECT id_usuario, nombre_completo, email, password, rol, estado FROM usuarios WHERE email = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, email);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Usuario usuario = new Usuario(&#10;                    rs.getInt(&quot;id_usuario&quot;),&#10;                    rs.getString(&quot;nombre_completo&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getString(&quot;password&quot;),&#10;                    rs.getString(&quot;rol&quot;),&#10;                    rs.getBoolean(&quot;estado&quot;)&#10;                );&#10;                return Optional.of(usuario);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar usuario por email: &quot; + e.getMessage());&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Autentica un usuario con email y contraseña&#10;     */&#10;    public Optional&lt;Usuario&gt; authenticate(String email, String password) {&#10;        Optional&lt;Usuario&gt; usuarioOpt = findByEmail(email);&#10;&#10;        if (usuarioOpt.isPresent()) {&#10;            Usuario usuario = usuarioOpt.get();&#10;            if (usuario.isEstado() &amp;&amp; PasswordUtils.verifyPassword(password, usuario.getPassword())) {&#10;                return usuarioOpt;&#10;            }&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Obtiene todos los usuarios activos&#10;     */&#10;    public List&lt;Usuario&gt; findAll() {&#10;        List&lt;Usuario&gt; usuarios = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_usuario, nombre_completo, email, password, rol, estado FROM usuarios WHERE estado = 1 ORDER BY nombre_completo&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Usuario usuario = new Usuario(&#10;                    rs.getInt(&quot;id_usuario&quot;),&#10;                    rs.getString(&quot;nombre_completo&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getString(&quot;password&quot;),&#10;                    rs.getString(&quot;rol&quot;),&#10;                    rs.getBoolean(&quot;estado&quot;)&#10;                );&#10;                usuarios.add(usuario);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener usuarios: &quot; + e.getMessage());&#10;        }&#10;&#10;        return usuarios;&#10;    }&#10;&#10;    /**&#10;     * Busca un usuario por ID&#10;     */&#10;    public Optional&lt;Usuario&gt; findById(int id) {&#10;        String sql = &quot;SELECT id_usuario, nombre_completo, email, password, rol, estado FROM usuarios WHERE id_usuario = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Usuario usuario = new Usuario(&#10;                    rs.getInt(&quot;id_usuario&quot;),&#10;                    rs.getString(&quot;nombre_completo&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getString(&quot;password&quot;),&#10;                    rs.getString(&quot;rol&quot;),&#10;                    rs.getBoolean(&quot;estado&quot;)&#10;                );&#10;                return Optional.of(usuario);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar usuario por ID: &quot; + e.getMessage());&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Crea un nuevo usuario&#10;     */&#10;    public boolean save(Usuario usuario) {&#10;        String sql = &quot;INSERT INTO usuarios (nombre_completo, email, password, rol, estado) VALUES (?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;&#10;            stmt.setString(1, usuario.getNombreCompleto());&#10;            stmt.setString(2, usuario.getEmail());&#10;            // Hash la contraseña solo si no está ya hasheada&#10;            String passwordToSave = usuario.getPassword();&#10;            if (!passwordToSave.startsWith(&quot;$2a$&quot;)) { // BCrypt hash starts with $2a$&#10;                passwordToSave = PasswordUtils.hashPassword(passwordToSave);&#10;            }&#10;            stmt.setString(3, passwordToSave);&#10;            stmt.setString(4, usuario.getRol());&#10;            stmt.setBoolean(5, usuario.isEstado());&#10;&#10;            int rowsAffected = stmt.executeUpdate();&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                ResultSet rs = stmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    usuario.setIdUsuario(rs.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al crear usuario: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza un usuario existente&#10;     */&#10;    public boolean update(Usuario usuario) {&#10;        // Si el usuario tiene una nueva contraseña, incluirla en la actualización&#10;        String sql;&#10;        if (usuario.getPassword() != null &amp;&amp; !usuario.getPassword().isEmpty()) {&#10;            sql = &quot;UPDATE usuarios SET nombre_completo = ?, email = ?, password = ?, rol = ?, estado = ? WHERE id_usuario = ?&quot;;&#10;        } else {&#10;            sql = &quot;UPDATE usuarios SET nombre_completo = ?, email = ?, rol = ?, estado = ? WHERE id_usuario = ?&quot;;&#10;        }&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, usuario.getNombreCompleto());&#10;            stmt.setString(2, usuario.getEmail());&#10;&#10;            if (usuario.getPassword() != null &amp;&amp; !usuario.getPassword().isEmpty()) {&#10;                // Hash la contraseña solo si no está ya hasheada&#10;                String passwordToSave = usuario.getPassword();&#10;                if (!passwordToSave.startsWith(&quot;$2a$&quot;)) { // BCrypt hash starts with $2a$&#10;                    passwordToSave = PasswordUtils.hashPassword(passwordToSave);&#10;                }&#10;                stmt.setString(3, passwordToSave);&#10;                stmt.setString(4, usuario.getRol());&#10;                stmt.setBoolean(5, usuario.isEstado());&#10;                stmt.setInt(6, usuario.getIdUsuario());&#10;            } else {&#10;                stmt.setString(3, usuario.getRol());&#10;                stmt.setBoolean(4, usuario.isEstado());&#10;                stmt.setInt(5, usuario.getIdUsuario());&#10;            }&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar usuario: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza la contraseña de un usuario&#10;     */&#10;    public boolean updatePassword(int idUsuario, String newPassword) {&#10;        String sql = &quot;UPDATE usuarios SET password = ? WHERE id_usuario = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, PasswordUtils.hashPassword(newPassword));&#10;            stmt.setInt(2, idUsuario);&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar contraseña: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Elimina un usuario (soft delete - cambiar estado a inactivo)&#10;     */&#10;    public boolean delete(int idUsuario) {&#10;        String sql = &quot;UPDATE usuarios SET estado = 0 WHERE id_usuario = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idUsuario);&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al eliminar usuario: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Obtiene usuarios activos por rol&#10;     */&#10;    public List&lt;Usuario&gt; findByRolAndEstado(String rol, boolean estado) {&#10;        List&lt;Usuario&gt; usuarios = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_usuario, nombre_completo, email, password, rol, estado FROM usuarios WHERE rol = ? AND estado = ? ORDER BY nombre_completo&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, rol);&#10;            stmt.setBoolean(2, estado);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Usuario usuario = new Usuario(&#10;                    rs.getInt(&quot;id_usuario&quot;),&#10;                    rs.getString(&quot;nombre_completo&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getString(&quot;password&quot;),&#10;                    rs.getString(&quot;rol&quot;),&#10;                    rs.getBoolean(&quot;estado&quot;)&#10;                );&#10;                usuarios.add(usuario);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar usuarios por rol y estado: &quot; + e.getMessage());&#10;        }&#10;&#10;        return usuarios;&#10;    }&#10;&#10;    /**&#10;     * Actualiza solo el estado de un usuario&#10;     */&#10;    public boolean updateEstado(int idUsuario, boolean estado) {&#10;        String sql = &quot;UPDATE usuarios SET estado = ? WHERE id_usuario = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setBoolean(1, estado);&#10;            stmt.setInt(2, idUsuario);&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar estado del usuario: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/utils/TestPasswordCreation.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/utils/TestPasswordCreation.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.utils;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;&#10;/**&#10; * Utilidad para probar la creación y eliminación de usuarios con contraseñas&#10; */&#10;public class TestPasswordCreation {&#10;&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot; Probando creación y eliminación de usuarios con contraseñas...\n&quot;);&#10;&#10;        UsuarioRepository usuarioRepository = new UsuarioRepository();&#10;        &#10;        // Crear usuarios de prueba&#10;        Usuario[] usuariosPrueba = {&#10;            new Usuario(0, &quot;Test Admin&quot;, &quot;test.admin@finimpact.com&quot;, &quot;testpass123&quot;, &quot;admin&quot;, true),&#10;            new Usuario(0, &quot;Test Analista&quot;, &quot;test.analista@finimpact.com&quot;, &quot;testpass456&quot;, &quot;analista&quot;, true),&#10;            new Usuario(0, &quot;Test Viewer&quot;, &quot;test.viewer@finimpact.com&quot;, &quot;testpass789&quot;, &quot;viewer&quot;, true)&#10;        };&#10;&#10;        System.out.println(&quot; Creando usuarios de prueba...&quot;);&#10;        for (Usuario usuario : usuariosPrueba) {&#10;            try {&#10;                boolean creado = usuarioRepository.save(usuario);&#10;                if (creado) {&#10;                    System.out.println(&quot;✅ Usuario creado: &quot; + usuario.getEmail() + &quot; (ID: &quot; + usuario.getId() + &quot;)&quot;);&#10;                    &#10;                    // Probar login inmediatamente después de crear&#10;                    if (VerificarLogin.verificarLoginUsuario(usuario.getEmail(), &#10;                            usuario.getEmail().contains(&quot;admin&quot;) ? &quot;testpass123&quot; : &#10;                            usuario.getEmail().contains(&quot;analista&quot;) ? &quot;testpass456&quot; : &quot;testpass789&quot;)) {&#10;                        System.out.println(&quot;   ✅ Login verificado correctamente&quot;);&#10;                    } else {&#10;                        System.out.println(&quot;   ❌ Error en login después de crear&quot;);&#10;                    }&#10;                } else {&#10;                    System.out.println(&quot;❌ Error al crear usuario: &quot; + usuario.getEmail());&#10;                }&#10;            } catch (Exception e) {&#10;                System.out.println(&quot;❌ Excepción al crear usuario &quot; + usuario.getEmail() + &quot;: &quot; + e.getMessage());&#10;            }&#10;            System.out.println();&#10;        }&#10;&#10;        // Esperar un momento&#10;        try {&#10;            Thread.sleep(2000);&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;&#10;        System.out.println(&quot;️ Eliminando usuarios de prueba...&quot;);&#10;        for (Usuario usuario : usuariosPrueba) {&#10;            try {&#10;                // Buscar el usuario por email para obtener su ID&#10;                var usuarioEncontrado = usuarioRepository.findByEmail(usuario.getEmail());&#10;                if (usuarioEncontrado.isPresent()) {&#10;                    boolean eliminado = usuarioRepository.delete(usuarioEncontrado.get().getId());&#10;                    if (eliminado) {&#10;                        System.out.println(&quot;✅ Usuario eliminado: &quot; + usuario.getEmail());&#10;                    } else {&#10;                        System.out.println(&quot;❌ Error al eliminar usuario: &quot; + usuario.getEmail());&#10;                    }&#10;                } else {&#10;                    System.out.println(&quot;⚠️ Usuario no encontrado para eliminar: &quot; + usuario.getEmail());&#10;                }&#10;            } catch (Exception e) {&#10;                System.out.println(&quot;❌ Excepción al eliminar usuario &quot; + usuario.getEmail() + &quot;: &quot; + e.getMessage());&#10;            }&#10;        }&#10;&#10;        System.out.println(&quot;\n Test de creación de contraseñas completado.&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/main-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/main-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;BorderPane xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.MainController&quot;&gt;&#10;   &lt;top&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #2E3440;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;FinImpact&quot; textFill=&quot;WHITE&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;!-- Vista cuando NO está autenticado --&gt;&#10;            &lt;VBox fx:id=&quot;loginView&quot; alignment=&quot;CENTER_RIGHT&quot; spacing=&quot;10.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Button fx:id=&quot;btnLogin&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleLogin&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;130.0&quot;&#10;                          style=&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Iniciar Sesión&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;14.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Button&gt;&#10;               &lt;/children&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- Vista cuando SÍ está autenticado --&gt;&#10;            &lt;VBox fx:id=&quot;userView&quot; alignment=&quot;CENTER_RIGHT&quot; spacing=&quot;10.0&quot; visible=&quot;false&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;HBox alignment=&quot;CENTER_RIGHT&quot; spacing=&quot;10.0&quot;&gt;&#10;                     &lt;children&gt;&#10;                        &lt;Label fx:id=&quot;lblUsername&quot; text=&quot;&quot; textFill=&quot;WHITE&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &lt;Label fx:id=&quot;lblUsername&quot; text=&quot;&quot; textFill=&quot;WHITE&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &lt;Label fx:id=&quot;lblUsername&quot; text=&quot;&quot; textFill=&quot;WHITE&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &lt;Label fx:id=&quot;lblUsername&quot; text=&quot;&quot; textFill=&quot;WHITE&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &lt;Button fx:id=&quot;btnUserAction&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleUserAction&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;150.0&quot;&#10;                                style=&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Mi Perfil&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;Button fx:id=&quot;btnLogout&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleLogout&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;130.0&quot;&#10;                                style=&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Cerrar Sesión&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Button&gt;&#10;                     &lt;/children&gt;&#10;                  &lt;/HBox&gt;&#10;               &lt;/children&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/VBox&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/top&gt;&#10;   &lt;center&gt;&#10;      &lt;StackPane prefHeight=&quot;400.0&quot; prefWidth=&quot;600.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;!-- Vista de bienvenida para usuarios no logueados --&gt;&#10;            &lt;VBox fx:id=&quot;welcomeView&quot; alignment=&quot;CENTER&quot; spacing=&quot;20.0&quot; style=&quot;-fx-background-color: #ECEFF4;&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label text=&quot;Bienvenido a FinImpact&quot; textAlignment=&quot;CENTER&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;                        &lt;fx:include source=&quot;iniciativa-view.fxml&quot; /&gt;&#10;                  &lt;/Label&gt;&#10;                  &lt;Label text=&quot;Sistema de Seguimiento de Iniciativas e Impactos Financieros&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#4C566A&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;16.0&quot; /&gt;&#10;                        &lt;fx:include source=&quot;impacto-view.fxml&quot; /&gt;&#10;                  &lt;/Label&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;&#10;                        &lt;fx:include source=&quot;iniciativa-view.fxml&quot; /&gt;&#10;            &lt;TabPane fx:id=&quot;mainTabPane&quot; visible=&quot;false&quot; style=&quot;-fx-background-color: #ECEFF4;&quot; tabClosingPolicy=&quot;UNAVAILABLE&quot;&gt;&#10;               &lt;tabs&gt;&#10;                  &lt;Tab text=&quot;Dashboard&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include source=&quot;impacto-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;                  &lt;Tab text=&quot;Iniciativas&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include source=&quot;iniciativa-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;                  &lt;Tab text=&quot;Impactos&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include source=&quot;impacto-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;               &lt;/tabs&gt;&#10;            &lt;/TabPane&gt;&#10;         &lt;/children&gt;&#10;      &lt;/StackPane&gt;&#10;   &lt;/center&gt;&#10;   &lt;bottom&gt;&#10;      &lt;HBox alignment=&quot;CENTER&quot; prefHeight=&quot;40.0&quot; style=&quot;-fx-background-color: #D8DEE9;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label fx:id=&quot;lblStatus&quot; text=&quot;No hay usuario autenticado&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/bottom&gt;&#10;&lt;/BorderPane&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;BorderPane xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.MainController&quot;&gt;&#10;   &lt;top&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #2E3440;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;FinImpact&quot; textFill=&quot;WHITE&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;!-- Vista cuando NO está autenticado --&gt;&#10;            &lt;VBox fx:id=&quot;loginView&quot; alignment=&quot;CENTER_RIGHT&quot; spacing=&quot;10.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Button fx:id=&quot;btnLogin&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleLogin&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;130.0&quot;&#10;                          style=&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Iniciar Sesión&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;14.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Button&gt;&#10;               &lt;/children&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- Vista cuando SÍ está autenticado --&gt;&#10;            &lt;VBox fx:id=&quot;userView&quot; alignment=&quot;CENTER_RIGHT&quot; spacing=&quot;10.0&quot; visible=&quot;false&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;HBox alignment=&quot;CENTER_RIGHT&quot; spacing=&quot;10.0&quot;&gt;&#10;                     &lt;children&gt;&#10;                        &lt;Button fx:id=&quot;btnUserAction&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleUserAction&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;150.0&quot;&#10;                                style=&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Mi Perfil&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;Button fx:id=&quot;btnLogout&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleLogout&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;130.0&quot;&#10;                                style=&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Cerrar Sesión&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Button&gt;&#10;                     &lt;/children&gt;&#10;                  &lt;/HBox&gt;&#10;               &lt;/children&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/VBox&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/top&gt;&#10;   &lt;center&gt;&#10;      &lt;StackPane prefHeight=&quot;400.0&quot; prefWidth=&quot;600.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;!-- Vista de bienvenida para usuarios no logueados --&gt;&#10;            &lt;VBox fx:id=&quot;welcomeView&quot; alignment=&quot;CENTER&quot; spacing=&quot;20.0&quot; style=&quot;-fx-background-color: #ECEFF4;&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label text=&quot;Bienvenido a FinImpact&quot; textAlignment=&quot;CENTER&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;                  &lt;Label text=&quot;Sistema de Seguimiento de Iniciativas e Impactos Financieros&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#4C566A&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;16.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- TabPane para usuarios logueados --&gt;&#10;            &lt;TabPane fx:id=&quot;mainTabPane&quot; visible=&quot;false&quot; style=&quot;-fx-background-color: #ECEFF4;&quot; tabClosingPolicy=&quot;UNAVAILABLE&quot;&gt;&#10;               &lt;tabs&gt;&#10;                  &lt;Tab text=&quot;Dashboard&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include fx:id=&quot;dashboardInclude&quot; source=&quot;dashboard-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;                  &lt;Tab text=&quot;Iniciativas&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include fx:id=&quot;iniciativaInclude&quot; source=&quot;iniciativa-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;                  &lt;Tab text=&quot;Impactos&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include fx:id=&quot;impactoInclude&quot; source=&quot;impacto-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;               &lt;/tabs&gt;&#10;            &lt;/TabPane&gt;&#10;         &lt;/children&gt;&#10;      &lt;/StackPane&gt;&#10;   &lt;/center&gt;&#10;   &lt;bottom&gt;&#10;      &lt;HBox alignment=&quot;CENTER&quot; prefHeight=&quot;40.0&quot; style=&quot;-fx-background-color: #D8DEE9;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label fx:id=&quot;lblStatus&quot; text=&quot;No hay usuario autenticado&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/bottom&gt;&#10;&lt;/BorderPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/usuarios-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/usuarios-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.collections.FXCollections?&gt;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&lt;?import java.lang.String?&gt;&#10;&#10;&lt;VBox xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.UsuarioController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #FFFFFF; -fx-border-color: #D8DEE9; -fx-border-width: 0 0 1 0;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Gestión de Usuarios&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnNuevoUsuario&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#mostrarFormularioUsuario&quot;&#10;                    style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot;&#10;                    text=&quot;+ Nuevo Usuario&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Filtros --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;15.0&quot; style=&quot;-fx-background-color: #ECEFF4; -fx-padding: 15;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Filtros:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbTipo&quot; promptText=&quot;Tipo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;admin&quot; /&gt;&#10;                     &lt;String fx:value=&quot;analista&quot; /&gt;&#10;                     &lt;String fx:value=&quot;viewer&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;TextField fx:id=&quot;txtFiltroNombre&quot; promptText=&quot;Buscar por nombre...&quot; prefWidth=&quot;200.0&quot; /&gt;&#10;&#10;            &lt;Button fx:id=&quot;btnLimpiarFiltros&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#limpiarFiltros&quot;&#10;                    style=&quot;-fx-background-color: #D08770; -fx-text-fill: white; -fx-background-radius: 3;&quot;&#10;                    text=&quot;Limpiar Filtros&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Tabla --&gt;&#10;      &lt;TableView fx:id=&quot;tableUsuarios&quot; VBox.vgrow=&quot;ALWAYS&quot;&gt;&#10;         &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;colId&quot; minWidth=&quot;50.0&quot; prefWidth=&quot;80.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colNombreCompleto&quot; minWidth=&quot;200.0&quot; prefWidth=&quot;250.0&quot; text=&quot;Nombre Completo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colUsuario&quot; minWidth=&quot;150.0&quot; prefWidth=&quot;180.0&quot; text=&quot;Usuario&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colEmail&quot; minWidth=&quot;200.0&quot; prefWidth=&quot;250.0&quot; text=&quot;Email&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colTipo&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Tipo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colAcciones&quot; minWidth=&quot;150.0&quot; prefWidth=&quot;200.0&quot; text=&quot;Acciones&quot; /&gt;&#10;         &lt;/columns&gt;&#10;         &lt;VBox.margin&gt;&#10;            &lt;Insets bottom=&quot;20.0&quot; left=&quot;20.0&quot; right=&quot;20.0&quot; top=&quot;10.0&quot; /&gt;&#10;         &lt;/VBox.margin&gt;&#10;      &lt;/TableView&gt;&#10;   &lt;/children&gt;&#10;&lt;/VBox&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.collections.FXCollections?&gt;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&lt;?import java.lang.String?&gt;&#10;&#10;&lt;VBox xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.UsuarioController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #FFFFFF; -fx-border-color: #D8DEE9; -fx-border-width: 0 0 1 0;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Gestión de Usuarios&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnNuevoUsuario&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#mostrarFormularioUsuario&quot;&#10;                    style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot;&#10;                    text=&quot;+ Nuevo Usuario&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Filtros --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;15.0&quot; style=&quot;-fx-background-color: #ECEFF4; -fx-padding: 15;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Filtros:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbTipo&quot; promptText=&quot;Tipo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;admin&quot; /&gt;&#10;                     &lt;String fx:value=&quot;analista&quot; /&gt;&#10;                     &lt;String fx:value=&quot;viewer&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;TextField fx:id=&quot;txtFiltroNombre&quot; promptText=&quot;Buscar por nombre...&quot; prefWidth=&quot;200.0&quot; /&gt;&#10;&#10;            &lt;Button fx:id=&quot;btnLimpiarFiltros&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#limpiarFiltros&quot;&#10;                    style=&quot;-fx-background-color: #D08770; -fx-text-fill: white; -fx-background-radius: 3;&quot;&#10;                    text=&quot;Limpiar Filtros&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Tabla --&gt;&#10;      &lt;TableView fx:id=&quot;tableUsuarios&quot; VBox.vgrow=&quot;ALWAYS&quot;&gt;&#10;         &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;colId&quot; minWidth=&quot;50.0&quot; prefWidth=&quot;80.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colNombreCompleto&quot; minWidth=&quot;200.0&quot; prefWidth=&quot;250.0&quot; text=&quot;Nombre Completo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colUsuario&quot; minWidth=&quot;150.0&quot; prefWidth=&quot;180.0&quot; text=&quot;Usuario&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colEmail&quot; minWidth=&quot;200.0&quot; prefWidth=&quot;250.0&quot; text=&quot;Email&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colTipo&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Tipo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colEstado&quot; minWidth=&quot;80.0&quot; prefWidth=&quot;100.0&quot; text=&quot;Estado&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colAcciones&quot; minWidth=&quot;200.0&quot; prefWidth=&quot;280.0&quot; text=&quot;Acciones&quot; /&gt;&#10;         &lt;/columns&gt;&#10;         &lt;VBox.margin&gt;&#10;            &lt;Insets bottom=&quot;20.0&quot; left=&quot;20.0&quot; right=&quot;20.0&quot; top=&quot;10.0&quot; /&gt;&#10;         &lt;/VBox.margin&gt;&#10;      &lt;/TableView&gt;&#10;   &lt;/children&gt;&#10;&lt;/VBox&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>