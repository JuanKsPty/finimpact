<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/DashboardController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/DashboardController.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.repository.ImpactoRepository;&#10;import com.juank.utp.finimpact.repository.IniciativaRepository;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.chart.*;&#10;import javafx.scene.control.Label;&#10;&#10;import java.math.BigDecimal;&#10;import java.text.NumberFormat;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Locale;&#10;import java.util.Map;&#10;&#10;/**&#10; * Controlador para la vista del Dashboard&#10; */&#10;public class DashboardController {&#10;&#10;    // Gráficos&#10;    @FXML private PieChart pieChartDistribucion;&#10;    @FXML private BarChart&lt;String, Number&gt; barChartComparacion;&#10;    @FXML private CategoryAxis xAxisMeses;&#10;    @FXML private NumberAxis yAxisValores;&#10;&#10;    // Labels de KPIs&#10;    @FXML private Label lblIniciativasActivas;&#10;    @FXML private Label lblImpactosPlaneados;&#10;    @FXML private Label lblImpactosReales;&#10;    @FXML private Label lblDiferencia;&#10;&#10;    // Repositorios&#10;    private IniciativaRepository iniciativaRepository;&#10;    private ImpactoRepository impactoRepository;&#10;&#10;    // Formateo de números&#10;    private final NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale(&quot;es&quot;, &quot;CO&quot;));&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        System.out.println(&quot; Dashboard inicializando...&quot;);&#10;&#10;        // Inicializar repositorios&#10;        iniciativaRepository = new IniciativaRepository();&#10;        impactoRepository = new ImpactoRepository();&#10;&#10;        // Configurar gráficos&#10;        configurarGraficos();&#10;&#10;        // Cargar datos&#10;        cargarDatos();&#10;&#10;        System.out.println(&quot;✅ Dashboard inicializado exitosamente&quot;);&#10;    }&#10;&#10;    /**&#10;     * Configura la apariencia inicial de los gráficos&#10;     */&#10;    private void configurarGraficos() {&#10;        // Configurar gráfico de pastel&#10;        pieChartDistribucion.setLegendVisible(true);&#10;        pieChartDistribucion.setLabelsVisible(true);&#10;&#10;        // Configurar gráfico de barras&#10;        barChartComparacion.setLegendVisible(true);&#10;        barChartComparacion.setAnimated(true);&#10;        xAxisMeses.setLabel(&quot;Meses&quot;);&#10;        yAxisValores.setLabel(&quot;Valor (COP)&quot;);&#10;    }&#10;&#10;    /**&#10;     * Carga todos los datos del dashboard&#10;     */&#10;    private void cargarDatos() {&#10;        cargarKPIs();&#10;        cargarGraficoDistribucion();&#10;        cargarGraficoComparacion();&#10;    }&#10;&#10;    /**&#10;     * Carga los indicadores clave (KPIs)&#10;     */&#10;    private void cargarKPIs() {&#10;        try {&#10;            // KPI 1: Iniciativas Activas&#10;            int iniciativasActivas = iniciativaRepository.countIniciativasActivas();&#10;            lblIniciativasActivas.setText(String.valueOf(iniciativasActivas));&#10;&#10;            // KPI 2: Impactos Planeados del Mes&#10;            BigDecimal planeados = impactoRepository.getSumaImpactosPlaneadosMesActual();&#10;            lblImpactosPlaneados.setText(currencyFormat.format(planeados));&#10;&#10;            // KPI 3: Impactos Reales del Mes&#10;            BigDecimal reales = impactoRepository.getSumaImpactosRealesMesActual();&#10;            lblImpactosReales.setText(currencyFormat.format(reales));&#10;&#10;            // KPI 4: Diferencia (Real - Planeado)&#10;            BigDecimal diferencia = reales.subtract(planeados);&#10;            lblDiferencia.setText(currencyFormat.format(diferencia));&#10;&#10;            // Cambiar color de la diferencia según si es positiva o negativa&#10;            if (diferencia.compareTo(BigDecimal.ZERO) &gt;= 0) {&#10;                lblDiferencia.setStyle(&quot;-fx-text-fill: #A3BE8C; -fx-font-weight: bold; -fx-font-size: 20px;&quot;); // Verde para positivo&#10;            } else {&#10;                lblDiferencia.setStyle(&quot;-fx-text-fill: #BF616A; -fx-font-weight: bold; -fx-font-size: 20px;&quot;); // Rojo para negativo&#10;            }&#10;&#10;            System.out.println(&quot; KPIs cargados - Iniciativas: &quot; + iniciativasActivas +&#10;                             &quot;, Planeados: &quot; + planeados + &quot;, Reales: &quot; + reales);&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al cargar KPIs: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Carga el gráfico de distribución por tipo (pie chart)&#10;     */&#10;    private void cargarGraficoDistribucion() {&#10;        try {&#10;            List&lt;Object[]&gt; distribucion = impactoRepository.getDistribucionPorTipo();&#10;            ObservableList&lt;PieChart.Data&gt; pieChartData = FXCollections.observableArrayList();&#10;&#10;            if (distribucion.isEmpty()) {&#10;                pieChartData.add(new PieChart.Data(&quot;Sin datos&quot;, 1));&#10;            } else {&#10;                for (Object[] fila : distribucion) {&#10;                    String tipo = (String) fila[0];&#10;                    BigDecimal total = (BigDecimal) fila[1];&#10;&#10;                    if (total.compareTo(BigDecimal.ZERO) != 0) {&#10;                        pieChartData.add(new PieChart.Data(tipo, total.abs().doubleValue()));&#10;                    }&#10;                }&#10;            }&#10;&#10;            pieChartDistribucion.setData(pieChartData);&#10;&#10;            System.out.println(&quot; Gráfico de distribución cargado con &quot; + pieChartData.size() + &quot; elementos&quot;);&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al cargar gráfico de distribución: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Carga el gráfico de comparación planeado vs real (bar chart)&#10;     */&#10;    private void cargarGraficoComparacion() {&#10;        try {&#10;            List&lt;Object[]&gt; comparacion = impactoRepository.getComparacionPlaneadoVsReal();&#10;&#10;            // Series para planeado y real&#10;            XYChart.Series&lt;String, Number&gt; seriesPlaneado = new XYChart.Series&lt;&gt;();&#10;            seriesPlaneado.setName(&quot;Planeado&quot;);&#10;&#10;            XYChart.Series&lt;String, Number&gt; seriesReal = new XYChart.Series&lt;&gt;();&#10;            seriesReal.setName(&quot;Real&quot;);&#10;&#10;            // Mapas para organizar los datos por mes&#10;            Map&lt;String, BigDecimal&gt; planeadoPorMes = new HashMap&lt;&gt;();&#10;            Map&lt;String, BigDecimal&gt; realPorMes = new HashMap&lt;&gt;();&#10;&#10;            // Procesar datos de la consulta&#10;            for (Object[] fila : comparacion) {&#10;                int año = (Integer) fila[0];&#10;                int mes = (Integer) fila[1];&#10;                String atributo = (String) fila[2];&#10;                BigDecimal total = (BigDecimal) fila[3];&#10;&#10;                String mesClave = año + &quot;-&quot; + String.format(&quot;%02d&quot;, mes);&#10;                String mesDisplay = getNombreMes(mes) + &quot; &quot; + año;&#10;&#10;                if (&quot;Planeado&quot;.equals(atributo)) {&#10;                    planeadoPorMes.put(mesClave, total);&#10;                    planeadoPorMes.put(mesDisplay, total); // Para display&#10;                } else if (&quot;Real&quot;.equals(atributo)) {&#10;                    realPorMes.put(mesClave, total);&#10;                    realPorMes.put(mesDisplay, total); // Para display&#10;                }&#10;            }&#10;&#10;            // Si no hay datos, mostrar valores en cero para el mes actual&#10;            if (comparacion.isEmpty()) {&#10;                String mesActual = &quot;Jul 2025&quot;; // Mes actual según el contexto&#10;                seriesPlaneado.getData().add(new XYChart.Data&lt;&gt;(mesActual, 0));&#10;                seriesReal.getData().add(new XYChart.Data&lt;&gt;(mesActual, 0));&#10;            } else {&#10;                // Agregar datos a las series&#10;                for (Object[] fila : comparacion) {&#10;                    int año = (Integer) fila[0];&#10;                    int mes = (Integer) fila[1];&#10;                    String atributo = (String) fila[2];&#10;                    BigDecimal total = (BigDecimal) fila[3];&#10;&#10;                    String mesDisplay = getNombreMes(mes) + &quot; &quot; + año;&#10;&#10;                    if (&quot;Planeado&quot;.equals(atributo)) {&#10;                        seriesPlaneado.getData().add(new XYChart.Data&lt;&gt;(mesDisplay, total.doubleValue()));&#10;                    } else if (&quot;Real&quot;.equals(atributo)) {&#10;                        seriesReal.getData().add(new XYChart.Data&lt;&gt;(mesDisplay, total.doubleValue()));&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Limpiar datos anteriores y agregar nuevas series&#10;            barChartComparacion.getData().clear();&#10;            barChartComparacion.getData().addAll(seriesPlaneado, seriesReal);&#10;&#10;            System.out.println(&quot; Gráfico de comparación cargado con &quot; +&#10;                             seriesPlaneado.getData().size() + &quot; datos planeados y &quot; +&#10;                             seriesReal.getData().size() + &quot; datos reales&quot;);&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error al cargar gráfico de comparación: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Convierte número de mes a nombre&#10;     */&#10;    private String getNombreMes(int mes) {&#10;        String[] meses = {&quot;&quot;, &quot;Ene&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Abr&quot;, &quot;May&quot;, &quot;Jun&quot;,&#10;                         &quot;Jul&quot;, &quot;Ago&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dic&quot;};&#10;        return mes &gt;= 1 &amp;&amp; mes &lt;= 12 ? meses[mes] : &quot;Mes &quot; + mes;&#10;    }&#10;&#10;    /**&#10;     * Refresca todos los datos del dashboard&#10;     */&#10;    public void refrescarDatos() {&#10;        System.out.println(&quot; Refrescando datos del dashboard...&quot;);&#10;        cargarDatos();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Impacto;&#10;import com.juank.utp.finimpact.model.Iniciativa;&#10;import com.juank.utp.finimpact.repository.ImpactoRepository;&#10;import com.juank.utp.finimpact.repository.IniciativaRepository;&#10;import javafx.collections.FXCollections;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.scene.chart.*;&#10;import javafx.scene.control.Label;&#10;&#10;import java.math.BigDecimal;&#10;import java.net.URL;&#10;import java.text.NumberFormat;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.*;&#10;import java.util.stream.Collectors;&#10;&#10;public class DashboardController implements Initializable {&#10;&#10;    @FXML private PieChart chartIniciativasPorEstado;&#10;    @FXML private BarChart&lt;String, Number&gt; chartImpactosPorTipo;&#10;    @FXML private LineChart&lt;String, Number&gt; chartImpactoMensual;&#10;    @FXML private PieChart chartIniciativasPorRiesgo;&#10;&#10;    @FXML private Label lblTotalIniciativas;&#10;    @FXML private Label lblIniciativasActivas;&#10;    @FXML private Label lblImpactoTotal;&#10;    @FXML private Label lblImpactoPromedio;&#10;    @FXML private Label lblRiesgoAlto;&#10;    @FXML private Label lblIniciativasFinalizadas;&#10;    @FXML private Label lblROI;&#10;    @FXML private Label lblEficiencia;&#10;&#10;    private IniciativaRepository iniciativaRepository;&#10;    private ImpactoRepository impactoRepository;&#10;    private NumberFormat currencyFormat;&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        iniciativaRepository = new IniciativaRepository();&#10;        impactoRepository = new ImpactoRepository();&#10;        currencyFormat = NumberFormat.getCurrencyInstance(new Locale(&quot;es&quot;, &quot;CO&quot;));&#10;        &#10;        cargarDatos();&#10;    }&#10;&#10;    @FXML&#10;    private void actualizarDashboard() {&#10;        cargarDatos();&#10;    }&#10;&#10;    private void cargarDatos() {&#10;        try {&#10;            List&lt;Iniciativa&gt; iniciativas = iniciativaRepository.obtenerTodas();&#10;            List&lt;Impacto&gt; impactos = impactoRepository.obtenerTodos();&#10;&#10;            cargarChartIniciativasPorEstado(iniciativas);&#10;            cargarChartImpactosPorTipo(impactos);&#10;            cargarChartImpactoMensual(impactos);&#10;            cargarChartIniciativasPorRiesgo(iniciativas);&#10;            cargarKPIs(iniciativas, impactos);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void cargarChartIniciativasPorEstado(List&lt;Iniciativa&gt; iniciativas) {&#10;        Map&lt;String, Long&gt; estadoCount = iniciativas.stream()&#10;                .collect(Collectors.groupingBy(Iniciativa::getEstado, Collectors.counting()));&#10;&#10;        chartIniciativasPorEstado.setData(FXCollections.observableArrayList(&#10;                estadoCount.entrySet().stream()&#10;                        .map(entry -&gt; new PieChart.Data(entry.getKey(), entry.getValue()))&#10;                        .collect(Collectors.toList())&#10;        ));&#10;    }&#10;&#10;    private void cargarChartImpactosPorTipo(List&lt;Impacto&gt; impactos) {&#10;        Map&lt;String, BigDecimal&gt; tipoSum = impactos.stream()&#10;                .collect(Collectors.groupingBy(&#10;                        Impacto::getTipoImpacto,&#10;                        Collectors.reducing(BigDecimal.ZERO, &#10;                                impacto -&gt; impacto.getImpacto().multiply(BigDecimal.valueOf(impacto.getMultiplicador())),&#10;                                BigDecimal::add)&#10;                ));&#10;&#10;        XYChart.Series&lt;String, Number&gt; series = new XYChart.Series&lt;&gt;();&#10;        series.setName(&quot;Impacto por Tipo&quot;);&#10;&#10;        tipoSum.forEach((tipo, suma) -&gt; &#10;                series.getData().add(new XYChart.Data&lt;&gt;(tipo, suma.doubleValue()))&#10;        );&#10;&#10;        chartImpactosPorTipo.setData(FXCollections.observableArrayList(series));&#10;    }&#10;&#10;    private void cargarChartImpactoMensual(List&lt;Impacto&gt; impactos) {&#10;        Map&lt;String, BigDecimal&gt; impactoMensual = impactos.stream()&#10;                .collect(Collectors.groupingBy(&#10;                        impacto -&gt; impacto.getFechaImpacto().format(DateTimeFormatter.ofPattern(&quot;yyyy-MM&quot;)),&#10;                        Collectors.reducing(BigDecimal.ZERO,&#10;                                impacto -&gt; impacto.getImpacto().multiply(BigDecimal.valueOf(impacto.getMultiplicador())),&#10;                                BigDecimal::add)&#10;                ));&#10;&#10;        XYChart.Series&lt;String, Number&gt; series = new XYChart.Series&lt;&gt;();&#10;        series.setName(&quot;Impacto Mensual&quot;);&#10;&#10;        // Ordenar por fecha&#10;        impactoMensual.entrySet().stream()&#10;                .sorted(Map.Entry.comparingByKey())&#10;                .forEach(entry -&gt; &#10;                        series.getData().add(new XYChart.Data&lt;&gt;(entry.getKey(), entry.getValue().doubleValue()))&#10;                );&#10;&#10;        chartImpactoMensual.setData(FXCollections.observableArrayList(series));&#10;    }&#10;&#10;    private void cargarChartIniciativasPorRiesgo(List&lt;Iniciativa&gt; iniciativas) {&#10;        Map&lt;String, Long&gt; riesgoCount = iniciativas.stream()&#10;                .collect(Collectors.groupingBy(Iniciativa::getRiesgo, Collectors.counting()));&#10;&#10;        chartIniciativasPorRiesgo.setData(FXCollections.observableArrayList(&#10;                riesgoCount.entrySet().stream()&#10;                        .map(entry -&gt; new PieChart.Data(entry.getKey(), entry.getValue()))&#10;                        .collect(Collectors.toList())&#10;        ));&#10;    }&#10;&#10;    private void cargarKPIs(List&lt;Iniciativa&gt; iniciativas, List&lt;Impacto&gt; impactos) {&#10;        // Total Iniciativas&#10;        lblTotalIniciativas.setText(String.valueOf(iniciativas.size()));&#10;&#10;        // Iniciativas Activas (en curso)&#10;        long activas = iniciativas.stream()&#10;                .filter(i -&gt; &quot;en curso&quot;.equalsIgnoreCase(i.getEstado()))&#10;                .count();&#10;        lblIniciativasActivas.setText(String.valueOf(activas));&#10;&#10;        // Iniciativas Finalizadas&#10;        long finalizadas = iniciativas.stream()&#10;                .filter(i -&gt; &quot;finalizado&quot;.equalsIgnoreCase(i.getEstado()))&#10;                .count();&#10;        lblIniciativasFinalizadas.setText(String.valueOf(finalizadas));&#10;&#10;        // Riesgo Alto&#10;        long riesgoAlto = iniciativas.stream()&#10;                .filter(i -&gt; &quot;alto&quot;.equalsIgnoreCase(i.getRiesgo()))&#10;                .count();&#10;        lblRiesgoAlto.setText(String.valueOf(riesgoAlto));&#10;&#10;        // Impacto Total&#10;        BigDecimal impactoTotal = impactos.stream()&#10;                .map(i -&gt; i.getImpacto().multiply(BigDecimal.valueOf(i.getMultiplicador())))&#10;                .reduce(BigDecimal.ZERO, BigDecimal::add);&#10;        lblImpactoTotal.setText(currencyFormat.format(impactoTotal));&#10;&#10;        // Impacto Promedio&#10;        if (!impactos.isEmpty()) {&#10;            BigDecimal impactoPromedio = impactoTotal.divide(BigDecimal.valueOf(impactos.size()), 2, BigDecimal.ROUND_HALF_UP);&#10;            lblImpactoPromedio.setText(currencyFormat.format(impactoPromedio));&#10;        } else {&#10;            lblImpactoPromedio.setText(&quot;$0&quot;);&#10;        }&#10;&#10;        // ROI Proyectado (calculado como porcentaje de impactos positivos vs negativos)&#10;        long positivos = impactos.stream()&#10;                .filter(i -&gt; i.getMultiplicador() &gt; 0)&#10;                .count();&#10;        double roi = impactos.isEmpty() ? 0 : (positivos * 100.0) / impactos.size();&#10;        lblROI.setText(String.format(&quot;%.1f%%&quot;, roi));&#10;&#10;        // Eficiencia (porcentaje de iniciativas finalizadas)&#10;        double eficiencia = iniciativas.isEmpty() ? 0 : (finalizadas * 100.0) / iniciativas.size();&#10;        lblEficiencia.setText(String.format(&quot;%.1f%%&quot;, eficiencia));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/IniciativaController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/IniciativaController.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Iniciativa;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.IniciativaRepository;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.geometry.Insets;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.scene.layout.GridPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.stage.Modality;&#10;import javafx.stage.Stage;&#10;&#10;import java.net.URL;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.ResourceBundle;&#10;&#10;/**&#10; * Controlador para la gestión de iniciativas&#10; */&#10;public class IniciativaController implements Initializable {&#10;&#10;    // Componentes de la vista&#10;    @FXML private ComboBox&lt;String&gt; cbEstado;&#10;    @FXML private ComboBox&lt;String&gt; cbRiesgo;&#10;    @FXML private TextField txtFiltroNombre;&#10;    @FXML private TableView&lt;Iniciativa&gt; tableIniciativas;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colId;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colNombre;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colDescripcion;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colTipo;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colEstado;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colRiesgo;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colFechaInicio;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colFechaFin;&#10;    @FXML private TableColumn&lt;Iniciativa, Void&gt; colAcciones;&#10;&#10;    // Repositorios&#10;    private IniciativaRepository iniciativaRepository;&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    // Lista de datos&#10;    private final ObservableList&lt;Iniciativa&gt; iniciativasList = FXCollections.observableArrayList();&#10;    private final ObservableList&lt;Iniciativa&gt; iniciativasFiltradasList = FXCollections.observableArrayList();&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        iniciativaRepository = new IniciativaRepository();&#10;        usuarioRepository = new UsuarioRepository();&#10;&#10;        configurarTabla();&#10;        cargarIniciativas();&#10;        configurarFiltros();&#10;        configurarFiltrosAutomaticos();&#10;    }&#10;&#10;    private void configurarTabla() {&#10;        // Configurar columnas&#10;        colId.setCellValueFactory(cellData -&gt; new SimpleStringProperty(String.valueOf(cellData.getValue().getIdIniciativa())));&#10;        colNombre.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNombre()));&#10;        colDescripcion.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getDescripcion()));&#10;        colTipo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getTipo()));&#10;        colEstado.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEstado()));&#10;        colRiesgo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getRiesgo()));&#10;&#10;        colFechaInicio.setCellValueFactory(cellData -&gt; {&#10;            LocalDate fecha = cellData.getValue().getFechaInicio();&#10;            return new SimpleStringProperty(fecha != null ? fecha.format(DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;)) : &quot;&quot;);&#10;        });&#10;&#10;        colFechaFin.setCellValueFactory(cellData -&gt; {&#10;            LocalDate fecha = cellData.getValue().getFechaFin();&#10;            return new SimpleStringProperty(fecha != null ? fecha.format(DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;)) : &quot;&quot;);&#10;        });&#10;&#10;        // Configurar columna de acciones&#10;        colAcciones.setCellFactory(param -&gt; new TableCell&lt;&gt;() {&#10;            private final Button btnEditar = new Button(&quot;Editar&quot;);&#10;            private final Button btnEliminar = new Button(&quot;Eliminar&quot;);&#10;            private final HBox pane = new HBox(8);&#10;&#10;            {&#10;                // Hacer los botones más grandes&#10;                btnEditar.setPrefWidth(80);&#10;                btnEditar.setPrefHeight(35);&#10;                btnEliminar.setPrefWidth(80);&#10;                btnEliminar.setPrefHeight(35);&#10;&#10;                btnEditar.setStyle(&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;                btnEliminar.setStyle(&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;&#10;                pane.getChildren().addAll(btnEditar, btnEliminar);&#10;                pane.setAlignment(javafx.geometry.Pos.CENTER);&#10;&#10;                btnEditar.setOnAction(event -&gt; {&#10;                    Iniciativa iniciativa = getTableView().getItems().get(getIndex());&#10;                    editarIniciativa(iniciativa);&#10;                });&#10;&#10;                btnEliminar.setOnAction(event -&gt; {&#10;                    Iniciativa iniciativa = getTableView().getItems().get(getIndex());&#10;                    eliminarIniciativa(iniciativa);&#10;                });&#10;            }&#10;&#10;            @Override&#10;            protected void updateItem(Void item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setGraphic(empty ? null : pane);&#10;            }&#10;        });&#10;&#10;        tableIniciativas.setItems(iniciativasFiltradasList);&#10;    }&#10;&#10;    private void configurarFiltros() {&#10;        cbEstado.setValue(&quot;Todos&quot;);&#10;        cbRiesgo.setValue(&quot;Todos&quot;);&#10;    }&#10;&#10;    private void configurarFiltrosAutomaticos() {&#10;        // Configurar filtros automáticos&#10;        cbEstado.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        cbRiesgo.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        txtFiltroNombre.textProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;    }&#10;&#10;    @FXML&#10;    private void mostrarFormularioIniciativa() {&#10;        mostrarFormulario(null);&#10;    }&#10;&#10;    @FXML&#10;    private void aplicarFiltros() {&#10;        String estadoFiltro = cbEstado.getValue();&#10;        String riesgoFiltro = cbRiesgo.getValue();&#10;        String nombreFiltro = txtFiltroNombre.getText().toLowerCase();&#10;&#10;        iniciativasFiltradasList.clear();&#10;&#10;        for (Iniciativa iniciativa : iniciativasList) {&#10;            boolean cumpleEstado = &quot;Todos&quot;.equals(estadoFiltro) || iniciativa.getEstado().equals(estadoFiltro);&#10;            boolean cumpleRiesgo = &quot;Todos&quot;.equals(riesgoFiltro) || iniciativa.getRiesgo().equals(riesgoFiltro);&#10;            boolean cumpleNombre = nombreFiltro.isEmpty() ||&#10;                    iniciativa.getNombre().toLowerCase().contains(nombreFiltro);&#10;&#10;            if (cumpleEstado &amp;&amp; cumpleRiesgo &amp;&amp; cumpleNombre) {&#10;                iniciativasFiltradasList.add(iniciativa);&#10;            }&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void limpiarFiltros() {&#10;        cbEstado.setValue(&quot;Todos&quot;);&#10;        cbRiesgo.setValue(&quot;Todos&quot;);&#10;        txtFiltroNombre.clear();&#10;        iniciativasFiltradasList.setAll(iniciativasList);&#10;    }&#10;&#10;    private void cargarIniciativas() {&#10;        try {&#10;            List&lt;Iniciativa&gt; iniciativas = iniciativaRepository.findAll();&#10;            iniciativasList.setAll(iniciativas);&#10;            iniciativasFiltradasList.setAll(iniciativas);&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al cargar iniciativas&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void editarIniciativa(Iniciativa iniciativa) {&#10;        mostrarFormulario(iniciativa);&#10;    }&#10;&#10;    private void eliminarIniciativa(Iniciativa iniciativa) {&#10;        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);&#10;        alert.setTitle(&quot;Confirmar eliminación&quot;);&#10;        alert.setHeaderText(&quot;¿Está seguro de eliminar esta iniciativa?&quot;);&#10;        alert.setContentText(&quot;Esta acción no se puede deshacer.&quot;);&#10;&#10;        Optional&lt;ButtonType&gt; result = alert.showAndWait();&#10;        if (result.isPresent() &amp;&amp; result.get() == ButtonType.OK) {&#10;            try {&#10;                iniciativaRepository.delete(iniciativa.getIdIniciativa());&#10;                cargarIniciativas();&#10;                mostrarInformacion(&quot;Éxito&quot;, &quot;Iniciativa eliminada correctamente.&quot;);&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error al eliminar iniciativa&quot;, e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void mostrarFormulario(Iniciativa iniciativa) {&#10;        try {&#10;            Stage stage = new Stage();&#10;            stage.initModality(Modality.APPLICATION_MODAL);&#10;            stage.setTitle(iniciativa == null ? &quot;Nueva Iniciativa&quot; : &quot;Editar Iniciativa&quot;);&#10;&#10;            GridPane grid = new GridPane();&#10;            grid.setHgap(15);&#10;            grid.setVgap(15);&#10;            grid.setPadding(new Insets(30));&#10;&#10;            // Campos del formulario&#10;            TextField txtNombre = new TextField(iniciativa != null ? iniciativa.getNombre() : &quot;&quot;);&#10;            TextArea txtDescripcion = new TextArea(iniciativa != null ? iniciativa.getDescripcion() : &quot;&quot;);&#10;            TextField txtTipo = new TextField(iniciativa != null ? iniciativa.getTipo() : &quot;&quot;);&#10;            ComboBox&lt;String&gt; cbEstadoForm = new ComboBox&lt;&gt;();&#10;            cbEstadoForm.getItems().addAll(&quot;planeado&quot;, &quot;en curso&quot;, &quot;finalizado&quot;, &quot;cancelado&quot;);&#10;            cbEstadoForm.setValue(iniciativa != null ? iniciativa.getEstado() : &quot;planeado&quot;);&#10;&#10;            ComboBox&lt;String&gt; cbRiesgoForm = new ComboBox&lt;&gt;();&#10;            cbRiesgoForm.getItems().addAll(&quot;alto&quot;, &quot;medio&quot;, &quot;bajo&quot;);&#10;            cbRiesgoForm.setValue(iniciativa != null ? iniciativa.getRiesgo() : &quot;medio&quot;);&#10;&#10;            DatePicker dpFechaInicio = new DatePicker(iniciativa != null ? iniciativa.getFechaInicio() : LocalDate.now());&#10;            DatePicker dpFechaFin = new DatePicker(iniciativa != null ? iniciativa.getFechaFin() : null);&#10;&#10;            ComboBox&lt;Usuario&gt; cbUsuario = new ComboBox&lt;&gt;();&#10;            try {&#10;                List&lt;Usuario&gt; usuarios = usuarioRepository.findAll();&#10;                cbUsuario.getItems().setAll(usuarios);&#10;                if (iniciativa != null &amp;&amp; iniciativa.getUsuarioId() != 0) {&#10;                    Usuario usuarioSeleccionado = usuarios.stream()&#10;                            .filter(u -&gt; u.getId() == iniciativa.getUsuarioId())&#10;                            .findFirst().orElse(null);&#10;                    cbUsuario.setValue(usuarioSeleccionado);&#10;                }&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error&quot;, &quot;No se pudieron cargar los usuarios&quot;);&#10;            }&#10;&#10;            txtDescripcion.setPrefRowCount(3);&#10;&#10;            // Agregar campos al grid&#10;            grid.add(new Label(&quot;Nombre:&quot;), 0, 0);&#10;            grid.add(txtNombre, 1, 0);&#10;            grid.add(new Label(&quot;Descripción:&quot;), 0, 1);&#10;            grid.add(txtDescripcion, 1, 1);&#10;            grid.add(new Label(&quot;Tipo:&quot;), 0, 2);&#10;            grid.add(txtTipo, 1, 2);&#10;            grid.add(new Label(&quot;Estado:&quot;), 0, 3);&#10;            grid.add(cbEstadoForm, 1, 3);&#10;            grid.add(new Label(&quot;Riesgo:&quot;), 0, 4);&#10;            grid.add(cbRiesgoForm, 1, 4);&#10;            grid.add(new Label(&quot;Fecha Inicio:&quot;), 0, 5);&#10;            grid.add(dpFechaInicio, 1, 5);&#10;            grid.add(new Label(&quot;Fecha Fin:&quot;), 0, 6);&#10;            grid.add(dpFechaFin, 1, 6);&#10;            grid.add(new Label(&quot;Usuario:&quot;), 0, 7);&#10;            grid.add(cbUsuario, 1, 7);&#10;&#10;            // Botones&#10;            HBox buttonBox = new HBox(10);&#10;            Button btnGuardar = new Button(&quot;Guardar&quot;);&#10;            Button btnCancelar = new Button(&quot;Cancelar&quot;);&#10;            buttonBox.getChildren().addAll(btnGuardar, btnCancelar);&#10;            grid.add(buttonBox, 1, 8);&#10;&#10;            btnGuardar.setOnAction(e -&gt; {&#10;                try {&#10;                    if (txtNombre.getText().trim().isEmpty()) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El nombre es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    Iniciativa nuevaIniciativa = iniciativa != null ? iniciativa : new Iniciativa();&#10;                    nuevaIniciativa.setNombre(txtNombre.getText().trim());&#10;                    nuevaIniciativa.setDescripcion(txtDescripcion.getText().trim());&#10;                    nuevaIniciativa.setTipo(txtTipo.getText().trim());&#10;                    nuevaIniciativa.setEstado(cbEstadoForm.getValue());&#10;                    nuevaIniciativa.setRiesgo(cbRiesgoForm.getValue());&#10;                    nuevaIniciativa.setFechaInicio(dpFechaInicio.getValue());&#10;                    nuevaIniciativa.setFechaFin(dpFechaFin.getValue());&#10;&#10;                    if (cbUsuario.getValue() != null) {&#10;                        nuevaIniciativa.setUsuarioId(cbUsuario.getValue().getId());&#10;                    }&#10;&#10;                    if (iniciativa == null) {&#10;                        iniciativaRepository.save(nuevaIniciativa);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Iniciativa creada correctamente.&quot;);&#10;                    } else {&#10;                        iniciativaRepository.update(nuevaIniciativa);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Iniciativa actualizada correctamente.&quot;);&#10;                    }&#10;&#10;                    cargarIniciativas();&#10;                    stage.close();&#10;                } catch (Exception ex) {&#10;                    mostrarError(&quot;Error al guardar iniciativa&quot;, ex.getMessage());&#10;                }&#10;            });&#10;&#10;            btnCancelar.setOnAction(e -&gt; stage.close());&#10;&#10;            Scene scene = new Scene(grid, 650, 650);&#10;            stage.setScene(scene);&#10;            stage.showAndWait();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al abrir formulario&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Iniciativa;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.IniciativaRepository;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.geometry.Insets;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.control.cell.PropertyValueFactory;&#10;import javafx.scene.layout.GridPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.stage.Modality;&#10;import javafx.stage.Stage;&#10;&#10;import java.net.URL;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.ResourceBundle;&#10;&#10;/**&#10; * Controlador para la gestión de iniciativas&#10; */&#10;public class IniciativaController implements Initializable {&#10;&#10;    // Componentes de la vista&#10;    @FXML private ComboBox&lt;String&gt; cbEstado;&#10;    @FXML private ComboBox&lt;String&gt; cbRiesgo;&#10;    @FXML private TextField txtFiltroNombre;&#10;    @FXML private TableView&lt;Iniciativa&gt; tableIniciativas;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colId;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colNombre;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colDescripcion;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colTipo;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colEstado;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colRiesgo;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colFechaInicio;&#10;    @FXML private TableColumn&lt;Iniciativa, String&gt; colFechaFin;&#10;    @FXML private TableColumn&lt;Iniciativa, Void&gt; colAcciones;&#10;&#10;    // Repositorios&#10;    private IniciativaRepository iniciativaRepository;&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    // Lista de datos&#10;    private final ObservableList&lt;Iniciativa&gt; iniciativasList = FXCollections.observableArrayList();&#10;    private final ObservableList&lt;Iniciativa&gt; iniciativasFiltradasList = FXCollections.observableArrayList();&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        iniciativaRepository = new IniciativaRepository();&#10;        usuarioRepository = new UsuarioRepository();&#10;&#10;        configurarTabla();&#10;        cargarIniciativas();&#10;        configurarFiltros();&#10;        configurarFiltrosAutomaticos();&#10;    }&#10;&#10;    private void configurarTabla() {&#10;        // Configurar columnas&#10;        colId.setCellValueFactory(cellData -&gt; new SimpleStringProperty(String.valueOf(cellData.getValue().getIdIniciativa())));&#10;        colNombre.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNombre()));&#10;        colDescripcion.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getDescripcion()));&#10;        colTipo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getTipo()));&#10;        colEstado.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEstado()));&#10;        colRiesgo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getRiesgo()));&#10;&#10;        colFechaInicio.setCellValueFactory(cellData -&gt; {&#10;            LocalDate fecha = cellData.getValue().getFechaInicio();&#10;            return new SimpleStringProperty(fecha != null ? fecha.format(DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;)) : &quot;&quot;);&#10;        });&#10;&#10;        colFechaFin.setCellValueFactory(cellData -&gt; {&#10;            LocalDate fecha = cellData.getValue().getFechaFin();&#10;            return new SimpleStringProperty(fecha != null ? fecha.format(DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;)) : &quot;&quot;);&#10;        });&#10;&#10;        // Configurar columna de acciones&#10;        colAcciones.setCellFactory(param -&gt; new TableCell&lt;&gt;() {&#10;            private final Button btnEditar = new Button(&quot;Editar&quot;);&#10;            private final Button btnEliminar = new Button(&quot;Eliminar&quot;);&#10;            private final HBox pane = new HBox(8);&#10;&#10;            {&#10;                // Hacer los botones más grandes&#10;                btnEditar.setPrefWidth(80);&#10;                btnEditar.setPrefHeight(35);&#10;                btnEliminar.setPrefWidth(80);&#10;                btnEliminar.setPrefHeight(35);&#10;&#10;                btnEditar.setStyle(&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;                btnEliminar.setStyle(&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;&#10;                pane.getChildren().addAll(btnEditar, btnEliminar);&#10;                pane.setAlignment(javafx.geometry.Pos.CENTER);&#10;&#10;                btnEditar.setOnAction(event -&gt; {&#10;                    Iniciativa iniciativa = getTableView().getItems().get(getIndex());&#10;                    editarIniciativa(iniciativa);&#10;                });&#10;&#10;                btnEliminar.setOnAction(event -&gt; {&#10;                    Iniciativa iniciativa = getTableView().getItems().get(getIndex());&#10;                    eliminarIniciativa(iniciativa);&#10;                });&#10;            }&#10;&#10;            @Override&#10;            protected void updateItem(Void item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setGraphic(empty ? null : pane);&#10;            }&#10;        });&#10;&#10;        tableIniciativas.setItems(iniciativasFiltradasList);&#10;    }&#10;&#10;    private void configurarFiltros() {&#10;        cbEstado.setValue(&quot;Todos&quot;);&#10;        cbRiesgo.setValue(&quot;Todos&quot;);&#10;    }&#10;&#10;    private void configurarFiltrosAutomaticos() {&#10;        // Configurar filtros automáticos&#10;        cbEstado.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        cbRiesgo.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        txtFiltroNombre.textProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;    }&#10;&#10;    @FXML&#10;    private void mostrarFormularioIniciativa() {&#10;        mostrarFormulario(null);&#10;    }&#10;&#10;    @FXML&#10;    private void aplicarFiltros() {&#10;        String estadoFiltro = cbEstado.getValue();&#10;        String riesgoFiltro = cbRiesgo.getValue();&#10;        String nombreFiltro = txtFiltroNombre.getText().toLowerCase();&#10;&#10;        iniciativasFiltradasList.clear();&#10;&#10;        for (Iniciativa iniciativa : iniciativasList) {&#10;            boolean cumpleEstado = &quot;Todos&quot;.equals(estadoFiltro) || iniciativa.getEstado().equals(estadoFiltro);&#10;            boolean cumpleRiesgo = &quot;Todos&quot;.equals(riesgoFiltro) || iniciativa.getRiesgo().equals(riesgoFiltro);&#10;            boolean cumpleNombre = nombreFiltro.isEmpty() ||&#10;                    iniciativa.getNombre().toLowerCase().contains(nombreFiltro);&#10;&#10;            if (cumpleEstado &amp;&amp; cumpleRiesgo &amp;&amp; cumpleNombre) {&#10;                iniciativasFiltradasList.add(iniciativa);&#10;            }&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void limpiarFiltros() {&#10;        cbEstado.setValue(&quot;Todos&quot;);&#10;        cbRiesgo.setValue(&quot;Todos&quot;);&#10;        txtFiltroNombre.clear();&#10;        iniciativasFiltradasList.setAll(iniciativasList);&#10;    }&#10;&#10;    private void cargarIniciativas() {&#10;        try {&#10;            List&lt;Iniciativa&gt; iniciativas = iniciativaRepository.findAll();&#10;            iniciativasList.setAll(iniciativas);&#10;            iniciativasFiltradasList.setAll(iniciativas);&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al cargar iniciativas&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void editarIniciativa(Iniciativa iniciativa) {&#10;        mostrarFormulario(iniciativa);&#10;    }&#10;&#10;    private void eliminarIniciativa(Iniciativa iniciativa) {&#10;        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);&#10;        alert.setTitle(&quot;Confirmar eliminación&quot;);&#10;        alert.setHeaderText(&quot;¿Está seguro de eliminar esta iniciativa?&quot;);&#10;        alert.setContentText(&quot;Esta acción no se puede deshacer.&quot;);&#10;&#10;        Optional&lt;ButtonType&gt; result = alert.showAndWait();&#10;        if (result.isPresent() &amp;&amp; result.get() == ButtonType.OK) {&#10;            try {&#10;                iniciativaRepository.delete(iniciativa.getIdIniciativa());&#10;                cargarIniciativas();&#10;                mostrarInformacion(&quot;Éxito&quot;, &quot;Iniciativa eliminada correctamente.&quot;);&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error al eliminar iniciativa&quot;, e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void mostrarFormulario(Iniciativa iniciativa) {&#10;        try {&#10;            Stage stage = new Stage();&#10;            stage.initModality(Modality.APPLICATION_MODAL);&#10;            stage.setTitle(iniciativa == null ? &quot;Nueva Iniciativa&quot; : &quot;Editar Iniciativa&quot;);&#10;            &#10;            // Forzar el tamaño del stage&#10;            stage.setWidth(750);&#10;            stage.setHeight(700);&#10;            stage.setMinWidth(750);&#10;            stage.setMinHeight(700);&#10;            stage.setResizable(true);&#10;&#10;            GridPane grid = new GridPane();&#10;            grid.setHgap(20);&#10;            grid.setVgap(20);&#10;            grid.setPadding(new Insets(40));&#10;&#10;            // Campos del formulario - HACERLOS MÁS GRANDES&#10;            TextField txtNombre = new TextField(iniciativa != null ? iniciativa.getNombre() : &quot;&quot;);&#10;            txtNombre.setPrefWidth(350);&#10;            txtNombre.setPrefHeight(35);&#10;            &#10;            TextArea txtDescripcion = new TextArea(iniciativa != null ? iniciativa.getDescripcion() : &quot;&quot;);&#10;            txtDescripcion.setPrefRowCount(4);&#10;            txtDescripcion.setPrefWidth(350);&#10;            txtDescripcion.setPrefHeight(100);&#10;            &#10;            TextField txtTipo = new TextField(iniciativa != null ? iniciativa.getTipo() : &quot;&quot;);&#10;            txtTipo.setPrefWidth(350);&#10;            txtTipo.setPrefHeight(35);&#10;            &#10;            ComboBox&lt;String&gt; cbEstadoForm = new ComboBox&lt;&gt;();&#10;            cbEstadoForm.getItems().addAll(&quot;planeado&quot;, &quot;en curso&quot;, &quot;finalizado&quot;, &quot;cancelado&quot;);&#10;            cbEstadoForm.setValue(iniciativa != null ? iniciativa.getEstado() : &quot;planeado&quot;);&#10;            cbEstadoForm.setPrefWidth(350);&#10;            cbEstadoForm.setPrefHeight(35);&#10;&#10;            ComboBox&lt;String&gt; cbRiesgoForm = new ComboBox&lt;&gt;();&#10;            cbRiesgoForm.getItems().addAll(&quot;alto&quot;, &quot;medio&quot;, &quot;bajo&quot;);&#10;            cbRiesgoForm.setValue(iniciativa != null ? iniciativa.getRiesgo() : &quot;medio&quot;);&#10;            cbRiesgoForm.setPrefWidth(350);&#10;            cbRiesgoForm.setPrefHeight(35);&#10;&#10;            DatePicker dpFechaInicio = new DatePicker(iniciativa != null ? iniciativa.getFechaInicio() : LocalDate.now());&#10;            dpFechaInicio.setPrefWidth(350);&#10;            dpFechaInicio.setPrefHeight(35);&#10;            &#10;            DatePicker dpFechaFin = new DatePicker(iniciativa != null ? iniciativa.getFechaFin() : null);&#10;            dpFechaFin.setPrefWidth(350);&#10;            dpFechaFin.setPrefHeight(35);&#10;&#10;            ComboBox&lt;Usuario&gt; cbUsuario = new ComboBox&lt;&gt;();&#10;            cbUsuario.setPrefWidth(350);&#10;            cbUsuario.setPrefHeight(35);&#10;            &#10;            try {&#10;                List&lt;Usuario&gt; usuarios = usuarioRepository.findAll();&#10;                cbUsuario.getItems().setAll(usuarios);&#10;                if (iniciativa != null &amp;&amp; iniciativa.getUsuarioId() != 0) {&#10;                    Usuario usuarioSeleccionado = usuarios.stream()&#10;                            .filter(u -&gt; u.getId() == iniciativa.getUsuarioId())&#10;                            .findFirst().orElse(null);&#10;                    cbUsuario.setValue(usuarioSeleccionado);&#10;                }&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error&quot;, &quot;No se pudieron cargar los usuarios&quot;);&#10;            }&#10;&#10;            // Hacer las etiquetas más grandes&#10;            Label lblNombre = new Label(&quot;Nombre:&quot;);&#10;            lblNombre.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblDescripcion = new Label(&quot;Descripción:&quot;);&#10;            lblDescripcion.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblTipo = new Label(&quot;Tipo:&quot;);&#10;            lblTipo.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblEstado = new Label(&quot;Estado:&quot;);&#10;            lblEstado.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblRiesgo = new Label(&quot;Riesgo:&quot;);&#10;            lblRiesgo.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblFechaInicio = new Label(&quot;Fecha Inicio:&quot;);&#10;            lblFechaInicio.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblFechaFin = new Label(&quot;Fecha Fin:&quot;);&#10;            lblFechaFin.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblUsuario = new Label(&quot;Usuario:&quot;);&#10;            lblUsuario.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;&#10;            // Agregar campos al grid&#10;            grid.add(lblNombre, 0, 0);&#10;            grid.add(txtNombre, 1, 0);&#10;            grid.add(lblDescripcion, 0, 1);&#10;            grid.add(txtDescripcion, 1, 1);&#10;            grid.add(lblTipo, 0, 2);&#10;            grid.add(txtTipo, 1, 2);&#10;            grid.add(lblEstado, 0, 3);&#10;            grid.add(cbEstadoForm, 1, 3);&#10;            grid.add(lblRiesgo, 0, 4);&#10;            grid.add(cbRiesgoForm, 1, 4);&#10;            grid.add(lblFechaInicio, 0, 5);&#10;            grid.add(dpFechaInicio, 1, 5);&#10;            grid.add(lblFechaFin, 0, 6);&#10;            grid.add(dpFechaFin, 1, 6);&#10;            grid.add(lblUsuario, 0, 7);&#10;            grid.add(cbUsuario, 1, 7);&#10;&#10;            // Botones más grandes&#10;            HBox buttonBox = new HBox(15);&#10;            Button btnGuardar = new Button(&quot;Guardar&quot;);&#10;            Button btnCancelar = new Button(&quot;Cancelar&quot;);&#10;            &#10;            btnGuardar.setPrefWidth(120);&#10;            btnGuardar.setPrefHeight(40);&#10;            btnGuardar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            &#10;            btnCancelar.setPrefWidth(120);&#10;            btnCancelar.setPrefHeight(40);&#10;            btnCancelar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            &#10;            buttonBox.getChildren().addAll(btnGuardar, btnCancelar);&#10;            grid.add(buttonBox, 1, 8);&#10;&#10;            btnGuardar.setOnAction(e -&gt; {&#10;                try {&#10;                    if (txtNombre.getText().trim().isEmpty()) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El nombre es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    Iniciativa nuevaIniciativa = iniciativa != null ? iniciativa : new Iniciativa();&#10;                    nuevaIniciativa.setNombre(txtNombre.getText().trim());&#10;                    nuevaIniciativa.setDescripcion(txtDescripcion.getText().trim());&#10;                    nuevaIniciativa.setTipo(txtTipo.getText().trim());&#10;                    nuevaIniciativa.setEstado(cbEstadoForm.getValue());&#10;                    nuevaIniciativa.setRiesgo(cbRiesgoForm.getValue());&#10;                    nuevaIniciativa.setFechaInicio(dpFechaInicio.getValue());&#10;                    nuevaIniciativa.setFechaFin(dpFechaFin.getValue());&#10;&#10;                    if (cbUsuario.getValue() != null) {&#10;                        nuevaIniciativa.setUsuarioId(cbUsuario.getValue().getId());&#10;                    }&#10;&#10;                    if (iniciativa == null) {&#10;                        iniciativaRepository.save(nuevaIniciativa);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Iniciativa creada correctamente.&quot;);&#10;                    } else {&#10;                        iniciativaRepository.update(nuevaIniciativa);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Iniciativa actualizada correctamente.&quot;);&#10;                    }&#10;&#10;                    cargarIniciativas();&#10;                    stage.close();&#10;                } catch (Exception ex) {&#10;                    mostrarError(&quot;Error al guardar iniciativa&quot;, ex.getMessage());&#10;                }&#10;            });&#10;&#10;            btnCancelar.setOnAction(e -&gt; stage.close());&#10;&#10;            Scene scene = new Scene(grid, 750, 700);&#10;            stage.setScene(scene);&#10;            stage.centerOnScreen();&#10;            stage.showAndWait();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al abrir formulario&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/LoginController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/LoginController.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.control.PasswordField;&#10;import javafx.scene.control.TextField;&#10;import javafx.stage.Stage;&#10;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Controlador para la vista de login&#10; */&#10;public class LoginController {&#10;&#10;    @FXML&#10;    private TextField txtEmail;&#10;&#10;    @FXML&#10;    private PasswordField txtPassword;&#10;&#10;    @FXML&#10;    private Button btnIngresar;&#10;&#10;    @FXML&#10;    private Button btnCancelar;&#10;&#10;    @FXML&#10;    private Label lblEmailError;&#10;&#10;    @FXML&#10;    private Label lblPasswordError;&#10;&#10;    @FXML&#10;    private Label lblLoginError;&#10;&#10;    private MainController mainController;&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        usuarioRepository = new UsuarioRepository();&#10;&#10;        // Configurar validaciones en tiempo real&#10;        txtEmail.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            limpiarErrorEmail();&#10;        });&#10;&#10;        txtPassword.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            limpiarErrorPassword();&#10;        });&#10;&#10;        // Permitir login con Enter&#10;        txtPassword.setOnAction(event -&gt; handleLogin());&#10;    }&#10;&#10;    /**&#10;     * Establece la referencia al controlador principal&#10;     */&#10;    public void setMainController(MainController mainController) {&#10;        this.mainController = mainController;&#10;    }&#10;&#10;    /**&#10;     * Maneja el evento de login&#10;     */&#10;    @FXML&#10;    private void handleLogin() {&#10;        limpiarErrores();&#10;&#10;        if (!validarCampos()) {&#10;            return;&#10;        }&#10;&#10;        String email = txtEmail.getText().trim();&#10;        String password = txtPassword.getText();&#10;&#10;        // Deshabilitar botón mientras se procesa&#10;        btnIngresar.setDisable(true);&#10;        btnIngresar.setText(&quot;Ingresando...&quot;);&#10;&#10;        try {&#10;            // Intentar autenticación&#10;            Optional&lt;Usuario&gt; usuarioOpt = usuarioRepository.authenticate(email, password);&#10;&#10;            if (usuarioOpt.isPresent()) {&#10;                Usuario usuario = usuarioOpt.get();&#10;&#10;                // Verificar que el usuario esté activo (doble verificación)&#10;                if (!usuario.isEstado()) {&#10;                    mostrarErrorLogin(&quot;Usuario inactivo. Contacte al administrador.&quot;);&#10;                    return;&#10;                }&#10;&#10;                // Login exitoso&#10;                mainController.setUsuarioLogueado(usuario);&#10;                cerrarVentana();&#10;&#10;            } else {&#10;                mostrarErrorLogin(&quot;Email o contraseña incorrectos.&quot;);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error durante el login: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            mostrarErrorLogin(&quot;Error de conexión. Intente nuevamente.&quot;);&#10;        } finally {&#10;            // Rehabilitar botón&#10;            btnIngresar.setDisable(false);&#10;            btnIngresar.setText(&quot;Ingresar&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Maneja el evento de cancelar&#10;     */&#10;    @FXML&#10;    private void handleCancelar() {&#10;        cerrarVentana();&#10;    }&#10;&#10;    /**&#10;     * Valida que todos los campos estén llenos y correctos&#10;     */&#10;    private boolean validarCampos() {&#10;        boolean esValido = true;&#10;&#10;        // Validar email&#10;        String email = txtEmail.getText().trim();&#10;        if (email.isEmpty()) {&#10;            mostrarErrorEmail(&quot;El email es requerido&quot;);&#10;            esValido = false;&#10;        } else if (!esEmailValido(email)) {&#10;            mostrarErrorEmail(&quot;Formato de email inválido&quot;);&#10;            esValido = false;&#10;        }&#10;&#10;        // Validar contraseña&#10;        String password = txtPassword.getText();&#10;        if (password.isEmpty()) {&#10;            mostrarErrorPassword(&quot;La contraseña es requerida&quot;);&#10;            esValido = false;&#10;        } else if (password.length() &lt; 3) {&#10;            mostrarErrorPassword(&quot;La contraseña debe tener al menos 3 caracteres&quot;);&#10;            esValido = false;&#10;        }&#10;&#10;        return esValido;&#10;    }&#10;&#10;    /**&#10;     * Valida el formato del email&#10;     */&#10;    private boolean esEmailValido(String email) {&#10;        String emailRegex = &quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&quot;;&#10;        return email.matches(emailRegex);&#10;    }&#10;&#10;    /**&#10;     * Muestra error en el campo email&#10;     */&#10;    private void mostrarErrorEmail(String mensaje) {&#10;        lblEmailError.setText(mensaje);&#10;        lblEmailError.setVisible(true);&#10;        txtEmail.setStyle(&quot;-fx-border-color: #BF616A; -fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Muestra error en el campo contraseña&#10;     */&#10;    private void mostrarErrorPassword(String mensaje) {&#10;        lblPasswordError.setText(mensaje);&#10;        lblPasswordError.setVisible(true);&#10;        txtPassword.setStyle(&quot;-fx-border-color: #BF616A; -fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Muestra error general de login&#10;     */&#10;    private void mostrarErrorLogin(String mensaje) {&#10;        lblLoginError.setText(mensaje);&#10;        lblLoginError.setVisible(true);&#10;    }&#10;&#10;    /**&#10;     * Limpia el error del campo email&#10;     */&#10;    private void limpiarErrorEmail() {&#10;        lblEmailError.setVisible(false);&#10;        txtEmail.setStyle(&quot;-fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Limpia el error del campo contraseña&#10;     */&#10;    private void limpiarErrorPassword() {&#10;        lblPasswordError.setVisible(false);&#10;        txtPassword.setStyle(&quot;-fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Limpia todos los errores&#10;     */&#10;    private void limpiarErrores() {&#10;        limpiarErrorEmail();&#10;        limpiarErrorPassword();&#10;        lblLoginError.setVisible(false);&#10;    }&#10;&#10;    /**&#10;     * Cierra la ventana de login&#10;     */&#10;    private void cerrarVentana() {&#10;        Stage stage = (Stage) btnCancelar.getScene().getWindow();&#10;        stage.close();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.control.PasswordField;&#10;import javafx.scene.control.TextField;&#10;import javafx.stage.Stage;&#10;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Controlador para la vista de login&#10; */&#10;public class LoginController {&#10;&#10;    @FXML&#10;    private TextField txtEmail;&#10;&#10;    @FXML&#10;    private PasswordField txtPassword;&#10;&#10;    @FXML&#10;    private Button btnIngresar;&#10;&#10;    @FXML&#10;    private Button btnCancelar;&#10;&#10;    @FXML&#10;    private Label lblEmailError;&#10;&#10;    @FXML&#10;    private Label lblPasswordError;&#10;&#10;    @FXML&#10;    private Label lblLoginError;&#10;&#10;    private MainController mainController;&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        usuarioRepository = new UsuarioRepository();&#10;&#10;        // Cargar el último email usado si existe&#10;        String ultimoEmail = MainController.getUltimoEmailUsado();&#10;        if (!ultimoEmail.isEmpty()) {&#10;            txtEmail.setText(ultimoEmail);&#10;            // Enfocar el campo de contraseña ya que el email está prellenado&#10;            txtPassword.requestFocus();&#10;        }&#10;&#10;        // Configurar validaciones en tiempo real&#10;        txtEmail.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            limpiarErrorEmail();&#10;        });&#10;&#10;        txtPassword.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            limpiarErrorPassword();&#10;        });&#10;&#10;        // Permitir login con Enter&#10;        txtPassword.setOnAction(event -&gt; handleLogin());&#10;    }&#10;&#10;    /**&#10;     * Establece la referencia al controlador principal&#10;     */&#10;    public void setMainController(MainController mainController) {&#10;        this.mainController = mainController;&#10;    }&#10;&#10;    /**&#10;     * Maneja el evento de login&#10;     */&#10;    @FXML&#10;    private void handleLogin() {&#10;        limpiarErrores();&#10;&#10;        if (!validarCampos()) {&#10;            return;&#10;        }&#10;&#10;        String email = txtEmail.getText().trim();&#10;        String password = txtPassword.getText();&#10;&#10;        // Deshabilitar botón mientras se procesa&#10;        btnIngresar.setDisable(true);&#10;        btnIngresar.setText(&quot;Ingresando...&quot;);&#10;&#10;        try {&#10;            // Intentar autenticación&#10;            Optional&lt;Usuario&gt; usuarioOpt = usuarioRepository.authenticate(email, password);&#10;&#10;            if (usuarioOpt.isPresent()) {&#10;                Usuario usuario = usuarioOpt.get();&#10;&#10;                // Verificar que el usuario esté activo (doble verificación)&#10;                if (!usuario.isEstado()) {&#10;                    mostrarErrorLogin(&quot;Usuario inactivo. Contacte al administrador.&quot;);&#10;                    return;&#10;                }&#10;&#10;                // Guardar el email para futuras sesiones&#10;                MainController.guardarUltimoEmail(email);&#10;&#10;                // Login exitoso&#10;                mainController.setUsuarioLogueado(usuario);&#10;                cerrarVentana();&#10;&#10;            } else {&#10;                mostrarErrorLogin(&quot;Email o contraseña incorrectos.&quot;);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error durante el login: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            mostrarErrorLogin(&quot;Error de conexión. Intente nuevamente.&quot;);&#10;        } finally {&#10;            // Rehabilitar botón&#10;            btnIngresar.setDisable(false);&#10;            btnIngresar.setText(&quot;Ingresar&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Maneja el evento de cancelar&#10;     */&#10;    @FXML&#10;    private void handleCancelar() {&#10;        cerrarVentana();&#10;    }&#10;&#10;    /**&#10;     * Valida que todos los campos estén llenos y correctos&#10;     */&#10;    private boolean validarCampos() {&#10;        boolean esValido = true;&#10;&#10;        // Validar email&#10;        String email = txtEmail.getText().trim();&#10;        if (email.isEmpty()) {&#10;            mostrarErrorEmail(&quot;El email es requerido&quot;);&#10;            esValido = false;&#10;        } else if (!esEmailValido(email)) {&#10;            mostrarErrorEmail(&quot;Formato de email inválido&quot;);&#10;            esValido = false;&#10;        }&#10;&#10;        // Validar contraseña&#10;        String password = txtPassword.getText();&#10;        if (password.isEmpty()) {&#10;            mostrarErrorPassword(&quot;La contraseña es requerida&quot;);&#10;            esValido = false;&#10;        } else if (password.length() &lt; 3) {&#10;            mostrarErrorPassword(&quot;La contraseña debe tener al menos 3 caracteres&quot;);&#10;            esValido = false;&#10;        }&#10;&#10;        return esValido;&#10;    }&#10;&#10;    /**&#10;     * Valida el formato del email&#10;     */&#10;    private boolean esEmailValido(String email) {&#10;        String emailRegex = &quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&quot;;&#10;        return email.matches(emailRegex);&#10;    }&#10;&#10;    /**&#10;     * Muestra error en el campo email&#10;     */&#10;    private void mostrarErrorEmail(String mensaje) {&#10;        lblEmailError.setText(mensaje);&#10;        lblEmailError.setVisible(true);&#10;        txtEmail.setStyle(&quot;-fx-border-color: #BF616A; -fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Muestra error en el campo contraseña&#10;     */&#10;    private void mostrarErrorPassword(String mensaje) {&#10;        lblPasswordError.setText(mensaje);&#10;        lblPasswordError.setVisible(true);&#10;        txtPassword.setStyle(&quot;-fx-border-color: #BF616A; -fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Muestra error general de login&#10;     */&#10;    private void mostrarErrorLogin(String mensaje) {&#10;        lblLoginError.setText(mensaje);&#10;        lblLoginError.setVisible(true);&#10;    }&#10;&#10;    /**&#10;     * Limpia el error del campo email&#10;     */&#10;    private void limpiarErrorEmail() {&#10;        lblEmailError.setVisible(false);&#10;        txtEmail.setStyle(&quot;-fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Limpia el error del campo contraseña&#10;     */&#10;    private void limpiarErrorPassword() {&#10;        lblPasswordError.setVisible(false);&#10;        txtPassword.setStyle(&quot;-fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Limpia todos los errores&#10;     */&#10;    private void limpiarErrores() {&#10;        limpiarErrorEmail();&#10;        limpiarErrorPassword();&#10;        lblLoginError.setVisible(false);&#10;    }&#10;&#10;    /**&#10;     * Cierra la ventana de login&#10;     */&#10;    private void cerrarVentana() {&#10;        Stage stage = (Stage) btnCancelar.getScene().getWindow();&#10;        stage.close();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/PerfilController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/PerfilController.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import com.juank.utp.finimpact.utils.PasswordUtils;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;&#10;/**&#10; * Controlador para la vista de perfil del usuario&#10; */&#10;public class PerfilController {&#10;&#10;    // Componentes de información personal&#10;    @FXML private Label lblNombreCompleto;&#10;    @FXML private Label lblUsuario;&#10;    @FXML private Label lblEmail;&#10;    @FXML private Label lblTipo;&#10;&#10;    // Componentes de cambio de contraseña&#10;    @FXML private PasswordField txtPasswordActual;&#10;    @FXML private PasswordField txtPasswordNueva;&#10;    @FXML private PasswordField txtPasswordConfirmar;&#10;&#10;    private Usuario usuario;&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    public void initialize() {&#10;        usuarioRepository = new UsuarioRepository();&#10;    }&#10;&#10;    /**&#10;     * Establece el usuario cuyo perfil se va a mostrar&#10;     */&#10;    public void setUsuario(Usuario usuario) {&#10;        this.usuario = usuario;&#10;        cargarDatosUsuario();&#10;    }&#10;&#10;    /**&#10;     * Carga los datos del usuario en la interfaz&#10;     */&#10;    private void cargarDatosUsuario() {&#10;        if (usuario != null) {&#10;            lblNombreCompleto.setText(usuario.getNombreCompleto());&#10;            lblUsuario.setText(usuario.getUsuario());&#10;            lblEmail.setText(usuario.getEmail());&#10;            lblTipo.setText(getTipoDisplayName(usuario.getRol()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Maneja el evento de cambiar contraseña&#10;     */&#10;    @FXML&#10;    private void cambiarPassword() {&#10;        if (usuario == null) {&#10;            mostrarError(&quot;Error&quot;, &quot;No se ha cargado la información del usuario.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Validaciones&#10;        String passwordActual = txtPasswordActual.getText().trim();&#10;        String passwordNueva = txtPasswordNueva.getText().trim();&#10;        String passwordConfirmar = txtPasswordConfirmar.getText().trim();&#10;&#10;        if (passwordActual.isEmpty()) {&#10;            mostrarError(&quot;Error&quot;, &quot;Debe ingresar su contraseña actual.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (passwordNueva.isEmpty()) {&#10;            mostrarError(&quot;Error&quot;, &quot;Debe ingresar la nueva contraseña.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (passwordNueva.length() &lt; 6) {&#10;            mostrarError(&quot;Error&quot;, &quot;La nueva contraseña debe tener al menos 6 caracteres.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!passwordNueva.equals(passwordConfirmar)) {&#10;            mostrarError(&quot;Error&quot;, &quot;La confirmación de contraseña no coincide.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Verificar contraseña actual&#10;        if (!PasswordUtils.verifyPassword(passwordActual, usuario.getPassword())) {&#10;            mostrarError(&quot;Error&quot;, &quot;La contraseña actual es incorrecta.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Cambiar contraseña&#10;        try {&#10;            String nuevaPasswordHash = PasswordUtils.hashPassword(passwordNueva);&#10;            usuario.setPassword(nuevaPasswordHash);&#10;            usuarioRepository.update(usuario);&#10;&#10;            mostrarInformacion(&quot;Éxito&quot;, &quot;Contraseña cambiada correctamente.&quot;);&#10;            limpiarCampos();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error&quot;, &quot;Error al cambiar la contraseña: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Limpia los campos de contraseña&#10;     */&#10;    @FXML&#10;    private void limpiarCampos() {&#10;        txtPasswordActual.clear();&#10;        txtPasswordNueva.clear();&#10;        txtPasswordConfirmar.clear();&#10;    }&#10;&#10;    /**&#10;     * Convierte el tipo técnico a un nombre más amigable&#10;     */&#10;    private String getTipoDisplayName(String tipo) {&#10;        switch (tipo.toLowerCase()) {&#10;            case &quot;admin&quot;:&#10;                return &quot;Administrador&quot;;&#10;            case &quot;analista&quot;:&#10;                return &quot;Analista&quot;;&#10;            case &quot;viewer&quot;:&#10;                return &quot;Visualizador&quot;;&#10;            default:&#10;                return tipo;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Muestra un mensaje de error&#10;     */&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    /**&#10;     * Muestra un mensaje de información&#10;     */&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import com.juank.utp.finimpact.utils.PasswordUtils;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;&#10;/**&#10; * Controlador para la vista de perfil del usuario&#10; */&#10;public class PerfilController {&#10;&#10;    // Componentes de información personal&#10;    @FXML private Label lblNombreCompleto;&#10;    @FXML private Label lblUsuario;&#10;    @FXML private Label lblEmail;&#10;    @FXML private Label lblTipo;&#10;&#10;    // Componentes de cambio de contraseña&#10;    @FXML private PasswordField txtPasswordActual;&#10;    @FXML private PasswordField txtPasswordNueva;&#10;    @FXML private PasswordField txtPasswordConfirmar;&#10;&#10;    private Usuario usuario;&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    public void initialize() {&#10;        usuarioRepository = new UsuarioRepository();&#10;    }&#10;&#10;    /**&#10;     * Establece el usuario cuyo perfil se va a mostrar&#10;     */&#10;    public void setUsuario(Usuario usuario) {&#10;        this.usuario = usuario;&#10;        cargarDatosUsuario();&#10;    }&#10;&#10;    /**&#10;     * Carga los datos del usuario en la interfaz&#10;     */&#10;    private void cargarDatosUsuario() {&#10;        if (usuario != null) {&#10;            lblNombreCompleto.setText(usuario.getNombreCompleto());&#10;            lblUsuario.setText(usuario.getEmail()); // Usar email como nombre de usuario&#10;            lblEmail.setText(usuario.getEmail());&#10;            lblTipo.setText(getTipoDisplayName(usuario.getRol())); // Usar getRol() en lugar de getTipo()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Maneja el evento de cambiar contraseña&#10;     */&#10;    @FXML&#10;    private void cambiarPassword() {&#10;        if (usuario == null) {&#10;            mostrarError(&quot;Error&quot;, &quot;No se ha cargado la información del usuario.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Validaciones&#10;        String passwordActual = txtPasswordActual.getText().trim();&#10;        String passwordNueva = txtPasswordNueva.getText().trim();&#10;        String passwordConfirmar = txtPasswordConfirmar.getText().trim();&#10;&#10;        if (passwordActual.isEmpty()) {&#10;            mostrarError(&quot;Error&quot;, &quot;Debe ingresar su contraseña actual.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (passwordNueva.isEmpty()) {&#10;            mostrarError(&quot;Error&quot;, &quot;Debe ingresar la nueva contraseña.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (passwordNueva.length() &lt; 6) {&#10;            mostrarError(&quot;Error&quot;, &quot;La nueva contraseña debe tener al menos 6 caracteres.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!passwordNueva.equals(passwordConfirmar)) {&#10;            mostrarError(&quot;Error&quot;, &quot;La confirmación de contraseña no coincide.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Verificar contraseña actual&#10;        if (!PasswordUtils.verifyPassword(passwordActual, usuario.getPassword())) {&#10;            mostrarError(&quot;Error&quot;, &quot;La contraseña actual es incorrecta.&quot;);&#10;            return;&#10;        }&#10;&#10;        // Cambiar contraseña&#10;        try {&#10;            String nuevaPasswordHash = PasswordUtils.hashPassword(passwordNueva);&#10;            usuario.setPassword(nuevaPasswordHash);&#10;            usuarioRepository.update(usuario);&#10;&#10;            mostrarInformacion(&quot;Éxito&quot;, &quot;Contraseña cambiada correctamente.&quot;);&#10;            limpiarCampos();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error&quot;, &quot;Error al cambiar la contraseña: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Limpia los campos de contraseña&#10;     */&#10;    @FXML&#10;    private void limpiarCampos() {&#10;        txtPasswordActual.clear();&#10;        txtPasswordNueva.clear();&#10;        txtPasswordConfirmar.clear();&#10;    }&#10;&#10;    /**&#10;     * Convierte el rol técnico a un nombre más amigable&#10;     */&#10;    private String getTipoDisplayName(String rol) {&#10;        switch (rol.toLowerCase()) {&#10;            case &quot;admin&quot;:&#10;                return &quot;Administrador&quot;;&#10;            case &quot;analista&quot;:&#10;                return &quot;Analista&quot;;&#10;            case &quot;viewer&quot;:&#10;                return &quot;Visualizador&quot;;&#10;            default:&#10;                return rol;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Muestra un mensaje de error&#10;     */&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    /**&#10;     * Muestra un mensaje de información&#10;     */&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/UsuarioController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/UsuarioController.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import com.juank.utp.finimpact.utils.PasswordUtils;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.geometry.Insets;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.layout.GridPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.stage.Modality;&#10;import javafx.stage.Stage;&#10;&#10;import java.net.URL;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.ResourceBundle;&#10;&#10;/**&#10; * Controlador para la gestión de usuarios (solo admin)&#10; */&#10;public class UsuarioController implements Initializable {&#10;&#10;    // Componentes de la vista&#10;    @FXML private ComboBox&lt;String&gt; cbTipo;&#10;    @FXML private TextField txtFiltroNombre;&#10;    @FXML private TableView&lt;Usuario&gt; tableUsuarios;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colId;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colNombreCompleto;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colUsuario;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colEmail;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colTipo;&#10;    @FXML private TableColumn&lt;Usuario, Void&gt; colAcciones;&#10;&#10;    // Repositorio&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    // Lista de datos&#10;    private final ObservableList&lt;Usuario&gt; usuariosList = FXCollections.observableArrayList();&#10;    private final ObservableList&lt;Usuario&gt; usuariosFiltradosList = FXCollections.observableArrayList();&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        usuarioRepository = new UsuarioRepository();&#10;&#10;        configurarTabla();&#10;        cargarUsuarios();&#10;        configurarFiltros();&#10;        configurarFiltrosAutomaticos();&#10;    }&#10;&#10;    private void configurarTabla() {&#10;        // Configurar columnas&#10;        colId.setCellValueFactory(cellData -&gt; new SimpleStringProperty(String.valueOf(cellData.getValue().getId())));&#10;        colNombreCompleto.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNombreCompleto()));&#10;        colUsuario.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEmail())); // Usando email como usuario&#10;        colEmail.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEmail()));&#10;        colTipo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(getTipoDisplayName(cellData.getValue().getRol())));&#10;&#10;        // Configurar columna de acciones&#10;        colAcciones.setCellFactory(param -&gt; new TableCell&lt;&gt;() {&#10;            private final Button btnEditar = new Button(&quot;Editar&quot;);&#10;            private final Button btnEliminar = new Button(&quot;Eliminar&quot;);&#10;            private final HBox pane = new HBox(8);&#10;&#10;            {&#10;                // Hacer los botones más grandes&#10;                btnEditar.setPrefWidth(80);&#10;                btnEditar.setPrefHeight(35);&#10;                btnEliminar.setPrefWidth(80);&#10;                btnEliminar.setPrefHeight(35);&#10;&#10;                btnEditar.setStyle(&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;                btnEliminar.setStyle(&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;&#10;                pane.getChildren().addAll(btnEditar, btnEliminar);&#10;                pane.setAlignment(javafx.geometry.Pos.CENTER);&#10;&#10;                btnEditar.setOnAction(event -&gt; {&#10;                    Usuario usuario = getTableView().getItems().get(getIndex());&#10;                    editarUsuario(usuario);&#10;                });&#10;&#10;                btnEliminar.setOnAction(event -&gt; {&#10;                    Usuario usuario = getTableView().getItems().get(getIndex());&#10;                    eliminarUsuario(usuario);&#10;                });&#10;            }&#10;&#10;            @Override&#10;            protected void updateItem(Void item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setGraphic(empty ? null : pane);&#10;            }&#10;        });&#10;&#10;        tableUsuarios.setItems(usuariosFiltradosList);&#10;    }&#10;&#10;    private void configurarFiltros() {&#10;        cbTipo.setValue(&quot;Todos&quot;);&#10;    }&#10;&#10;    private void configurarFiltrosAutomaticos() {&#10;        // Configurar filtros automáticos&#10;        cbTipo.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        txtFiltroNombre.textProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;    }&#10;&#10;    @FXML&#10;    private void mostrarFormularioUsuario() {&#10;        mostrarFormulario(null);&#10;    }&#10;&#10;    @FXML&#10;    private void aplicarFiltros() {&#10;        String tipoFiltro = cbTipo.getValue();&#10;        String nombreFiltro = txtFiltroNombre.getText().toLowerCase();&#10;&#10;        usuariosFiltradosList.clear();&#10;&#10;        for (Usuario usuario : usuariosList) {&#10;            boolean cumpleTipo = &quot;Todos&quot;.equals(tipoFiltro) || usuario.getTipo().equals(tipoFiltro);&#10;            boolean cumpleNombre = nombreFiltro.isEmpty() ||&#10;                    usuario.getNombreCompleto().toLowerCase().contains(nombreFiltro) ||&#10;                    usuario.getUsuario().toLowerCase().contains(nombreFiltro);&#10;&#10;            if (cumpleTipo &amp;&amp; cumpleNombre) {&#10;                usuariosFiltradosList.add(usuario);&#10;            }&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void limpiarFiltros() {&#10;        cbTipo.setValue(&quot;Todos&quot;);&#10;        txtFiltroNombre.clear();&#10;        usuariosFiltradosList.setAll(usuariosList);&#10;    }&#10;&#10;    private void cargarUsuarios() {&#10;        try {&#10;            List&lt;Usuario&gt; usuarios = usuarioRepository.findAll();&#10;            usuariosList.setAll(usuarios);&#10;            usuariosFiltradosList.setAll(usuarios);&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al cargar usuarios&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void editarUsuario(Usuario usuario) {&#10;        mostrarFormulario(usuario);&#10;    }&#10;&#10;    private void eliminarUsuario(Usuario usuario) {&#10;        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);&#10;        alert.setTitle(&quot;Confirmar eliminación&quot;);&#10;        alert.setHeaderText(&quot;¿Está seguro de eliminar este usuario?&quot;);&#10;        alert.setContentText(&quot;Esta acción no se puede deshacer.&quot;);&#10;&#10;        Optional&lt;ButtonType&gt; result = alert.showAndWait();&#10;        if (result.isPresent() &amp;&amp; result.get() == ButtonType.OK) {&#10;            try {&#10;                usuarioRepository.delete(usuario.getId());&#10;                cargarUsuarios();&#10;                mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario eliminado correctamente.&quot;);&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error al eliminar usuario&quot;, e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void mostrarFormulario(Usuario usuario) {&#10;        try {&#10;            Stage stage = new Stage();&#10;            stage.initModality(Modality.APPLICATION_MODAL);&#10;            stage.setTitle(usuario == null ? &quot;Nuevo Usuario&quot; : &quot;Editar Usuario&quot;);&#10;&#10;            // Forzar el tamaño del stage&#10;            stage.setWidth(650);&#10;            stage.setHeight(500);&#10;            stage.setMinWidth(650);&#10;            stage.setMinHeight(500);&#10;            stage.setResizable(true);&#10;&#10;            GridPane grid = new GridPane();&#10;            grid.setHgap(20);&#10;            grid.setVgap(20);&#10;            grid.setPadding(new Insets(40));&#10;&#10;            // Campos del formulario - HACERLOS MÁS GRANDES&#10;            TextField txtNombreCompleto = new TextField(usuario != null ? usuario.getNombreCompleto() : &quot;&quot;);&#10;            txtNombreCompleto.setPrefWidth(350);&#10;            txtNombreCompleto.setPrefHeight(35);&#10;&#10;            TextField txtUsuario = new TextField(usuario != null ? usuario.getUsuario() : &quot;&quot;);&#10;            txtUsuario.setPrefWidth(350);&#10;            txtUsuario.setPrefHeight(35);&#10;&#10;            TextField txtEmail = new TextField(usuario != null ? usuario.getEmail() : &quot;&quot;);&#10;            txtEmail.setPrefWidth(350);&#10;            txtEmail.setPrefHeight(35);&#10;&#10;            ComboBox&lt;String&gt; cbTipoForm = new ComboBox&lt;&gt;();&#10;            cbTipoForm.getItems().addAll(&quot;admin&quot;, &quot;analista&quot;, &quot;viewer&quot;);&#10;            cbTipoForm.setValue(usuario != null ? usuario.getTipo() : &quot;viewer&quot;);&#10;            cbTipoForm.setPrefWidth(350);&#10;            cbTipoForm.setPrefHeight(35);&#10;&#10;            PasswordField txtPassword = new PasswordField();&#10;            txtPassword.setPromptText(usuario != null ? &quot;Dejar vacío para mantener contraseña actual&quot; : &quot;Contraseña&quot;);&#10;            txtPassword.setPrefWidth(350);&#10;            txtPassword.setPrefHeight(35);&#10;&#10;            // Hacer las etiquetas más grandes&#10;            Label lblNombre = new Label(&quot;Nombre Completo:&quot;);&#10;            lblNombre.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblUsuario = new Label(&quot;Usuario:&quot;);&#10;            lblUsuario.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblEmail = new Label(&quot;Email:&quot;);&#10;            lblEmail.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblTipo = new Label(&quot;Tipo:&quot;);&#10;            lblTipo.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblPassword = new Label(&quot;Contraseña:&quot;);&#10;            lblPassword.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;&#10;            // Agregar campos al grid&#10;            grid.add(lblNombre, 0, 0);&#10;            grid.add(txtNombreCompleto, 1, 0);&#10;            grid.add(lblUsuario, 0, 1);&#10;            grid.add(txtUsuario, 1, 1);&#10;            grid.add(lblEmail, 0, 2);&#10;            grid.add(txtEmail, 1, 2);&#10;            grid.add(lblTipo, 0, 3);&#10;            grid.add(cbTipoForm, 1, 3);&#10;            grid.add(lblPassword, 0, 4);&#10;            grid.add(txtPassword, 1, 4);&#10;&#10;            // Botones más grandes&#10;            HBox buttonBox = new HBox(15);&#10;            Button btnGuardar = new Button(&quot;Guardar&quot;);&#10;            Button btnCancelar = new Button(&quot;Cancelar&quot;);&#10;&#10;            btnGuardar.setPrefWidth(120);&#10;            btnGuardar.setPrefHeight(40);&#10;            btnGuardar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;&#10;            btnCancelar.setPrefWidth(120);&#10;            btnCancelar.setPrefHeight(40);&#10;            btnCancelar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;&#10;            buttonBox.getChildren().addAll(btnGuardar, btnCancelar);&#10;            grid.add(buttonBox, 1, 5);&#10;&#10;            btnGuardar.setOnAction(e -&gt; {&#10;                try {&#10;                    if (txtNombreCompleto.getText().trim().isEmpty()) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El nombre completo es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;                    if (txtUsuario.getText().trim().isEmpty()) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El usuario es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;                    if (txtEmail.getText().trim().isEmpty()) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El email es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    Usuario nuevoUsuario = usuario != null ? usuario : new Usuario();&#10;                    nuevoUsuario.setNombreCompleto(txtNombreCompleto.getText().trim());&#10;                    nuevoUsuario.setUsuario(txtUsuario.getText().trim());&#10;                    nuevoUsuario.setEmail(txtEmail.getText().trim());&#10;                    nuevoUsuario.setTipo(cbTipoForm.getValue());&#10;&#10;                    // Solo cambiar contraseña si se ingresó una nueva&#10;                    if (!txtPassword.getText().trim().isEmpty()) {&#10;                        String hashedPassword = PasswordUtils.hashPassword(txtPassword.getText().trim());&#10;                        nuevoUsuario.setPassword(hashedPassword);&#10;                    }&#10;&#10;                    if (usuario == null) {&#10;                        // Nuevo usuario, la contraseña es obligatoria&#10;                        if (txtPassword.getText().trim().isEmpty()) {&#10;                            mostrarError(&quot;Error&quot;, &quot;La contraseña es obligatoria para nuevos usuarios&quot;);&#10;                            return;&#10;                        }&#10;                        usuarioRepository.save(nuevoUsuario);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario creado correctamente.&quot;);&#10;                    } else {&#10;                        usuarioRepository.update(nuevoUsuario);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario actualizado correctamente.&quot;);&#10;                    }&#10;&#10;                    cargarUsuarios();&#10;                    stage.close();&#10;                } catch (Exception ex) {&#10;                    mostrarError(&quot;Error al guardar usuario&quot;, ex.getMessage());&#10;                }&#10;            });&#10;&#10;            btnCancelar.setOnAction(e -&gt; stage.close());&#10;&#10;            Scene scene = new Scene(grid, 650, 500);&#10;            stage.setScene(scene);&#10;            stage.centerOnScreen();&#10;            stage.showAndWait();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al abrir formulario&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private String getTipoDisplayName(String tipo) {&#10;        switch (tipo.toLowerCase()) {&#10;            case &quot;admin&quot;:&#10;                return &quot;Administrador&quot;;&#10;            case &quot;analista&quot;:&#10;                return &quot;Analista&quot;;&#10;            case &quot;viewer&quot;:&#10;                return &quot;Visualizador&quot;;&#10;            default:&#10;                return tipo;&#10;        }&#10;    }&#10;&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import com.juank.utp.finimpact.utils.PasswordUtils;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.Initializable;&#10;import javafx.geometry.Insets;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.layout.GridPane;&#10;import javafx.scene.layout.HBox;&#10;import javafx.stage.Modality;&#10;import javafx.stage.Stage;&#10;&#10;import java.net.URL;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.ResourceBundle;&#10;&#10;/**&#10; * Controlador para la gestión de usuarios (solo admin)&#10; */&#10;public class UsuarioController implements Initializable {&#10;&#10;    // Componentes de la vista&#10;    @FXML private ComboBox&lt;String&gt; cbTipo;&#10;    @FXML private TextField txtFiltroNombre;&#10;    @FXML private TableView&lt;Usuario&gt; tableUsuarios;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colId;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colNombreCompleto;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colUsuario;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colEmail;&#10;    @FXML private TableColumn&lt;Usuario, String&gt; colTipo;&#10;    @FXML private TableColumn&lt;Usuario, Void&gt; colAcciones;&#10;&#10;    // Repositorio&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    // Lista de datos&#10;    private final ObservableList&lt;Usuario&gt; usuariosList = FXCollections.observableArrayList();&#10;    private final ObservableList&lt;Usuario&gt; usuariosFiltradosList = FXCollections.observableArrayList();&#10;&#10;    @Override&#10;    public void initialize(URL location, ResourceBundle resources) {&#10;        usuarioRepository = new UsuarioRepository();&#10;&#10;        configurarTabla();&#10;        cargarUsuarios();&#10;        configurarFiltros();&#10;        configurarFiltrosAutomaticos();&#10;    }&#10;&#10;    private void configurarTabla() {&#10;        // Configurar columnas&#10;        colId.setCellValueFactory(cellData -&gt; new SimpleStringProperty(String.valueOf(cellData.getValue().getId())));&#10;        colNombreCompleto.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNombreCompleto()));&#10;        colUsuario.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEmail())); // Usando email como usuario&#10;        colEmail.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEmail()));&#10;        colTipo.setCellValueFactory(cellData -&gt; new SimpleStringProperty(getTipoDisplayName(cellData.getValue().getRol())));&#10;&#10;        // Configurar columna de acciones&#10;        colAcciones.setCellFactory(param -&gt; new TableCell&lt;&gt;() {&#10;            private final Button btnEditar = new Button(&quot;Editar&quot;);&#10;            private final Button btnEliminar = new Button(&quot;Eliminar&quot;);&#10;            private final HBox pane = new HBox(8);&#10;&#10;            {&#10;                // Hacer los botones más grandes&#10;                btnEditar.setPrefWidth(80);&#10;                btnEditar.setPrefHeight(35);&#10;                btnEliminar.setPrefWidth(80);&#10;                btnEliminar.setPrefHeight(35);&#10;&#10;                btnEditar.setStyle(&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;                btnEliminar.setStyle(&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 12px; -fx-font-weight: bold;&quot;);&#10;&#10;                pane.getChildren().addAll(btnEditar, btnEliminar);&#10;                pane.setAlignment(javafx.geometry.Pos.CENTER);&#10;&#10;                btnEditar.setOnAction(event -&gt; {&#10;                    Usuario usuario = getTableView().getItems().get(getIndex());&#10;                    editarUsuario(usuario);&#10;                });&#10;&#10;                btnEliminar.setOnAction(event -&gt; {&#10;                    Usuario usuario = getTableView().getItems().get(getIndex());&#10;                    eliminarUsuario(usuario);&#10;                });&#10;            }&#10;&#10;            @Override&#10;            protected void updateItem(Void item, boolean empty) {&#10;                super.updateItem(item, empty);&#10;                setGraphic(empty ? null : pane);&#10;            }&#10;        });&#10;&#10;        tableUsuarios.setItems(usuariosFiltradosList);&#10;    }&#10;&#10;    private void configurarFiltros() {&#10;        cbTipo.setValue(&quot;Todos&quot;);&#10;    }&#10;&#10;    private void configurarFiltrosAutomaticos() {&#10;        // Configurar filtros automáticos&#10;        cbTipo.valueProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;        txtFiltroNombre.textProperty().addListener((observable, oldValue, newValue) -&gt; aplicarFiltros());&#10;    }&#10;&#10;    @FXML&#10;    private void mostrarFormularioUsuario() {&#10;        mostrarFormulario(null);&#10;    }&#10;&#10;    @FXML&#10;    private void aplicarFiltros() {&#10;        String tipoFiltro = cbTipo.getValue();&#10;        String nombreFiltro = txtFiltroNombre.getText().toLowerCase();&#10;&#10;        usuariosFiltradosList.clear();&#10;&#10;        for (Usuario usuario : usuariosList) {&#10;            boolean cumpleTipo = &quot;Todos&quot;.equals(tipoFiltro) || usuario.getRol().equals(tipoFiltro);&#10;            boolean cumpleNombre = nombreFiltro.isEmpty() ||&#10;                    usuario.getNombreCompleto().toLowerCase().contains(nombreFiltro) ||&#10;                    usuario.getEmail().toLowerCase().contains(nombreFiltro);&#10;&#10;            if (cumpleTipo &amp;&amp; cumpleNombre) {&#10;                usuariosFiltradosList.add(usuario);&#10;            }&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void limpiarFiltros() {&#10;        cbTipo.setValue(&quot;Todos&quot;);&#10;        txtFiltroNombre.clear();&#10;        usuariosFiltradosList.setAll(usuariosList);&#10;    }&#10;&#10;    private void cargarUsuarios() {&#10;        try {&#10;            List&lt;Usuario&gt; usuarios = usuarioRepository.findAll();&#10;            usuariosList.setAll(usuarios);&#10;            usuariosFiltradosList.setAll(usuarios);&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al cargar usuarios&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void editarUsuario(Usuario usuario) {&#10;        mostrarFormulario(usuario);&#10;    }&#10;&#10;    private void eliminarUsuario(Usuario usuario) {&#10;        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);&#10;        alert.setTitle(&quot;Confirmar eliminación&quot;);&#10;        alert.setHeaderText(&quot;¿Está seguro de eliminar este usuario?&quot;);&#10;        alert.setContentText(&quot;Esta acción no se puede deshacer.&quot;);&#10;&#10;        Optional&lt;ButtonType&gt; result = alert.showAndWait();&#10;        if (result.isPresent() &amp;&amp; result.get() == ButtonType.OK) {&#10;            try {&#10;                usuarioRepository.delete(usuario.getId());&#10;                cargarUsuarios();&#10;                mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario eliminado correctamente.&quot;);&#10;            } catch (Exception e) {&#10;                mostrarError(&quot;Error al eliminar usuario&quot;, e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void mostrarFormulario(Usuario usuario) {&#10;        try {&#10;            Stage stage = new Stage();&#10;            stage.initModality(Modality.APPLICATION_MODAL);&#10;            stage.setTitle(usuario == null ? &quot;Nuevo Usuario&quot; : &quot;Editar Usuario&quot;);&#10;            &#10;            // Forzar el tamaño del stage&#10;            stage.setWidth(650);&#10;            stage.setHeight(500);&#10;            stage.setMinWidth(650);&#10;            stage.setMinHeight(500);&#10;            stage.setResizable(true);&#10;&#10;            GridPane grid = new GridPane();&#10;            grid.setHgap(20);&#10;            grid.setVgap(20);&#10;            grid.setPadding(new Insets(40));&#10;&#10;            // Campos del formulario - HACERLOS MÁS GRANDES&#10;            TextField txtNombreCompleto = new TextField(usuario != null ? usuario.getNombreCompleto() : &quot;&quot;);&#10;            txtNombreCompleto.setPrefWidth(350);&#10;            txtNombreCompleto.setPrefHeight(35);&#10;            &#10;            TextField txtEmail = new TextField(usuario != null ? usuario.getEmail() : &quot;&quot;);&#10;            txtEmail.setPrefWidth(350);&#10;            txtEmail.setPrefHeight(35);&#10;            &#10;            ComboBox&lt;String&gt; cbRolForm = new ComboBox&lt;&gt;();&#10;            cbRolForm.getItems().addAll(&quot;admin&quot;, &quot;analista&quot;, &quot;viewer&quot;);&#10;            cbRolForm.setValue(usuario != null ? usuario.getRol() : &quot;viewer&quot;);&#10;            cbRolForm.setPrefWidth(350);&#10;            cbRolForm.setPrefHeight(35);&#10;&#10;            PasswordField txtPassword = new PasswordField();&#10;            txtPassword.setPromptText(usuario != null ? &quot;Dejar vacío para mantener contraseña actual&quot; : &quot;Contraseña&quot;);&#10;            txtPassword.setPrefWidth(350);&#10;            txtPassword.setPrefHeight(35);&#10;&#10;            // Hacer las etiquetas más grandes&#10;            Label lblNombre = new Label(&quot;Nombre Completo:&quot;);&#10;            lblNombre.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblEmail = new Label(&quot;Email:&quot;);&#10;            lblEmail.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblRol = new Label(&quot;Rol:&quot;);&#10;            lblRol.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            Label lblPassword = new Label(&quot;Contraseña:&quot;);&#10;            lblPassword.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;&#10;            // Agregar campos al grid&#10;            grid.add(lblNombre, 0, 0);&#10;            grid.add(txtNombreCompleto, 1, 0);&#10;            grid.add(lblEmail, 0, 1);&#10;            grid.add(txtEmail, 1, 1);&#10;            grid.add(lblRol, 0, 2);&#10;            grid.add(cbRolForm, 1, 2);&#10;            grid.add(lblPassword, 0, 3);&#10;            grid.add(txtPassword, 1, 3);&#10;&#10;            // Botones más grandes&#10;            HBox buttonBox = new HBox(15);&#10;            Button btnGuardar = new Button(&quot;Guardar&quot;);&#10;            Button btnCancelar = new Button(&quot;Cancelar&quot;);&#10;            &#10;            btnGuardar.setPrefWidth(120);&#10;            btnGuardar.setPrefHeight(40);&#10;            btnGuardar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            &#10;            btnCancelar.setPrefWidth(120);&#10;            btnCancelar.setPrefHeight(40);&#10;            btnCancelar.setStyle(&quot;-fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;            &#10;            buttonBox.getChildren().addAll(btnGuardar, btnCancelar);&#10;            grid.add(buttonBox, 1, 4);&#10;&#10;            btnGuardar.setOnAction(e -&gt; {&#10;                try {&#10;                    if (txtNombreCompleto.getText().trim().isEmpty()) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El nombre completo es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;                    if (txtEmail.getText().trim().isEmpty()) {&#10;                        mostrarError(&quot;Error&quot;, &quot;El email es obligatorio&quot;);&#10;                        return;&#10;                    }&#10;&#10;                    Usuario nuevoUsuario = usuario != null ? usuario : new Usuario();&#10;                    nuevoUsuario.setNombreCompleto(txtNombreCompleto.getText().trim());&#10;                    nuevoUsuario.setEmail(txtEmail.getText().trim());&#10;                    nuevoUsuario.setRol(cbRolForm.getValue());&#10;                    nuevoUsuario.setEstado(true); // Usuario activo por defecto&#10;&#10;                    // Solo cambiar contraseña si se ingresó una nueva&#10;                    if (!txtPassword.getText().trim().isEmpty()) {&#10;                        String hashedPassword = PasswordUtils.hashPassword(txtPassword.getText().trim());&#10;                        nuevoUsuario.setPassword(hashedPassword);&#10;                    }&#10;&#10;                    if (usuario == null) {&#10;                        // Nuevo usuario, la contraseña es obligatoria&#10;                        if (txtPassword.getText().trim().isEmpty()) {&#10;                            mostrarError(&quot;Error&quot;, &quot;La contraseña es obligatoria para nuevos usuarios&quot;);&#10;                            return;&#10;                        }&#10;                        usuarioRepository.save(nuevoUsuario);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario creado correctamente.&quot;);&#10;                    } else {&#10;                        usuarioRepository.update(nuevoUsuario);&#10;                        mostrarInformacion(&quot;Éxito&quot;, &quot;Usuario actualizado correctamente.&quot;);&#10;                    }&#10;&#10;                    cargarUsuarios();&#10;                    stage.close();&#10;                } catch (Exception ex) {&#10;                    mostrarError(&quot;Error al guardar usuario&quot;, ex.getMessage());&#10;                }&#10;            });&#10;&#10;            btnCancelar.setOnAction(e -&gt; stage.close());&#10;&#10;            Scene scene = new Scene(grid, 650, 500);&#10;            stage.setScene(scene);&#10;            stage.centerOnScreen();&#10;            stage.showAndWait();&#10;&#10;        } catch (Exception e) {&#10;            mostrarError(&quot;Error al abrir formulario&quot;, e.getMessage());&#10;        }&#10;    }&#10;&#10;    private String getTipoDisplayName(String rol) {&#10;        switch (rol.toLowerCase()) {&#10;            case &quot;admin&quot;:&#10;                return &quot;Administrador&quot;;&#10;            case &quot;analista&quot;:&#10;                return &quot;Analista&quot;;&#10;            case &quot;viewer&quot;:&#10;                return &quot;Visualizador&quot;;&#10;            default:&#10;                return rol;&#10;        }&#10;    }&#10;&#10;    private void mostrarError(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.ERROR);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void mostrarInformacion(String titulo, String mensaje) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(mensaje);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Iniciativa.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Iniciativa.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.model;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;&#10;/**&#10; * Modelo que representa una iniciativa empresarial&#10; */&#10;public class Iniciativa {&#10;    private int idIniciativa;&#10;    private String nombre;&#10;    private String descripcion;&#10;    private LocalDate fechaInicio;&#10;    private LocalDate fechaFin;&#10;    private String tipo;&#10;    private String estado; // planeado, en curso, finalizado, cancelado&#10;    private String riesgo; // alto, medio, bajo&#10;    private int idOwner;&#10;    private LocalDateTime fechaRegistro;&#10;&#10;    // Constructor vacío&#10;    public Iniciativa() {}&#10;&#10;    // Constructor completo&#10;    public Iniciativa(int idIniciativa, String nombre, String descripcion, LocalDate fechaInicio,&#10;                     LocalDate fechaFin, String tipo, String estado, String riesgo, int idOwner,&#10;                     LocalDateTime fechaRegistro) {&#10;        this.idIniciativa = idIniciativa;&#10;        this.nombre = nombre;&#10;        this.descripcion = descripcion;&#10;        this.fechaInicio = fechaInicio;&#10;        this.fechaFin = fechaFin;&#10;        this.tipo = tipo;&#10;        this.estado = estado;&#10;        this.riesgo = riesgo;&#10;        this.idOwner = idOwner;&#10;        this.fechaRegistro = fechaRegistro;&#10;    }&#10;&#10;    // Constructor sin ID (para inserción)&#10;    public Iniciativa(String nombre, String descripcion, LocalDate fechaInicio, LocalDate fechaFin,&#10;                     String tipo, String estado, String riesgo, int idOwner) {&#10;        this.nombre = nombre;&#10;        this.descripcion = descripcion;&#10;        this.fechaInicio = fechaInicio;&#10;        this.fechaFin = fechaFin;&#10;        this.tipo = tipo;&#10;        this.estado = estado;&#10;        this.riesgo = riesgo;&#10;        this.idOwner = idOwner;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getIdIniciativa() {&#10;        return idIniciativa;&#10;    }&#10;&#10;    public void setIdIniciativa(int idIniciativa) {&#10;        this.idIniciativa = idIniciativa;&#10;    }&#10;&#10;    public String getNombre() {&#10;        return nombre;&#10;    }&#10;&#10;    public void setNombre(String nombre) {&#10;        this.nombre = nombre;&#10;    }&#10;&#10;    public String getDescripcion() {&#10;        return descripcion;&#10;    }&#10;&#10;    public void setDescripcion(String descripcion) {&#10;        this.descripcion = descripcion;&#10;    }&#10;&#10;    public LocalDate getFechaInicio() {&#10;        return fechaInicio;&#10;    }&#10;&#10;    public void setFechaInicio(LocalDate fechaInicio) {&#10;        this.fechaInicio = fechaInicio;&#10;    }&#10;&#10;    public LocalDate getFechaFin() {&#10;        return fechaFin;&#10;    }&#10;&#10;    public void setFechaFin(LocalDate fechaFin) {&#10;        this.fechaFin = fechaFin;&#10;    }&#10;&#10;    public String getTipo() {&#10;        return tipo;&#10;    }&#10;&#10;    public void setTipo(String tipo) {&#10;        this.tipo = tipo;&#10;    }&#10;&#10;    public String getEstado() {&#10;        return estado;&#10;    }&#10;&#10;    public void setEstado(String estado) {&#10;        this.estado = estado;&#10;    }&#10;&#10;    public String getRiesgo() {&#10;        return riesgo;&#10;    }&#10;&#10;    public void setRiesgo(String riesgo) {&#10;        this.riesgo = riesgo;&#10;    }&#10;&#10;    public int getIdOwner() {&#10;        return idOwner;&#10;    }&#10;&#10;    public void setIdOwner(int idOwner) {&#10;        this.idOwner = idOwner;&#10;    }&#10;&#10;    public LocalDateTime getFechaRegistro() {&#10;        return fechaRegistro;&#10;    }&#10;&#10;    public void setFechaRegistro(LocalDateTime fechaRegistro) {&#10;        this.fechaRegistro = fechaRegistro;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Iniciativa{&quot; +&#10;                &quot;idIniciativa=&quot; + idIniciativa +&#10;                &quot;, nombre='&quot; + nombre + '\'' +&#10;                &quot;, descripcion='&quot; + descripcion + '\'' +&#10;                &quot;, fechaInicio=&quot; + fechaInicio +&#10;                &quot;, fechaFin=&quot; + fechaFin +&#10;                &quot;, tipo='&quot; + tipo + '\'' +&#10;                &quot;, estado='&quot; + estado + '\'' +&#10;                &quot;, riesgo='&quot; + riesgo + '\'' +&#10;                &quot;, idOwner=&quot; + idOwner +&#10;                &quot;, fechaRegistro=&quot; + fechaRegistro +&#10;                '}';&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.model;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;&#10;/**&#10; * Modelo que representa una iniciativa empresarial&#10; */&#10;public class Iniciativa {&#10;    private int idIniciativa;&#10;    private String nombre;&#10;    private String descripcion;&#10;    private LocalDate fechaInicio;&#10;    private LocalDate fechaFin;&#10;    private String tipo;&#10;    private String estado; // planeado, en curso, finalizado, cancelado&#10;    private String riesgo; // alto, medio, bajo&#10;    private int idOwner;&#10;    private LocalDateTime fechaRegistro;&#10;&#10;    // Constructor vacío&#10;    public Iniciativa() {}&#10;&#10;    // Constructor completo&#10;    public Iniciativa(int idIniciativa, String nombre, String descripcion, LocalDate fechaInicio,&#10;                     LocalDate fechaFin, String tipo, String estado, String riesgo, int idOwner,&#10;                     LocalDateTime fechaRegistro) {&#10;        this.idIniciativa = idIniciativa;&#10;        this.nombre = nombre;&#10;        this.descripcion = descripcion;&#10;        this.fechaInicio = fechaInicio;&#10;        this.fechaFin = fechaFin;&#10;        this.tipo = tipo;&#10;        this.estado = estado;&#10;        this.riesgo = riesgo;&#10;        this.idOwner = idOwner;&#10;        this.fechaRegistro = fechaRegistro;&#10;    }&#10;&#10;    // Constructor sin ID (para inserción)&#10;    public Iniciativa(String nombre, String descripcion, LocalDate fechaInicio, LocalDate fechaFin,&#10;                     String tipo, String estado, String riesgo, int idOwner) {&#10;        this.nombre = nombre;&#10;        this.descripcion = descripcion;&#10;        this.fechaInicio = fechaInicio;&#10;        this.fechaFin = fechaFin;&#10;        this.tipo = tipo;&#10;        this.estado = estado;&#10;        this.riesgo = riesgo;&#10;        this.idOwner = idOwner;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getId() {&#10;        return idIniciativa;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.idIniciativa = id;&#10;    }&#10;&#10;    public int getIdIniciativa() {&#10;        return idIniciativa;&#10;    }&#10;&#10;    public void setIdIniciativa(int idIniciativa) {&#10;        this.idIniciativa = idIniciativa;&#10;    }&#10;&#10;    public String getNombre() {&#10;        return nombre;&#10;    }&#10;&#10;    public void setNombre(String nombre) {&#10;        this.nombre = nombre;&#10;    }&#10;&#10;    public String getDescripcion() {&#10;        return descripcion;&#10;    }&#10;&#10;    public void setDescripcion(String descripcion) {&#10;        this.descripcion = descripcion;&#10;    }&#10;&#10;    public LocalDate getFechaInicio() {&#10;        return fechaInicio;&#10;    }&#10;&#10;    public void setFechaInicio(LocalDate fechaInicio) {&#10;        this.fechaInicio = fechaInicio;&#10;    }&#10;&#10;    public LocalDate getFechaFin() {&#10;        return fechaFin;&#10;    }&#10;&#10;    public void setFechaFin(LocalDate fechaFin) {&#10;        this.fechaFin = fechaFin;&#10;    }&#10;&#10;    public String getTipo() {&#10;        return tipo;&#10;    }&#10;&#10;    public void setTipo(String tipo) {&#10;        this.tipo = tipo;&#10;    }&#10;&#10;    public String getEstado() {&#10;        return estado;&#10;    }&#10;&#10;    public void setEstado(String estado) {&#10;        this.estado = estado;&#10;    }&#10;&#10;    public String getRiesgo() {&#10;        return riesgo;&#10;    }&#10;&#10;    public void setRiesgo(String riesgo) {&#10;        this.riesgo = riesgo;&#10;    }&#10;&#10;    public int getUsuarioId() {&#10;        return idOwner;&#10;    }&#10;&#10;    public void setUsuarioId(int usuarioId) {&#10;        this.idOwner = usuarioId;&#10;    }&#10;&#10;    public int getIdOwner() {&#10;        return idOwner;&#10;    }&#10;&#10;    public void setIdOwner(int idOwner) {&#10;        this.idOwner = idOwner;&#10;    }&#10;&#10;    public LocalDateTime getFechaRegistro() {&#10;        return fechaRegistro;&#10;    }&#10;&#10;    public void setFechaRegistro(LocalDateTime fechaRegistro) {&#10;        this.fechaRegistro = fechaRegistro;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return nombre;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Usuario.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Usuario.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.model;&#10;&#10;/**&#10; * Modelo que representa un usuario del sistema&#10; */&#10;public class Usuario {&#10;    private int idUsuario;&#10;    private String nombreCompleto;&#10;    private String email;&#10;    private String password; // Hash de la contraseña&#10;    private String rol; // admin, analista, viewer&#10;    private boolean estado; // true = activo, false = inactivo&#10;&#10;    // Constructor vacío&#10;    public Usuario() {}&#10;&#10;    // Constructor completo&#10;    public Usuario(int idUsuario, String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.idUsuario = idUsuario;&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Constructor sin ID (para inserción)&#10;    public Usuario(String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getIdUsuario() {&#10;        return idUsuario;&#10;    }&#10;&#10;    public void setIdUsuario(int idUsuario) {&#10;        this.idUsuario = idUsuario;&#10;    }&#10;&#10;    public String getNombreCompleto() {&#10;        return nombreCompleto;&#10;    }&#10;&#10;    public void setNombreCompleto(String nombreCompleto) {&#10;        this.nombreCompleto = nombreCompleto;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getRol() {&#10;        return rol;&#10;    }&#10;&#10;    public void setRol(String rol) {&#10;        this.rol = rol;&#10;    }&#10;&#10;    public boolean isEstado() {&#10;        return estado;&#10;    }&#10;&#10;    public void setEstado(boolean estado) {&#10;        this.estado = estado;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Usuario{&quot; +&#10;                &quot;idUsuario=&quot; + idUsuario +&#10;                &quot;, nombreCompleto='&quot; + nombreCompleto + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                &quot;, rol='&quot; + rol + '\'' +&#10;                &quot;, estado=&quot; + estado +&#10;                '}';&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.model;&#10;&#10;/**&#10; * Modelo que representa un usuario del sistema&#10; */&#10;public class Usuario {&#10;    private int idUsuario;&#10;    private String nombreCompleto;&#10;    private String email;&#10;    private String password; // Hash de la contraseña&#10;    private String rol; // admin, analista, viewer&#10;    private boolean estado; // true = activo, false = inactivo&#10;&#10;    // Constructor vacío&#10;    public Usuario() {}&#10;&#10;    // Constructor completo&#10;    public Usuario(int idUsuario, String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.idUsuario = idUsuario;&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Constructor sin ID (para inserción)&#10;    public Usuario(String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getId() {&#10;        return idUsuario;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.idUsuario = id;&#10;    }&#10;&#10;    public int getIdUsuario() {&#10;        return idUsuario;&#10;    }&#10;&#10;    public void setIdUsuario(int idUsuario) {&#10;        this.idUsuario = idUsuario;&#10;    }&#10;&#10;    public String getNombreCompleto() {&#10;        return nombreCompleto;&#10;    }&#10;&#10;    public void setNombreCompleto(String nombreCompleto) {&#10;        this.nombreCompleto = nombreCompleto;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getRol() {&#10;        return rol;&#10;    }&#10;&#10;    public void setRol(String rol) {&#10;        this.rol = rol;&#10;    }&#10;&#10;    public boolean isEstado() {&#10;        return estado;&#10;    }&#10;&#10;    public void setEstado(boolean estado) {&#10;        this.estado = estado;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return nombreCompleto;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/ImpactoRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/ImpactoRepository.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.repository;&#10;&#10;import com.juank.utp.finimpact.model.Impacto;&#10;import com.juank.utp.finimpact.utils.DatabaseConfig;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;import java.time.LocalDate;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repositorio para operaciones CRUD de impactos financieros&#10; */&#10;public class ImpactoRepository {&#10;&#10;    /**&#10;     * Obtiene todos los impactos&#10;     */&#10;    public List&lt;Impacto&gt; findAll() {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos ORDER BY fecha_creacion DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Busca un impacto por ID&#10;     */&#10;    public Optional&lt;Impacto&gt; findById(int id) {&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE id_impacto = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                return Optional.of(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar impacto por ID: &quot; + e.getMessage());&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por iniciativa&#10;     */&#10;    public List&lt;Impacto&gt; findByIniciativa(int idIniciativa) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE id_iniciativa = ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idIniciativa);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por tipo de impacto&#10;     */&#10;    public List&lt;Impacto&gt; findByTipoImpacto(String tipoImpacto) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE tipo_impacto = ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, tipoImpacto);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por tipo: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por atributo (Planeado, Estimado, Real)&#10;     */&#10;    public List&lt;Impacto&gt; findByAtributoImpacto(String atributoImpacto) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE atributo_impacto = ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, atributoImpacto);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por atributo: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por rango de fechas&#10;     */&#10;    public List&lt;Impacto&gt; findByFechaRange(LocalDate fechaInicio, LocalDate fechaFin) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE fecha_impacto BETWEEN ? AND ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setDate(1, Date.valueOf(fechaInicio));&#10;            stmt.setDate(2, Date.valueOf(fechaFin));&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por rango de fechas: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos con filtros múltiples&#10;     */&#10;    public List&lt;Impacto&gt; findByFilters(String tipoImpacto, String atributoImpacto, Integer idIniciativa, LocalDate fechaInicio, LocalDate fechaFin) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE 1=1&quot;);&#10;        List&lt;Object&gt; parameters = new ArrayList&lt;&gt;();&#10;&#10;        if (tipoImpacto != null &amp;&amp; !tipoImpacto.isEmpty()) {&#10;            sql.append(&quot; AND tipo_impacto = ?&quot;);&#10;            parameters.add(tipoImpacto);&#10;        }&#10;&#10;        if (atributoImpacto != null &amp;&amp; !atributoImpacto.isEmpty()) {&#10;            sql.append(&quot; AND atributo_impacto = ?&quot;);&#10;            parameters.add(atributoImpacto);&#10;        }&#10;&#10;        if (idIniciativa != null) {&#10;            sql.append(&quot; AND id_iniciativa = ?&quot;);&#10;            parameters.add(idIniciativa);&#10;        }&#10;&#10;        if (fechaInicio != null) {&#10;            sql.append(&quot; AND fecha_impacto &gt;= ?&quot;);&#10;            parameters.add(Date.valueOf(fechaInicio));&#10;        }&#10;&#10;        if (fechaFin != null) {&#10;            sql.append(&quot; AND fecha_impacto &lt;= ?&quot;);&#10;            parameters.add(Date.valueOf(fechaFin));&#10;        }&#10;&#10;        sql.append(&quot; ORDER BY fecha_impacto DESC&quot;);&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql.toString())) {&#10;&#10;            for (int i = 0; i &lt; parameters.size(); i++) {&#10;                stmt.setObject(i + 1, parameters.get(i));&#10;            }&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por filtros: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Crea un nuevo impacto&#10;     */&#10;    public boolean save(Impacto impacto) {&#10;        String sql = &quot;INSERT INTO impactos (id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto) VALUES (?, ?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;&#10;            stmt.setInt(1, impacto.getIdIniciativa());&#10;            stmt.setDate(2, Date.valueOf(impacto.getFechaCreacion()));&#10;            stmt.setString(3, impacto.getTipoImpacto());&#10;            stmt.setInt(4, impacto.getMultiplicador());&#10;            stmt.setString(5, impacto.getAtributoImpacto());&#10;            stmt.setDate(6, Date.valueOf(impacto.getFechaImpacto()));&#10;            stmt.setBigDecimal(7, impacto.getImpacto());&#10;&#10;            int rowsAffected = stmt.executeUpdate();&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                ResultSet rs = stmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    impacto.setIdImpacto(rs.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al crear impacto: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza un impacto existente&#10;     */&#10;    public boolean update(Impacto impacto) {&#10;        String sql = &quot;UPDATE impactos SET id_iniciativa = ?, fecha_creacion = ?, tipo_impacto = ?, multiplicador = ?, atributo_impacto = ?, fecha_impacto = ?, impacto = ? WHERE id_impacto = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, impacto.getIdIniciativa());&#10;            stmt.setDate(2, Date.valueOf(impacto.getFechaCreacion()));&#10;            stmt.setString(3, impacto.getTipoImpacto());&#10;            stmt.setInt(4, impacto.getMultiplicador());&#10;            stmt.setString(5, impacto.getAtributoImpacto());&#10;            stmt.setDate(6, Date.valueOf(impacto.getFechaImpacto()));&#10;            stmt.setBigDecimal(7, impacto.getImpacto());&#10;            stmt.setInt(8, impacto.getIdImpacto());&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar impacto: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Elimina un impacto&#10;     */&#10;    public boolean delete(int idImpacto) {&#10;        String sql = &quot;DELETE FROM impactos WHERE id_impacto = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idImpacto);&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al eliminar impacto: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Calcula la suma de impactos por atributo en un rango de fechas&#10;     */&#10;    public BigDecimal sumImpactosByAtributoAndFecha(String atributoImpacto, LocalDate fechaInicio, LocalDate fechaFin) {&#10;        String sql = &quot;SELECT COALESCE(SUM(impacto * multiplicador), 0) FROM impactos WHERE atributo_impacto = ? AND fecha_impacto BETWEEN ? AND ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, atributoImpacto);&#10;            stmt.setDate(2, Date.valueOf(fechaInicio));&#10;            stmt.setDate(3, Date.valueOf(fechaFin));&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                return rs.getBigDecimal(1);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al calcular suma de impactos: &quot; + e.getMessage());&#10;        }&#10;&#10;        return BigDecimal.ZERO;&#10;    }&#10;&#10;    /**&#10;     * Obtiene estadísticas de impactos por tipo&#10;     */&#10;    public List&lt;Object[]&gt; getEstadisticasPorTipo() {&#10;        List&lt;Object[]&gt; estadisticas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT tipo_impacto, COUNT(*) as cantidad, SUM(impacto * multiplicador) as total FROM impactos GROUP BY tipo_impacto ORDER BY total DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Object[] fila = new Object[3];&#10;                fila[0] = rs.getString(&quot;tipo_impacto&quot;);&#10;                fila[1] = rs.getInt(&quot;cantidad&quot;);&#10;                fila[2] = rs.getBigDecimal(&quot;total&quot;);&#10;                estadisticas.add(fila);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener estadísticas por tipo: &quot; + e.getMessage());&#10;        }&#10;&#10;        return estadisticas;&#10;    }&#10;&#10;    /**&#10;     * Método auxiliar para crear un objeto Impacto desde ResultSet&#10;     */&#10;    private Impacto createImpactoFromResultSet(ResultSet rs) throws SQLException {&#10;        Impacto impacto = new Impacto();&#10;        impacto.setIdImpacto(rs.getInt(&quot;id_impacto&quot;));&#10;        impacto.setIdIniciativa(rs.getInt(&quot;id_iniciativa&quot;));&#10;        impacto.setFechaCreacion(rs.getDate(&quot;fecha_creacion&quot;).toLocalDate());&#10;        impacto.setTipoImpacto(rs.getString(&quot;tipo_impacto&quot;));&#10;        impacto.setMultiplicador(rs.getInt(&quot;multiplicador&quot;));&#10;        impacto.setAtributoImpacto(rs.getString(&quot;atributo_impacto&quot;));&#10;        impacto.setFechaImpacto(rs.getDate(&quot;fecha_impacto&quot;).toLocalDate());&#10;        impacto.setImpacto(rs.getBigDecimal(&quot;impacto&quot;));&#10;&#10;        return impacto;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.repository;&#10;&#10;import com.juank.utp.finimpact.model.Impacto;&#10;import com.juank.utp.finimpact.utils.DatabaseConfig;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;import java.time.LocalDate;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repositorio para operaciones CRUD de impactos financieros&#10; */&#10;public class ImpactoRepository {&#10;&#10;    /**&#10;     * Obtiene todos los impactos&#10;     */&#10;    public List&lt;Impacto&gt; findAll() {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos ORDER BY fecha_creacion DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Busca un impacto por ID&#10;     */&#10;    public Optional&lt;Impacto&gt; findById(int id) {&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE id_impacto = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                return Optional.of(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar impacto por ID: &quot; + e.getMessage());&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por iniciativa&#10;     */&#10;    public List&lt;Impacto&gt; findByIniciativa(int idIniciativa) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE id_iniciativa = ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idIniciativa);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por tipo de impacto&#10;     */&#10;    public List&lt;Impacto&gt; findByTipoImpacto(String tipoImpacto) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE tipo_impacto = ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, tipoImpacto);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por tipo: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por atributo (Planeado, Estimado, Real)&#10;     */&#10;    public List&lt;Impacto&gt; findByAtributoImpacto(String atributoImpacto) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE atributo_impacto = ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, atributoImpacto);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por atributo: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por rango de fechas&#10;     */&#10;    public List&lt;Impacto&gt; findByFechaRange(LocalDate fechaInicio, LocalDate fechaFin) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE fecha_impacto BETWEEN ? AND ? ORDER BY fecha_impacto DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setDate(1, Date.valueOf(fechaInicio));&#10;            stmt.setDate(2, Date.valueOf(fechaFin));&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por rango de fechas: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos con filtros múltiples&#10;     */&#10;    public List&lt;Impacto&gt; findByFilters(String tipoImpacto, String atributoImpacto, Integer idIniciativa, LocalDate fechaInicio, LocalDate fechaFin) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE 1=1&quot;);&#10;        List&lt;Object&gt; parameters = new ArrayList&lt;&gt;();&#10;&#10;        if (tipoImpacto != null &amp;&amp; !tipoImpacto.isEmpty()) {&#10;            sql.append(&quot; AND tipo_impacto = ?&quot;);&#10;            parameters.add(tipoImpacto);&#10;        }&#10;&#10;        if (atributoImpacto != null &amp;&amp; !atributoImpacto.isEmpty()) {&#10;            sql.append(&quot; AND atributo_impacto = ?&quot;);&#10;            parameters.add(atributoImpacto);&#10;        }&#10;&#10;        if (idIniciativa != null) {&#10;            sql.append(&quot; AND id_iniciativa = ?&quot;);&#10;            parameters.add(idIniciativa);&#10;        }&#10;&#10;        if (fechaInicio != null) {&#10;            sql.append(&quot; AND fecha_impacto &gt;= ?&quot;);&#10;            parameters.add(Date.valueOf(fechaInicio));&#10;        }&#10;&#10;        if (fechaFin != null) {&#10;            sql.append(&quot; AND fecha_impacto &lt;= ?&quot;);&#10;            parameters.add(Date.valueOf(fechaFin));&#10;        }&#10;&#10;        sql.append(&quot; ORDER BY fecha_impacto DESC&quot;);&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql.toString())) {&#10;&#10;            for (int i = 0; i &lt; parameters.size(); i++) {&#10;                stmt.setObject(i + 1, parameters.get(i));&#10;            }&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por filtros: &quot; + e.getMessage());&#10;        }&#10;&#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Crea un nuevo impacto&#10;     */&#10;    public boolean save(Impacto impacto) {&#10;        String sql = &quot;INSERT INTO impactos (id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto) VALUES (?, ?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;&#10;            stmt.setInt(1, impacto.getIdIniciativa());&#10;            stmt.setDate(2, Date.valueOf(impacto.getFechaCreacion()));&#10;            stmt.setString(3, impacto.getTipoImpacto());&#10;            stmt.setInt(4, impacto.getMultiplicador());&#10;            stmt.setString(5, impacto.getAtributoImpacto());&#10;            stmt.setDate(6, Date.valueOf(impacto.getFechaImpacto()));&#10;            stmt.setBigDecimal(7, impacto.getImpacto());&#10;&#10;            int rowsAffected = stmt.executeUpdate();&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                ResultSet rs = stmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    impacto.setIdImpacto(rs.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al crear impacto: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza un impacto existente&#10;     */&#10;    public boolean update(Impacto impacto) {&#10;        String sql = &quot;UPDATE impactos SET id_iniciativa = ?, fecha_creacion = ?, tipo_impacto = ?, multiplicador = ?, atributo_impacto = ?, fecha_impacto = ?, impacto = ? WHERE id_impacto = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, impacto.getIdIniciativa());&#10;            stmt.setDate(2, Date.valueOf(impacto.getFechaCreacion()));&#10;            stmt.setString(3, impacto.getTipoImpacto());&#10;            stmt.setInt(4, impacto.getMultiplicador());&#10;            stmt.setString(5, impacto.getAtributoImpacto());&#10;            stmt.setDate(6, Date.valueOf(impacto.getFechaImpacto()));&#10;            stmt.setBigDecimal(7, impacto.getImpacto());&#10;            stmt.setInt(8, impacto.getIdImpacto());&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar impacto: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Elimina un impacto&#10;     */&#10;    public boolean delete(int idImpacto) {&#10;        String sql = &quot;DELETE FROM impactos WHERE id_impacto = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idImpacto);&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al eliminar impacto: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Calcula la suma de impactos por atributo en un rango de fechas&#10;     */&#10;    public BigDecimal sumImpactosByAtributoAndFecha(String atributoImpacto, LocalDate fechaInicio, LocalDate fechaFin) {&#10;        String sql = &quot;SELECT COALESCE(SUM(impacto * multiplicador), 0) FROM impactos WHERE atributo_impacto = ? AND fecha_impacto BETWEEN ? AND ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, atributoImpacto);&#10;            stmt.setDate(2, Date.valueOf(fechaInicio));&#10;            stmt.setDate(3, Date.valueOf(fechaFin));&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                return rs.getBigDecimal(1);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al calcular suma de impactos: &quot; + e.getMessage());&#10;        }&#10;&#10;        return BigDecimal.ZERO;&#10;    }&#10;&#10;    /**&#10;     * Obtiene estadísticas de impactos por tipo&#10;     */&#10;    public List&lt;Object[]&gt; getEstadisticasPorTipo() {&#10;        List&lt;Object[]&gt; estadisticas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT tipo_impacto, COUNT(*) as cantidad, SUM(impacto * multiplicador) as total FROM impactos GROUP BY tipo_impacto ORDER BY total DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Object[] fila = new Object[3];&#10;                fila[0] = rs.getString(&quot;tipo_impacto&quot;);&#10;                fila[1] = rs.getInt(&quot;cantidad&quot;);&#10;                fila[2] = rs.getBigDecimal(&quot;total&quot;);&#10;                estadisticas.add(fila);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener estadísticas por tipo: &quot; + e.getMessage());&#10;        }&#10;&#10;        return estadisticas;&#10;    }&#10;&#10;    /**&#10;     * Suma de impactos planeados del mes actual&#10;     */&#10;    public BigDecimal getSumaImpactosPlaneadosMesActual() {&#10;        String sql = &quot;SELECT COALESCE(SUM(impacto * multiplicador), 0) FROM impactos &quot; +&#10;                    &quot;WHERE atributo_impacto = 'Planeado' &quot; +&#10;                    &quot;AND YEAR(fecha_impacto) = YEAR(GETDATE()) &quot; +&#10;                    &quot;AND MONTH(fecha_impacto) = MONTH(GETDATE())&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            if (rs.next()) {&#10;                return rs.getBigDecimal(1);&#10;            }&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener suma de impactos planeados del mes: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return BigDecimal.ZERO;&#10;    }&#10;&#10;    /**&#10;     * Suma de impactos reales del mes actual&#10;     */&#10;    public BigDecimal getSumaImpactosRealesMesActual() {&#10;        String sql = &quot;SELECT COALESCE(SUM(impacto * multiplicador), 0) FROM impactos &quot; +&#10;                    &quot;WHERE atributo_impacto = 'Real' &quot; +&#10;                    &quot;AND YEAR(fecha_impacto) = YEAR(GETDATE()) &quot; +&#10;                    &quot;AND MONTH(fecha_impacto) = MONTH(GETDATE())&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            if (rs.next()) {&#10;                return rs.getBigDecimal(1);&#10;            }&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener suma de impactos reales del mes: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return BigDecimal.ZERO;&#10;    }&#10;&#10;    /**&#10;     * Obtiene la distribución de impactos por tipo para gráfico de pastel&#10;     */&#10;    public List&lt;Object[]&gt; getDistribucionPorTipo() {&#10;        List&lt;Object[]&gt; distribucion = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT tipo_impacto, SUM(impacto * multiplicador) as total &quot; +&#10;                    &quot;FROM impactos &quot; +&#10;                    &quot;GROUP BY tipo_impacto &quot; +&#10;                    &quot;ORDER BY total DESC&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                String tipo = rs.getString(&quot;tipo_impacto&quot;);&#10;                BigDecimal total = rs.getBigDecimal(&quot;total&quot;);&#10;                distribucion.add(new Object[]{tipo, total});&#10;            }&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener distribución por tipo: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return distribucion;&#10;    }&#10;&#10;    /**&#10;     * Obtiene datos de comparación planeado vs real por mes para gráfico de barras&#10;     */&#10;    public List&lt;Object[]&gt; getComparacionPlaneadoVsReal() {&#10;        List&lt;Object[]&gt; comparacion = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT &quot; +&#10;                    &quot;YEAR(fecha_impacto) as año, &quot; +&#10;                    &quot;MONTH(fecha_impacto) as mes, &quot; +&#10;                    &quot;atributo_impacto, &quot; +&#10;                    &quot;SUM(impacto * multiplicador) as total &quot; +&#10;                    &quot;FROM impactos &quot; +&#10;                    &quot;WHERE atributo_impacto IN ('Planeado', 'Real') &quot; +&#10;                    &quot;AND fecha_impacto &gt;= DATEADD(month, -6, GETDATE()) &quot; +&#10;                    &quot;GROUP BY YEAR(fecha_impacto), MONTH(fecha_impacto), atributo_impacto &quot; +&#10;                    &quot;ORDER BY año, mes, atributo_impacto&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                int año = rs.getInt(&quot;año&quot;);&#10;                int mes = rs.getInt(&quot;mes&quot;);&#10;                String atributo = rs.getString(&quot;atributo_impacto&quot;);&#10;                BigDecimal total = rs.getBigDecimal(&quot;total&quot;);&#10;                comparacion.add(new Object[]{año, mes, atributo, total});&#10;            }&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener comparación planeado vs real: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return comparacion;&#10;    }&#10;&#10;    /**&#10;     * Método auxiliar para crear un objeto Impacto desde ResultSet&#10;     */&#10;    private Impacto createImpactoFromResultSet(ResultSet rs) throws SQLException {&#10;        Impacto impacto = new Impacto();&#10;        impacto.setIdImpacto(rs.getInt(&quot;id_impacto&quot;));&#10;        impacto.setIdIniciativa(rs.getInt(&quot;id_iniciativa&quot;));&#10;        impacto.setFechaCreacion(rs.getDate(&quot;fecha_creacion&quot;).toLocalDate());&#10;        impacto.setTipoImpacto(rs.getString(&quot;tipo_impacto&quot;));&#10;        impacto.setMultiplicador(rs.getInt(&quot;multiplicador&quot;));&#10;        impacto.setAtributoImpacto(rs.getString(&quot;atributo_impacto&quot;));&#10;        impacto.setFechaImpacto(rs.getDate(&quot;fecha_impacto&quot;).toLocalDate());&#10;        impacto.setImpacto(rs.getBigDecimal(&quot;impacto&quot;));&#10;&#10;        return impacto;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/IniciativaRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/IniciativaRepository.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact.repository;&#10;&#10;import com.juank.utp.finimpact.model.Iniciativa;&#10;import com.juank.utp.finimpact.utils.DatabaseConfig;&#10;&#10;import java.sql.*;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repositorio para operaciones CRUD de iniciativas&#10; */&#10;public class IniciativaRepository {&#10;&#10;    /**&#10;     * Obtiene todas las iniciativas&#10;     */&#10;    public List&lt;Iniciativa&gt; findAll() {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas ORDER BY fecha_registro DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Busca una iniciativa por ID&#10;     */&#10;    public Optional&lt;Iniciativa&gt; findById(int id) {&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE id_iniciativa = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                return Optional.of(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar iniciativa por ID: &quot; + e.getMessage());&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por owner&#10;     */&#10;    public List&lt;Iniciativa&gt; findByOwner(int idOwner) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE id_owner = ? ORDER BY fecha_registro DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idOwner);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por owner: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por estado&#10;     */&#10;    public List&lt;Iniciativa&gt; findByEstado(String estado) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE estado = ? ORDER BY fecha_registro DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, estado);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por estado: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por múltiples filtros&#10;     */&#10;    public List&lt;Iniciativa&gt; findByFilters(String estado, String tipo, String riesgo, Integer idOwner) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE 1=1&quot;);&#10;        List&lt;Object&gt; parameters = new ArrayList&lt;&gt;();&#10;&#10;        if (estado != null &amp;&amp; !estado.isEmpty()) {&#10;            sql.append(&quot; AND estado = ?&quot;);&#10;            parameters.add(estado);&#10;        }&#10;&#10;        if (tipo != null &amp;&amp; !tipo.isEmpty()) {&#10;            sql.append(&quot; AND tipo = ?&quot;);&#10;            parameters.add(tipo);&#10;        }&#10;&#10;        if (riesgo != null &amp;&amp; !riesgo.isEmpty()) {&#10;            sql.append(&quot; AND riesgo = ?&quot;);&#10;            parameters.add(riesgo);&#10;        }&#10;&#10;        if (idOwner != null) {&#10;            sql.append(&quot; AND id_owner = ?&quot;);&#10;            parameters.add(idOwner);&#10;        }&#10;&#10;        sql.append(&quot; ORDER BY fecha_registro DESC&quot;);&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql.toString())) {&#10;&#10;            for (int i = 0; i &lt; parameters.size(); i++) {&#10;                stmt.setObject(i + 1, parameters.get(i));&#10;            }&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por filtros: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Crea una nueva iniciativa&#10;     */&#10;    public boolean save(Iniciativa iniciativa) {&#10;        String sql = &quot;INSERT INTO iniciativas (nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;&#10;            stmt.setString(1, iniciativa.getNombre());&#10;            stmt.setString(2, iniciativa.getDescripcion());&#10;            stmt.setDate(3, iniciativa.getFechaInicio() != null ? Date.valueOf(iniciativa.getFechaInicio()) : null);&#10;            stmt.setDate(4, iniciativa.getFechaFin() != null ? Date.valueOf(iniciativa.getFechaFin()) : null);&#10;            stmt.setString(5, iniciativa.getTipo());&#10;            stmt.setString(6, iniciativa.getEstado());&#10;            stmt.setString(7, iniciativa.getRiesgo());&#10;            stmt.setInt(8, iniciativa.getIdOwner());&#10;&#10;            int rowsAffected = stmt.executeUpdate();&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                ResultSet rs = stmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    iniciativa.setIdIniciativa(rs.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al crear iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza una iniciativa existente&#10;     */&#10;    public boolean update(Iniciativa iniciativa) {&#10;        String sql = &quot;UPDATE iniciativas SET nombre = ?, descripcion = ?, fecha_inicio = ?, fecha_fin = ?, tipo = ?, estado = ?, riesgo = ?, id_owner = ? WHERE id_iniciativa = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, iniciativa.getNombre());&#10;            stmt.setString(2, iniciativa.getDescripcion());&#10;            stmt.setDate(3, iniciativa.getFechaInicio() != null ? Date.valueOf(iniciativa.getFechaInicio()) : null);&#10;            stmt.setDate(4, iniciativa.getFechaFin() != null ? Date.valueOf(iniciativa.getFechaFin()) : null);&#10;            stmt.setString(5, iniciativa.getTipo());&#10;            stmt.setString(6, iniciativa.getEstado());&#10;            stmt.setString(7, iniciativa.getRiesgo());&#10;            stmt.setInt(8, iniciativa.getIdOwner());&#10;            stmt.setInt(9, iniciativa.getIdIniciativa());&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Elimina una iniciativa&#10;     */&#10;    public boolean delete(int idIniciativa) {&#10;        String sql = &quot;DELETE FROM iniciativas WHERE id_iniciativa = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idIniciativa);&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al eliminar iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Cuenta iniciativas activas&#10;     */&#10;    public int countIniciativasActivas() {&#10;        String sql = &quot;SELECT COUNT(*) FROM iniciativas WHERE estado IN ('planeado', 'en curso')&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            if (rs.next()) {&#10;                return rs.getInt(1);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al contar iniciativas activas: &quot; + e.getMessage());&#10;        }&#10;&#10;        return 0;&#10;    }&#10;&#10;    /**&#10;     * Método auxiliar para crear un objeto Iniciativa desde ResultSet&#10;     */&#10;    private Iniciativa createIniciativaFromResultSet(ResultSet rs) throws SQLException {&#10;        Iniciativa iniciativa = new Iniciativa();&#10;        iniciativa.setIdIniciativa(rs.getInt(&quot;id_iniciativa&quot;));&#10;        iniciativa.setNombre(rs.getString(&quot;nombre&quot;));&#10;        iniciativa.setDescripcion(rs.getString(&quot;descripcion&quot;));&#10;&#10;        Date fechaInicio = rs.getDate(&quot;fecha_inicio&quot;);&#10;        if (fechaInicio != null) {&#10;            iniciativa.setFechaInicio(fechaInicio.toLocalDate());&#10;        }&#10;&#10;        Date fechaFin = rs.getDate(&quot;fecha_fin&quot;);&#10;        if (fechaFin != null) {&#10;            iniciativa.setFechaFin(fechaFin.toLocalDate());&#10;        }&#10;&#10;        iniciativa.setTipo(rs.getString(&quot;tipo&quot;));&#10;        iniciativa.setEstado(rs.getString(&quot;estado&quot;));&#10;        iniciativa.setRiesgo(rs.getString(&quot;riesgo&quot;));&#10;        iniciativa.setIdOwner(rs.getInt(&quot;id_owner&quot;));&#10;&#10;        Timestamp fechaRegistro = rs.getTimestamp(&quot;fecha_registro&quot;);&#10;        if (fechaRegistro != null) {&#10;            iniciativa.setFechaRegistro(fechaRegistro.toLocalDateTime());&#10;        }&#10;&#10;        return iniciativa;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.repository;&#10;&#10;import com.juank.utp.finimpact.model.Iniciativa;&#10;import com.juank.utp.finimpact.utils.DatabaseConfig;&#10;&#10;import java.sql.*;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repositorio para operaciones CRUD de iniciativas&#10; */&#10;public class IniciativaRepository {&#10;&#10;    /**&#10;     * Obtiene todas las iniciativas&#10;     */&#10;    public List&lt;Iniciativa&gt; findAll() {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas ORDER BY fecha_registro DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Busca una iniciativa por ID&#10;     */&#10;    public Optional&lt;Iniciativa&gt; findById(int id) {&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE id_iniciativa = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                return Optional.of(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar iniciativa por ID: &quot; + e.getMessage());&#10;        }&#10;&#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por owner&#10;     */&#10;    public List&lt;Iniciativa&gt; findByOwner(int idOwner) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE id_owner = ? ORDER BY fecha_registro DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idOwner);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por owner: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por estado&#10;     */&#10;    public List&lt;Iniciativa&gt; findByEstado(String estado) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE estado = ? ORDER BY fecha_registro DESC&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, estado);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por estado: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por múltiples filtros&#10;     */&#10;    public List&lt;Iniciativa&gt; findByFilters(String estado, String tipo, String riesgo, Integer idOwner) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE 1=1&quot;);&#10;        List&lt;Object&gt; parameters = new ArrayList&lt;&gt;();&#10;&#10;        if (estado != null &amp;&amp; !estado.isEmpty()) {&#10;            sql.append(&quot; AND estado = ?&quot;);&#10;            parameters.add(estado);&#10;        }&#10;&#10;        if (tipo != null &amp;&amp; !tipo.isEmpty()) {&#10;            sql.append(&quot; AND tipo = ?&quot;);&#10;            parameters.add(tipo);&#10;        }&#10;&#10;        if (riesgo != null &amp;&amp; !riesgo.isEmpty()) {&#10;            sql.append(&quot; AND riesgo = ?&quot;);&#10;            parameters.add(riesgo);&#10;        }&#10;&#10;        if (idOwner != null) {&#10;            sql.append(&quot; AND id_owner = ?&quot;);&#10;            parameters.add(idOwner);&#10;        }&#10;&#10;        sql.append(&quot; ORDER BY fecha_registro DESC&quot;);&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql.toString())) {&#10;&#10;            for (int i = 0; i &lt; parameters.size(); i++) {&#10;                stmt.setObject(i + 1, parameters.get(i));&#10;            }&#10;&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por filtros: &quot; + e.getMessage());&#10;        }&#10;&#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Crea una nueva iniciativa&#10;     */&#10;    public boolean save(Iniciativa iniciativa) {&#10;        String sql = &quot;INSERT INTO iniciativas (nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;&#10;            stmt.setString(1, iniciativa.getNombre());&#10;            stmt.setString(2, iniciativa.getDescripcion());&#10;            stmt.setDate(3, iniciativa.getFechaInicio() != null ? Date.valueOf(iniciativa.getFechaInicio()) : null);&#10;            stmt.setDate(4, iniciativa.getFechaFin() != null ? Date.valueOf(iniciativa.getFechaFin()) : null);&#10;            stmt.setString(5, iniciativa.getTipo());&#10;            stmt.setString(6, iniciativa.getEstado());&#10;            stmt.setString(7, iniciativa.getRiesgo());&#10;            stmt.setInt(8, iniciativa.getIdOwner());&#10;&#10;            int rowsAffected = stmt.executeUpdate();&#10;&#10;            if (rowsAffected &gt; 0) {&#10;                ResultSet rs = stmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    iniciativa.setIdIniciativa(rs.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al crear iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza una iniciativa existente&#10;     */&#10;    public boolean update(Iniciativa iniciativa) {&#10;        String sql = &quot;UPDATE iniciativas SET nombre = ?, descripcion = ?, fecha_inicio = ?, fecha_fin = ?, tipo = ?, estado = ?, riesgo = ?, id_owner = ? WHERE id_iniciativa = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setString(1, iniciativa.getNombre());&#10;            stmt.setString(2, iniciativa.getDescripcion());&#10;            stmt.setDate(3, iniciativa.getFechaInicio() != null ? Date.valueOf(iniciativa.getFechaInicio()) : null);&#10;            stmt.setDate(4, iniciativa.getFechaFin() != null ? Date.valueOf(iniciativa.getFechaFin()) : null);&#10;            stmt.setString(5, iniciativa.getTipo());&#10;            stmt.setString(6, iniciativa.getEstado());&#10;            stmt.setString(7, iniciativa.getRiesgo());&#10;            stmt.setInt(8, iniciativa.getIdOwner());&#10;            stmt.setInt(9, iniciativa.getIdIniciativa());&#10;&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Elimina una iniciativa&#10;     */&#10;    public boolean delete(int idIniciativa) {&#10;        String sql = &quot;DELETE FROM iniciativas WHERE id_iniciativa = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;&#10;            stmt.setInt(1, idIniciativa);&#10;            return stmt.executeUpdate() &gt; 0;&#10;&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al eliminar iniciativa: &quot; + e.getMessage());&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Cuenta el número de iniciativas activas (en curso)&#10;     */&#10;    public int countIniciativasActivas() {&#10;        String sql = &quot;SELECT COUNT(*) FROM iniciativas WHERE estado = 'en curso'&quot;;&#10;&#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            if (rs.next()) {&#10;                return rs.getInt(1);&#10;            }&#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al contar iniciativas activas: &quot; + e.getMessage());&#10;        }&#10;&#10;        return 0;&#10;    }&#10;&#10;    /**&#10;     * Método auxiliar para crear un objeto Iniciativa desde ResultSet&#10;     */&#10;    private Iniciativa createIniciativaFromResultSet(ResultSet rs) throws SQLException {&#10;        Iniciativa iniciativa = new Iniciativa();&#10;        iniciativa.setIdIniciativa(rs.getInt(&quot;id_iniciativa&quot;));&#10;        iniciativa.setNombre(rs.getString(&quot;nombre&quot;));&#10;        iniciativa.setDescripcion(rs.getString(&quot;descripcion&quot;));&#10;&#10;        Date fechaInicio = rs.getDate(&quot;fecha_inicio&quot;);&#10;        if (fechaInicio != null) {&#10;            iniciativa.setFechaInicio(fechaInicio.toLocalDate());&#10;        }&#10;&#10;        Date fechaFin = rs.getDate(&quot;fecha_fin&quot;);&#10;        if (fechaFin != null) {&#10;            iniciativa.setFechaFin(fechaFin.toLocalDate());&#10;        }&#10;&#10;        iniciativa.setTipo(rs.getString(&quot;tipo&quot;));&#10;        iniciativa.setEstado(rs.getString(&quot;estado&quot;));&#10;        iniciativa.setRiesgo(rs.getString(&quot;riesgo&quot;));&#10;        iniciativa.setIdOwner(rs.getInt(&quot;id_owner&quot;));&#10;&#10;        Timestamp fechaRegistro = rs.getTimestamp(&quot;fecha_registro&quot;);&#10;        if (fechaRegistro != null) {&#10;            iniciativa.setFechaRegistro(fechaRegistro.toLocalDateTime());&#10;        }&#10;&#10;        return iniciativa;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/dashboard-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/dashboard-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.*?&gt;&#10;&lt;?import javafx.scene.chart.*?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;VBox alignment=&quot;TOP_CENTER&quot; prefHeight=&quot;600.0&quot; prefWidth=&quot;800.0&quot; spacing=&quot;20.0&quot; style=&quot;-fx-background-color: #ECEFF4;&quot; xmlns=&quot;http://javafx.com/javafx/17.0.12&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.DashboardController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Título del Dashboard --&gt;&#10;      &lt;Label text=&quot;Dashboard - FinImpact&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#2E3440&quot;&gt;&#10;         &lt;font&gt;&#10;            &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;         &lt;/font&gt;&#10;      &lt;/Label&gt;&#10;&#10;      &lt;!-- Sección de Gráficos --&gt;&#10;&#10;      &lt;!-- Sección de KPIs --&gt;&#10;      &lt;VBox alignment=&quot;CENTER&quot; spacing=&quot;15.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Indicadores Clave (KPIs)&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;18.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;&#10;            &lt;!-- Fila de KPIs --&gt;&#10;            &lt;HBox alignment=&quot;CENTER&quot; spacing=&quot;30.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;!-- KPI 1: Iniciativas Activas --&gt;&#10;                  &lt;VBox alignment=&quot;CENTER&quot; spacing=&quot;5.0&quot; style=&quot;-fx-background-color: #D8DEE9; -fx-background-radius: 10; -fx-padding: 20;&quot;&gt;&#10;                     &lt;children&gt;&#10;                        &lt;Label text=&quot;Iniciativas Activas&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#2E3440&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &lt;Label fx:id=&quot;lblIniciativasActivas&quot; text=&quot;0&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#5E81AC&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                     &lt;/children&gt;&#10;                  &lt;/VBox&gt;&#10;&#10;                  &lt;!-- KPI 2: Impactos Planeados del Mes --&gt;&#10;                  &lt;VBox alignment=&quot;CENTER&quot; spacing=&quot;5.0&quot; style=&quot;-fx-background-color: #D8DEE9; -fx-background-radius: 10; -fx-padding: 20;&quot;&gt;&#10;                     &lt;children&gt;&#10;                        &lt;Label text=&quot;Impactos Planeados&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#2E3440&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &lt;Label text=&quot;(Mes Actual)&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#4C566A&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;11.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &lt;Label fx:id=&quot;lblImpactosPlaneados&quot; text=&quot;&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#A3BE8C&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font name=&quot;System Bold&quot; size=&quot;20.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                     &lt;/children&gt;&#10;                  &lt;/VBox&gt;&#10;&#10;                  &lt;!-- KPI 3: Impactos Reales del Mes --&gt;&#10;                  &lt;VBox alignment=&quot;CENTER&quot; spacing=&quot;5.0&quot; style=&quot;-fx-background-color: #D8DEE9; -fx-background-radius: 10; -fx-padding: 20;&quot;&gt;&#10;                     &lt;children&gt;&#10;                        &lt;Label text=&quot;Impactos Reales&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#2E3440&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &lt;Label text=&quot;(Mes Actual)&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#4C566A&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;11.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &lt;Label fx:id=&quot;lblImpactosReales&quot; text=&quot;&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#D08770&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font name=&quot;System Bold&quot; size=&quot;20.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                     &lt;/children&gt;&#10;                  &lt;/VBox&gt;&#10;&#10;                  &lt;!-- KPI 4: Diferencia Acumulada --&gt;&#10;                  &lt;VBox alignment=&quot;CENTER&quot; spacing=&quot;5.0&quot; style=&quot;-fx-background-color: #D8DEE9; -fx-background-radius: 10; -fx-padding: 20;&quot;&gt;&#10;                     &lt;children&gt;&#10;                        &lt;Label text=&quot;Diferencia&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#2E3440&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &lt;Label text=&quot;(Real - Planeado)&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#4C566A&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;11.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &lt;Label fx:id=&quot;lblDiferencia&quot; text=&quot;&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#BF616A&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font name=&quot;System Bold&quot; size=&quot;20.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                     &lt;/children&gt;&#10;                  &lt;/VBox&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;         &lt;/children&gt;&#10;      &lt;/VBox&gt;&#10;   &lt;/children&gt;&#10;   &lt;padding&gt;&#10;      &lt;Insets bottom=&quot;20.0&quot; left=&quot;20.0&quot; right=&quot;20.0&quot; top=&quot;20.0&quot; /&gt;&#10;   &lt;/padding&gt;&#10;&lt;/VBox&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.*?&gt;&#10;&lt;?import javafx.scene.chart.*?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;VBox xmlns=&quot;http://javafx.com/javafx/17.0.12&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.DashboardController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #FFFFFF; -fx-border-color: #D8DEE9; -fx-border-width: 0 0 1 0;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Dashboard&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnActualizar&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#actualizarDashboard&quot; style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot; Actualizar&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;ScrollPane fitToWidth=&quot;true&quot; VBox.vgrow=&quot;ALWAYS&quot;&gt;&#10;         &lt;content&gt;&#10;            &lt;VBox spacing=&quot;20.0&quot; style=&quot;-fx-padding: 20;&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;!-- Charts Section --&gt;&#10;                  &lt;Label text=&quot;Análisis Gráfico&quot; textFill=&quot;#2E3440&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font name=&quot;System Bold&quot; size=&quot;18.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;                  &#10;                  &lt;!-- Charts Container --&gt;&#10;                  &lt;GridPane hgap=&quot;20.0&quot; vgap=&quot;20.0&quot;&gt;&#10;                     &lt;columnConstraints&gt;&#10;                        &lt;ColumnConstraints hgrow=&quot;SOMETIMES&quot; minWidth=&quot;10.0&quot; prefWidth=&quot;100.0&quot; /&gt;&#10;                        &lt;ColumnConstraints hgrow=&quot;SOMETIMES&quot; minWidth=&quot;10.0&quot; prefWidth=&quot;100.0&quot; /&gt;&#10;                     &lt;/columnConstraints&gt;&#10;                     &lt;rowConstraints&gt;&#10;                        &lt;RowConstraints minHeight=&quot;10.0&quot; prefHeight=&quot;300.0&quot; vgrow=&quot;SOMETIMES&quot; /&gt;&#10;                        &lt;RowConstraints minHeight=&quot;10.0&quot; prefHeight=&quot;300.0&quot; vgrow=&quot;SOMETIMES&quot; /&gt;&#10;                     &lt;/rowConstraints&gt;&#10;                     &lt;children&gt;&#10;                        &lt;!-- Gráfico de Iniciativas por Estado --&gt;&#10;                        &lt;VBox style=&quot;-fx-background-color: white; -fx-background-radius: 8; -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.1), 5, 0, 0, 0);&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot;&gt;&#10;                           &lt;children&gt;&#10;                              &lt;Label text=&quot;Iniciativas por Estado&quot; style=&quot;-fx-padding: 15 15 5 15;&quot; textFill=&quot;#2E3440&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;PieChart fx:id=&quot;chartIniciativasPorEstado&quot; prefHeight=&quot;250.0&quot; style=&quot;-fx-padding: 10;&quot; /&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/VBox&gt;&#10;&#10;                        &lt;!-- Gráfico de Impactos por Tipo --&gt;&#10;                        &lt;VBox style=&quot;-fx-background-color: white; -fx-background-radius: 8; -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.1), 5, 0, 0, 0);&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;0&quot;&gt;&#10;                           &lt;children&gt;&#10;                              &lt;Label text=&quot;Impactos por Tipo&quot; style=&quot;-fx-padding: 15 15 5 15;&quot; textFill=&quot;#2E3440&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;BarChart fx:id=&quot;chartImpactosPorTipo&quot; prefHeight=&quot;250.0&quot; style=&quot;-fx-padding: 10;&quot;&gt;&#10;                                 &lt;xAxis&gt;&#10;                                    &lt;CategoryAxis side=&quot;BOTTOM&quot; /&gt;&#10;                                 &lt;/xAxis&gt;&#10;                                 &lt;yAxis&gt;&#10;                                    &lt;NumberAxis side=&quot;LEFT&quot; /&gt;&#10;                                 &lt;/yAxis&gt;&#10;                              &lt;/BarChart&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/VBox&gt;&#10;&#10;                        &lt;!-- Gráfico de Impacto Financiero Mensual --&gt;&#10;                        &lt;VBox style=&quot;-fx-background-color: white; -fx-background-radius: 8; -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.1), 5, 0, 0, 0);&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot;&gt;&#10;                           &lt;children&gt;&#10;                              &lt;Label text=&quot;Impacto Financiero Mensual&quot; style=&quot;-fx-padding: 15 15 5 15;&quot; textFill=&quot;#2E3440&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;LineChart fx:id=&quot;chartImpactoMensual&quot; prefHeight=&quot;250.0&quot; style=&quot;-fx-padding: 10;&quot;&gt;&#10;                                 &lt;xAxis&gt;&#10;                                    &lt;CategoryAxis side=&quot;BOTTOM&quot; /&gt;&#10;                                 &lt;/xAxis&gt;&#10;                                 &lt;yAxis&gt;&#10;                                    &lt;NumberAxis side=&quot;LEFT&quot; /&gt;&#10;                                 &lt;/yAxis&gt;&#10;                              &lt;/LineChart&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/VBox&gt;&#10;&#10;                        &lt;!-- Gráfico de Iniciativas por Riesgo --&gt;&#10;                        &lt;VBox style=&quot;-fx-background-color: white; -fx-background-radius: 8; -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.1), 5, 0, 0, 0);&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot;&gt;&#10;                           &lt;children&gt;&#10;                              &lt;Label text=&quot;Iniciativas por Nivel de Riesgo&quot; style=&quot;-fx-padding: 15 15 5 15;&quot; textFill=&quot;#2E3440&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;PieChart fx:id=&quot;chartIniciativasPorRiesgo&quot; prefHeight=&quot;250.0&quot; style=&quot;-fx-padding: 10;&quot; /&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/VBox&gt;&#10;                     &lt;/children&gt;&#10;                  &lt;/GridPane&gt;&#10;&#10;                  &lt;!-- KPIs Section --&gt;&#10;                  &lt;Label text=&quot;Indicadores Clave (KPIs)&quot; textFill=&quot;#2E3440&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font name=&quot;System Bold&quot; size=&quot;18.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                     &lt;VBox.margin&gt;&#10;                        &lt;Insets top=&quot;20.0&quot; /&gt;&#10;                     &lt;/VBox.margin&gt;&#10;                  &lt;/Label&gt;&#10;&#10;                  &lt;!-- KPIs Container --&gt;&#10;                  &lt;GridPane hgap=&quot;15.0&quot; vgap=&quot;15.0&quot;&gt;&#10;                     &lt;columnConstraints&gt;&#10;                        &lt;ColumnConstraints hgrow=&quot;SOMETIMES&quot; minWidth=&quot;10.0&quot; prefWidth=&quot;100.0&quot; /&gt;&#10;                        &lt;ColumnConstraints hgrow=&quot;SOMETIMES&quot; minWidth=&quot;10.0&quot; prefWidth=&quot;100.0&quot; /&gt;&#10;                        &lt;ColumnConstraints hgrow=&quot;SOMETIMES&quot; minWidth=&quot;10.0&quot; prefWidth=&quot;100.0&quot; /&gt;&#10;                        &lt;ColumnConstraints hgrow=&quot;SOMETIMES&quot; minWidth=&quot;10.0&quot; prefWidth=&quot;100.0&quot; /&gt;&#10;                     &lt;/columnConstraints&gt;&#10;                     &lt;rowConstraints&gt;&#10;                        &lt;RowConstraints minHeight=&quot;10.0&quot; prefHeight=&quot;120.0&quot; vgrow=&quot;SOMETIMES&quot; /&gt;&#10;                        &lt;RowConstraints minHeight=&quot;10.0&quot; prefHeight=&quot;120.0&quot; vgrow=&quot;SOMETIMES&quot; /&gt;&#10;                     &lt;/rowConstraints&gt;&#10;                     &lt;children&gt;&#10;                        &lt;!-- Total Iniciativas --&gt;&#10;                        &lt;VBox alignment=&quot;CENTER&quot; style=&quot;-fx-background-color: #5E81AC; -fx-background-radius: 8;&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot;&gt;&#10;                           &lt;children&gt;&#10;                              &lt;Label fx:id=&quot;lblTotalIniciativas&quot; text=&quot;0&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;Label text=&quot;Total Iniciativas&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font size=&quot;12.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/VBox&gt;&#10;&#10;                        &lt;!-- Iniciativas Activas --&gt;&#10;                        &lt;VBox alignment=&quot;CENTER&quot; style=&quot;-fx-background-color: #A3BE8C; -fx-background-radius: 8;&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;0&quot;&gt;&#10;                           &lt;children&gt;&#10;                              &lt;Label fx:id=&quot;lblIniciativasActivas&quot; text=&quot;0&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;Label text=&quot;Iniciativas Activas&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font size=&quot;12.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/VBox&gt;&#10;&#10;                        &lt;!-- Impacto Total --&gt;&#10;                        &lt;VBox alignment=&quot;CENTER&quot; style=&quot;-fx-background-color: #EBCB8B; -fx-background-radius: 8;&quot; GridPane.columnIndex=&quot;2&quot; GridPane.rowIndex=&quot;0&quot;&gt;&#10;                           &lt;children&gt;&#10;                              &lt;Label fx:id=&quot;lblImpactoTotal&quot; text=&quot;$0&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;Label text=&quot;Impacto Total&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font size=&quot;12.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/VBox&gt;&#10;&#10;                        &lt;!-- Impacto Promedio --&gt;&#10;                        &lt;VBox alignment=&quot;CENTER&quot; style=&quot;-fx-background-color: #D08770; -fx-background-radius: 8;&quot; GridPane.columnIndex=&quot;3&quot; GridPane.rowIndex=&quot;0&quot;&gt;&#10;                           &lt;children&gt;&#10;                              &lt;Label fx:id=&quot;lblImpactoPromedio&quot; text=&quot;$0&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;Label text=&quot;Impacto Promedio&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font size=&quot;12.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/VBox&gt;&#10;&#10;                        &lt;!-- Riesgo Alto --&gt;&#10;                        &lt;VBox alignment=&quot;CENTER&quot; style=&quot;-fx-background-color: #BF616A; -fx-background-radius: 8;&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot;&gt;&#10;                           &lt;children&gt;&#10;                              &lt;Label fx:id=&quot;lblRiesgoAlto&quot; text=&quot;0&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;Label text=&quot;Riesgo Alto&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font size=&quot;12.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/VBox&gt;&#10;&#10;                        &lt;!-- Iniciativas Finalizadas --&gt;&#10;                        &lt;VBox alignment=&quot;CENTER&quot; style=&quot;-fx-background-color: #88C0D0; -fx-background-radius: 8;&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot;&gt;&#10;                           &lt;children&gt;&#10;                              &lt;Label fx:id=&quot;lblIniciativasFinalizadas&quot; text=&quot;0&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;Label text=&quot;Finalizadas&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font size=&quot;12.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/VBox&gt;&#10;&#10;                        &lt;!-- ROI Proyectado --&gt;&#10;                        &lt;VBox alignment=&quot;CENTER&quot; style=&quot;-fx-background-color: #B48EAD; -fx-background-radius: 8;&quot; GridPane.columnIndex=&quot;2&quot; GridPane.rowIndex=&quot;1&quot;&gt;&#10;                           &lt;children&gt;&#10;                              &lt;Label fx:id=&quot;lblROI&quot; text=&quot;0%&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;Label text=&quot;ROI Proyectado&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font size=&quot;12.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/VBox&gt;&#10;&#10;                        &lt;!-- Eficiencia --&gt;&#10;                        &lt;VBox alignment=&quot;CENTER&quot; style=&quot;-fx-background-color: #81A1C1; -fx-background-radius: 8;&quot; GridPane.columnIndex=&quot;3&quot; GridPane.rowIndex=&quot;1&quot;&gt;&#10;                           &lt;children&gt;&#10;                              &lt;Label fx:id=&quot;lblEficiencia&quot; text=&quot;0%&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;Label text=&quot;Eficiencia&quot; textFill=&quot;white&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font size=&quot;12.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/VBox&gt;&#10;                     &lt;/children&gt;&#10;                  &lt;/GridPane&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;         &lt;/content&gt;&#10;      &lt;/ScrollPane&gt;&#10;   &lt;/children&gt;&#10;&lt;/VBox&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/impacto-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/impacto-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.collections.FXCollections?&gt;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&lt;?import java.lang.String?&gt;&#10;&#10;&lt;VBox xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.ImpactoController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #FFFFFF; -fx-border-color: #D8DEE9; -fx-border-width: 0 0 1 0;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Gestión de Impactos&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnNuevoImpacto&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#mostrarFormularioImpacto&quot;&#10;                    style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot;&#10;                    text=&quot;+ Nuevo Impacto&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Filtros --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;15.0&quot; style=&quot;-fx-background-color: #ECEFF4; -fx-padding: 15;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Filtros:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbTipo&quot; promptText=&quot;Tipo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Maquinaria&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Generación&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Optimización&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Transformación&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbSeveridad&quot; promptText=&quot;Atributo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Planeado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Estimado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Real&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;TextField fx:id=&quot;txtFiltroDescripcion&quot; promptText=&quot;Buscar por tipo...&quot; prefWidth=&quot;200.0&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Tabla de Impactos --&gt;&#10;      &lt;TableView fx:id=&quot;tableImpactos&quot; VBox.vgrow=&quot;ALWAYS&quot;&gt;&#10;         &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;colId&quot; prefWidth=&quot;60.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colDescripcion&quot; prefWidth=&quot;250.0&quot; text=&quot;Descripción&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colTipo&quot; prefWidth=&quot;120.0&quot; text=&quot;Tipo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colSeveridad&quot; prefWidth=&quot;100.0&quot; text=&quot;Severidad&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colValorMonetario&quot; prefWidth=&quot;120.0&quot; text=&quot;Valor Monetario&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colFechaDeteccion&quot; prefWidth=&quot;120.0&quot; text=&quot;F. Detección&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colIniciativaId&quot; prefWidth=&quot;100.0&quot; text=&quot;Iniciativa&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colAcciones&quot; prefWidth=&quot;120.0&quot; text=&quot;Acciones&quot; /&gt;&#10;         &lt;/columns&gt;&#10;      &lt;/TableView&gt;&#10;   &lt;/children&gt;&#10;&lt;/VBox&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.collections.FXCollections?&gt;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&lt;?import java.lang.String?&gt;&#10;&#10;&lt;VBox xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.ImpactoController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #FFFFFF; -fx-border-color: #D8DEE9; -fx-border-width: 0 0 1 0;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Gestión de Impactos&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnNuevoImpacto&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#mostrarFormularioImpacto&quot;&#10;                    style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot;&#10;                    text=&quot;+ Nuevo Impacto&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Filtros --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;15.0&quot; style=&quot;-fx-background-color: #ECEFF4; -fx-padding: 15;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Filtros:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbTipo&quot; promptText=&quot;Tipo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Maquinaria&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Generación&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Optimización&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Transformación&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbSeveridad&quot; promptText=&quot;Atributo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Planeado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Estimado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;Real&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;TextField fx:id=&quot;txtFiltroDescripcion&quot; promptText=&quot;Buscar por tipo...&quot; prefWidth=&quot;200.0&quot; /&gt;&#10;&#10;            &lt;Button fx:id=&quot;btnLimpiarFiltros&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#limpiarFiltros&quot;&#10;                    style=&quot;-fx-background-color: #D08770; -fx-text-fill: white; -fx-background-radius: 3;&quot;&#10;                    text=&quot;Limpiar Filtros&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Tabla de Impactos --&gt;&#10;      &lt;TableView fx:id=&quot;tableImpactos&quot; VBox.vgrow=&quot;ALWAYS&quot;&gt;&#10;         &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;colId&quot; prefWidth=&quot;60.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colDescripcion&quot; prefWidth=&quot;250.0&quot; text=&quot;Descripción&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colTipo&quot; prefWidth=&quot;120.0&quot; text=&quot;Tipo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colSeveridad&quot; prefWidth=&quot;100.0&quot; text=&quot;Severidad&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colValorMonetario&quot; prefWidth=&quot;120.0&quot; text=&quot;Valor Monetario&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colFechaDeteccion&quot; prefWidth=&quot;120.0&quot; text=&quot;F. Detección&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colIniciativaId&quot; prefWidth=&quot;100.0&quot; text=&quot;Iniciativa&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colAcciones&quot; prefWidth=&quot;120.0&quot; text=&quot;Acciones&quot; /&gt;&#10;         &lt;/columns&gt;&#10;      &lt;/TableView&gt;&#10;   &lt;/children&gt;&#10;&lt;/VBox&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/iniciativa-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/iniciativa-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import java.lang.*?&gt;&#10;&lt;?import javafx.collections.*?&gt;&#10;&lt;?import javafx.geometry.*?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;VBox xmlns=&quot;http://javafx.com/javafx/17.0.12&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.IniciativaController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #FFFFFF; -fx-border-color: #D8DEE9; -fx-border-width: 0 0 1 0;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Gestión de Iniciativas&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnNuevaIniciativa&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#mostrarFormularioIniciativa&quot; style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;+ Nueva Iniciativa&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Filtros --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;15.0&quot; style=&quot;-fx-background-color: #ECEFF4; -fx-padding: 15;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Filtros:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbEstado&quot; promptText=&quot;Estado&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;planeado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;en curso&quot; /&gt;&#10;                     &lt;String fx:value=&quot;finalizado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;cancelado&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbRiesgo&quot; promptText=&quot;Riesgo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;alto&quot; /&gt;&#10;                     &lt;String fx:value=&quot;medio&quot; /&gt;&#10;                     &lt;String fx:value=&quot;bajo&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;TextField fx:id=&quot;txtFiltroNombre&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Buscar por nombre...&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Tabla --&gt;&#10;      &lt;TableView fx:id=&quot;tableIniciativas&quot; VBox.vgrow=&quot;ALWAYS&quot;&gt;&#10;         &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;colId&quot; minWidth=&quot;50.0&quot; prefWidth=&quot;80.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colNombre&quot; minWidth=&quot;150.0&quot; prefWidth=&quot;200.0&quot; text=&quot;Nombre&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colDescripcion&quot; minWidth=&quot;200.0&quot; prefWidth=&quot;250.0&quot; text=&quot;Descripción&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colTipo&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Tipo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colEstado&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Estado&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colRiesgo&quot; minWidth=&quot;80.0&quot; prefWidth=&quot;100.0&quot; text=&quot;Riesgo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colFechaInicio&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Fecha Inicio&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colFechaFin&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;168.0&quot; text=&quot;Fecha Fin&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colAcciones&quot; minWidth=&quot;150.0&quot; prefWidth=&quot;152.0&quot; text=&quot;Acciones&quot; /&gt;&#10;         &lt;/columns&gt;&#10;         &lt;VBox.margin&gt;&#10;            &lt;Insets bottom=&quot;20.0&quot; left=&quot;20.0&quot; right=&quot;20.0&quot; top=&quot;10.0&quot; /&gt;&#10;         &lt;/VBox.margin&gt;&#10;      &lt;/TableView&gt;&#10;   &lt;/children&gt;&#10;&lt;/VBox&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import java.lang.*?&gt;&#10;&lt;?import javafx.collections.*?&gt;&#10;&lt;?import javafx.geometry.*?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;VBox xmlns=&quot;http://javafx.com/javafx/17.0.12&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.IniciativaController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #FFFFFF; -fx-border-color: #D8DEE9; -fx-border-width: 0 0 1 0;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Gestión de Iniciativas&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnNuevaIniciativa&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#mostrarFormularioIniciativa&quot; style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;+ Nueva Iniciativa&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Filtros --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;15.0&quot; style=&quot;-fx-background-color: #ECEFF4; -fx-padding: 15;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Filtros:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbEstado&quot; promptText=&quot;Estado&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;planeado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;en curso&quot; /&gt;&#10;                     &lt;String fx:value=&quot;finalizado&quot; /&gt;&#10;                     &lt;String fx:value=&quot;cancelado&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbRiesgo&quot; promptText=&quot;Riesgo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;alto&quot; /&gt;&#10;                     &lt;String fx:value=&quot;medio&quot; /&gt;&#10;                     &lt;String fx:value=&quot;bajo&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;TextField fx:id=&quot;txtFiltroNombre&quot; prefWidth=&quot;200.0&quot; promptText=&quot;Buscar por nombre...&quot; /&gt;&#10;&#10;            &lt;Button fx:id=&quot;btnLimpiarFiltros&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#limpiarFiltros&quot;&#10;                    style=&quot;-fx-background-color: #D08770; -fx-text-fill: white; -fx-background-radius: 3;&quot;&#10;                    text=&quot;Limpiar Filtros&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Tabla --&gt;&#10;      &lt;TableView fx:id=&quot;tableIniciativas&quot; VBox.vgrow=&quot;ALWAYS&quot;&gt;&#10;         &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;colId&quot; minWidth=&quot;50.0&quot; prefWidth=&quot;80.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colNombre&quot; minWidth=&quot;150.0&quot; prefWidth=&quot;200.0&quot; text=&quot;Nombre&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colDescripcion&quot; minWidth=&quot;200.0&quot; prefWidth=&quot;250.0&quot; text=&quot;Descripción&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colTipo&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Tipo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colEstado&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Estado&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colRiesgo&quot; minWidth=&quot;80.0&quot; prefWidth=&quot;100.0&quot; text=&quot;Riesgo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colFechaInicio&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Fecha Inicio&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colFechaFin&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;168.0&quot; text=&quot;Fecha Fin&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colAcciones&quot; minWidth=&quot;150.0&quot; prefWidth=&quot;152.0&quot; text=&quot;Acciones&quot; /&gt;&#10;         &lt;/columns&gt;&#10;         &lt;VBox.margin&gt;&#10;            &lt;Insets bottom=&quot;20.0&quot; left=&quot;20.0&quot; right=&quot;20.0&quot; top=&quot;10.0&quot; /&gt;&#10;         &lt;/VBox.margin&gt;&#10;      &lt;/TableView&gt;&#10;   &lt;/children&gt;&#10;&lt;/VBox&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/main-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/main-view.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;BorderPane xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.MainController&quot;&gt;&#10;   &lt;top&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #2E3440;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;FinImpact&quot; textFill=&quot;WHITE&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;!-- Vista cuando NO está autenticado --&gt;&#10;            &lt;VBox fx:id=&quot;loginView&quot; alignment=&quot;CENTER_RIGHT&quot; spacing=&quot;10.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Button fx:id=&quot;btnLogin&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleLogin&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;130.0&quot;&#10;                          style=&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Iniciar Sesión&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;14.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Button&gt;&#10;               &lt;/children&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- Vista cuando SÍ está autenticado --&gt;&#10;            &lt;VBox fx:id=&quot;userView&quot; alignment=&quot;CENTER_RIGHT&quot; spacing=&quot;10.0&quot; visible=&quot;false&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;HBox alignment=&quot;CENTER_RIGHT&quot; spacing=&quot;10.0&quot;&gt;&#10;                     &lt;children&gt;&#10;                        &lt;Label fx:id=&quot;lblUsername&quot; text=&quot;&quot; textFill=&quot;WHITE&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &lt;Button fx:id=&quot;btnUserAction&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleUserAction&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;150.0&quot;&#10;                                style=&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Mi Perfil&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;Button fx:id=&quot;btnLogout&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleLogout&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;130.0&quot;&#10;                                style=&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Cerrar Sesión&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Button&gt;&#10;                     &lt;/children&gt;&#10;                  &lt;/HBox&gt;&#10;               &lt;/children&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/VBox&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/top&gt;&#10;   &lt;center&gt;&#10;      &lt;StackPane prefHeight=&quot;400.0&quot; prefWidth=&quot;600.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;!-- Vista de bienvenida para usuarios no logueados --&gt;&#10;            &lt;VBox fx:id=&quot;welcomeView&quot; alignment=&quot;CENTER&quot; spacing=&quot;20.0&quot; style=&quot;-fx-background-color: #ECEFF4;&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label text=&quot;Bienvenido a FinImpact&quot; textAlignment=&quot;CENTER&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;                  &lt;Label text=&quot;Sistema de Seguimiento de Iniciativas e Impactos Financieros&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#4C566A&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;16.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- TabPane para usuarios logueados --&gt;&#10;            &lt;TabPane fx:id=&quot;mainTabPane&quot; visible=&quot;false&quot; style=&quot;-fx-background-color: #ECEFF4;&quot; tabClosingPolicy=&quot;UNAVAILABLE&quot;&gt;&#10;               &lt;tabs&gt;&#10;                  &lt;Tab text=&quot;Dashboard&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include source=&quot;dashboard-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;                  &lt;Tab text=&quot;Iniciativas&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include source=&quot;iniciativa-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;                  &lt;Tab text=&quot;Impactos&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include source=&quot;impacto-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;               &lt;/tabs&gt;&#10;            &lt;/TabPane&gt;&#10;         &lt;/children&gt;&#10;      &lt;/StackPane&gt;&#10;   &lt;/center&gt;&#10;   &lt;bottom&gt;&#10;      &lt;HBox alignment=&quot;CENTER&quot; prefHeight=&quot;40.0&quot; style=&quot;-fx-background-color: #D8DEE9;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label fx:id=&quot;lblStatus&quot; text=&quot;No hay usuario autenticado&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/bottom&gt;&#10;&lt;/BorderPane&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;BorderPane xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.MainController&quot;&gt;&#10;   &lt;top&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #2E3440;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;FinImpact&quot; textFill=&quot;WHITE&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;!-- Vista cuando NO está autenticado --&gt;&#10;            &lt;VBox fx:id=&quot;loginView&quot; alignment=&quot;CENTER_RIGHT&quot; spacing=&quot;10.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Button fx:id=&quot;btnLogin&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleLogin&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;130.0&quot;&#10;                          style=&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Iniciar Sesión&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;14.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Button&gt;&#10;               &lt;/children&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- Vista cuando SÍ está autenticado --&gt;&#10;            &lt;VBox fx:id=&quot;userView&quot; alignment=&quot;CENTER_RIGHT&quot; spacing=&quot;10.0&quot; visible=&quot;false&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;HBox alignment=&quot;CENTER_RIGHT&quot; spacing=&quot;10.0&quot;&gt;&#10;                     &lt;children&gt;&#10;                        &lt;Button fx:id=&quot;btnUserAction&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleUserAction&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;150.0&quot;&#10;                                style=&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Mi Perfil&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;Button fx:id=&quot;btnLogout&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleLogout&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;130.0&quot;&#10;                                style=&quot;-fx-background-color: #f44336; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Cerrar Sesión&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font size=&quot;14.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Button&gt;&#10;                     &lt;/children&gt;&#10;                  &lt;/HBox&gt;&#10;               &lt;/children&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/VBox&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/top&gt;&#10;   &lt;center&gt;&#10;      &lt;StackPane prefHeight=&quot;400.0&quot; prefWidth=&quot;600.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;!-- Vista de bienvenida para usuarios no logueados --&gt;&#10;            &lt;VBox fx:id=&quot;welcomeView&quot; alignment=&quot;CENTER&quot; spacing=&quot;20.0&quot; style=&quot;-fx-background-color: #ECEFF4;&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label text=&quot;Bienvenido a FinImpact&quot; textAlignment=&quot;CENTER&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;                  &lt;Label text=&quot;Sistema de Seguimiento de Iniciativas e Impactos Financieros&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#4C566A&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;16.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;&#10;            &lt;!-- TabPane para usuarios logueados --&gt;&#10;            &lt;TabPane fx:id=&quot;mainTabPane&quot; visible=&quot;false&quot; style=&quot;-fx-background-color: #ECEFF4;&quot; tabClosingPolicy=&quot;UNAVAILABLE&quot;&gt;&#10;               &lt;tabs&gt;&#10;                  &lt;Tab text=&quot;Dashboard&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include source=&quot;dashboard-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;                  &lt;Tab text=&quot;Iniciativas&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include source=&quot;iniciativa-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;                  &lt;Tab text=&quot;Impactos&quot;&gt;&#10;                     &lt;content&gt;&#10;                        &lt;fx:include source=&quot;impacto-view.fxml&quot; /&gt;&#10;                     &lt;/content&gt;&#10;                  &lt;/Tab&gt;&#10;               &lt;/tabs&gt;&#10;            &lt;/TabPane&gt;&#10;         &lt;/children&gt;&#10;      &lt;/StackPane&gt;&#10;   &lt;/center&gt;&#10;   &lt;bottom&gt;&#10;      &lt;HBox alignment=&quot;CENTER&quot; prefHeight=&quot;40.0&quot; style=&quot;-fx-background-color: #D8DEE9;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label fx:id=&quot;lblStatus&quot; text=&quot;No hay usuario autenticado&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/bottom&gt;&#10;&lt;/BorderPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/perfil-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/perfil-view.fxml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;VBox xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.PerfilController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #FFFFFF; -fx-border-color: #D8DEE9; -fx-border-width: 0 0 1 0;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Mi Perfil&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Contenido del perfil --&gt;&#10;      &lt;ScrollPane fitToWidth=&quot;true&quot; VBox.vgrow=&quot;ALWAYS&quot;&gt;&#10;         &lt;content&gt;&#10;            &lt;VBox spacing=&quot;20.0&quot; style=&quot;-fx-padding: 30;&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;!-- Información personal --&gt;&#10;                  &lt;VBox spacing=&quot;15.0&quot;&gt;&#10;                     &lt;children&gt;&#10;                        &lt;Label text=&quot;Información Personal&quot; textFill=&quot;#2E3440&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font name=&quot;System Bold&quot; size=&quot;18.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &#10;                        &lt;GridPane hgap=&quot;15.0&quot; vgap=&quot;15.0&quot;&gt;&#10;                           &lt;columnConstraints&gt;&#10;                              &lt;ColumnConstraints minWidth=&quot;150.0&quot; prefWidth=&quot;150.0&quot; /&gt;&#10;                              &lt;ColumnConstraints minWidth=&quot;300.0&quot; prefWidth=&quot;350.0&quot; /&gt;&#10;                           &lt;/columnConstraints&gt;&#10;                           &#10;                           &lt;children&gt;&#10;                              &lt;Label text=&quot;Nombre Completo:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;Label fx:id=&quot;lblNombreCompleto&quot; text=&quot;&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;0&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &#10;                              &lt;Label text=&quot;Usuario:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;Label fx:id=&quot;lblUsuario&quot; text=&quot;&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &#10;                              &lt;Label text=&quot;Email:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;Label fx:id=&quot;lblEmail&quot; text=&quot;&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;2&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &#10;                              &lt;Label text=&quot;Tipo de Usuario:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;3&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;Label fx:id=&quot;lblTipo&quot; text=&quot;&quot; GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;3&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/GridPane&gt;&#10;                     &lt;/children&gt;&#10;                  &lt;/VBox&gt;&#10;                  &#10;                  &lt;!-- Separador --&gt;&#10;                  &lt;Separator /&gt;&#10;                  &#10;                  &lt;!-- Cambio de contraseña --&gt;&#10;                  &lt;VBox spacing=&quot;15.0&quot;&gt;&#10;                     &lt;children&gt;&#10;                        &lt;Label text=&quot;Cambiar Contraseña&quot; textFill=&quot;#2E3440&quot;&gt;&#10;                           &lt;font&gt;&#10;                              &lt;Font name=&quot;System Bold&quot; size=&quot;18.0&quot; /&gt;&#10;                           &lt;/font&gt;&#10;                        &lt;/Label&gt;&#10;                        &#10;                        &lt;GridPane hgap=&quot;15.0&quot; vgap=&quot;15.0&quot;&gt;&#10;                           &lt;columnConstraints&gt;&#10;                              &lt;ColumnConstraints minWidth=&quot;150.0&quot; prefWidth=&quot;150.0&quot; /&gt;&#10;                              &lt;ColumnConstraints minWidth=&quot;300.0&quot; prefWidth=&quot;350.0&quot; /&gt;&#10;                           &lt;/columnConstraints&gt;&#10;                           &#10;                           &lt;children&gt;&#10;                              &lt;Label text=&quot;Contraseña Actual:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;0&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;PasswordField fx:id=&quot;txtPasswordActual&quot; promptText=&quot;Ingrese su contraseña actual&quot; &#10;                                           GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;0&quot; prefHeight=&quot;35.0&quot; /&gt;&#10;                              &#10;                              &lt;Label text=&quot;Nueva Contraseña:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;1&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;PasswordField fx:id=&quot;txtPasswordNueva&quot; promptText=&quot;Ingrese la nueva contraseña&quot; &#10;                                           GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;1&quot; prefHeight=&quot;35.0&quot; /&gt;&#10;                              &#10;                              &lt;Label text=&quot;Confirmar Contraseña:&quot; GridPane.columnIndex=&quot;0&quot; GridPane.rowIndex=&quot;2&quot;&gt;&#10;                                 &lt;font&gt;&#10;                                    &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;                                 &lt;/font&gt;&#10;                              &lt;/Label&gt;&#10;                              &lt;PasswordField fx:id=&quot;txtPasswordConfirmar&quot; promptText=&quot;Confirme la nueva contraseña&quot; &#10;                                           GridPane.columnIndex=&quot;1&quot; GridPane.rowIndex=&quot;2&quot; prefHeight=&quot;35.0&quot; /&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/GridPane&gt;&#10;                        &#10;                        &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;15.0&quot;&gt;&#10;                           &lt;children&gt;&#10;                              &lt;Button fx:id=&quot;btnCambiarPassword&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#cambiarPassword&quot; &#10;                                      prefHeight=&quot;40.0&quot; prefWidth=&quot;150.0&quot;&#10;                                      style=&quot;-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 14px; -fx-font-weight: bold;&quot;&#10;                                      text=&quot;Cambiar Contraseña&quot; /&gt;&#10;                              &lt;Button fx:id=&quot;btnLimpiarCampos&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#limpiarCampos&quot; &#10;                                      prefHeight=&quot;40.0&quot; prefWidth=&quot;120.0&quot;&#10;                                      style=&quot;-fx-background-color: #D08770; -fx-text-fill: white; -fx-background-radius: 5; -fx-font-size: 14px; -fx-font-weight: bold;&quot;&#10;                                      text=&quot;Limpiar&quot; /&gt;&#10;                           &lt;/children&gt;&#10;                        &lt;/HBox&gt;&#10;                     &lt;/children&gt;&#10;                  &lt;/VBox&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;         &lt;/content&gt;&#10;      &lt;/ScrollPane&gt;&#10;   &lt;/children&gt;&#10;&lt;/VBox&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/usuarios-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/usuarios-view.fxml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.collections.FXCollections?&gt;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&lt;?import java.lang.String?&gt;&#10;&#10;&lt;VBox xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.UsuarioController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;!-- Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #FFFFFF; -fx-border-color: #D8DEE9; -fx-border-width: 0 0 1 0;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Gestión de Usuarios&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnNuevoUsuario&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#mostrarFormularioUsuario&quot;&#10;                    style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot;&#10;                    text=&quot;+ Nuevo Usuario&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Filtros --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;15.0&quot; style=&quot;-fx-background-color: #ECEFF4; -fx-padding: 15;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Filtros:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;&#10;            &lt;ComboBox fx:id=&quot;cbTipo&quot; promptText=&quot;Tipo&quot;&gt;&#10;               &lt;items&gt;&#10;                  &lt;FXCollections fx:factory=&quot;observableArrayList&quot;&gt;&#10;                     &lt;String fx:value=&quot;Todos&quot; /&gt;&#10;                     &lt;String fx:value=&quot;admin&quot; /&gt;&#10;                     &lt;String fx:value=&quot;analista&quot; /&gt;&#10;                     &lt;String fx:value=&quot;viewer&quot; /&gt;&#10;                  &lt;/FXCollections&gt;&#10;               &lt;/items&gt;&#10;            &lt;/ComboBox&gt;&#10;&#10;            &lt;TextField fx:id=&quot;txtFiltroNombre&quot; promptText=&quot;Buscar por nombre...&quot; prefWidth=&quot;200.0&quot; /&gt;&#10;&#10;            &lt;Button fx:id=&quot;btnLimpiarFiltros&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#limpiarFiltros&quot;&#10;                    style=&quot;-fx-background-color: #D08770; -fx-text-fill: white; -fx-background-radius: 3;&quot;&#10;                    text=&quot;Limpiar Filtros&quot; /&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Tabla --&gt;&#10;      &lt;TableView fx:id=&quot;tableUsuarios&quot; VBox.vgrow=&quot;ALWAYS&quot;&gt;&#10;         &lt;columns&gt;&#10;            &lt;TableColumn fx:id=&quot;colId&quot; minWidth=&quot;50.0&quot; prefWidth=&quot;80.0&quot; text=&quot;ID&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colNombreCompleto&quot; minWidth=&quot;200.0&quot; prefWidth=&quot;250.0&quot; text=&quot;Nombre Completo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colUsuario&quot; minWidth=&quot;150.0&quot; prefWidth=&quot;180.0&quot; text=&quot;Usuario&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colEmail&quot; minWidth=&quot;200.0&quot; prefWidth=&quot;250.0&quot; text=&quot;Email&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colTipo&quot; minWidth=&quot;100.0&quot; prefWidth=&quot;120.0&quot; text=&quot;Tipo&quot; /&gt;&#10;            &lt;TableColumn fx:id=&quot;colAcciones&quot; minWidth=&quot;150.0&quot; prefWidth=&quot;200.0&quot; text=&quot;Acciones&quot; /&gt;&#10;         &lt;/columns&gt;&#10;         &lt;VBox.margin&gt;&#10;            &lt;Insets bottom=&quot;20.0&quot; left=&quot;20.0&quot; right=&quot;20.0&quot; top=&quot;10.0&quot; /&gt;&#10;         &lt;/VBox.margin&gt;&#10;      &lt;/TableView&gt;&#10;   &lt;/children&gt;&#10;&lt;/VBox&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>