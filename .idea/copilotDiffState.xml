<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/Application.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/Application.java" />
              <option name="originalContent" value="package com.juank.utp.finimpact;&#10;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.stage.Stage;&#10;&#10;import java.io.IOException;&#10;&#10;public class Application extends javafx.application.Application {&#10;    @Override&#10;    public void start(Stage stage) throws IOException {&#10;        FXMLLoader fxmlLoader = new FXMLLoader(Application.class.getResource(&quot;hello-view.fxml&quot;));&#10;        Scene scene = new Scene(fxmlLoader.load(), 320, 240);&#10;        stage.setTitle(&quot;Hello!&quot;);&#10;        stage.setScene(scene);&#10;        stage.show();&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        launch();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.juank.utp.finimpact;&#10;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.stage.Stage;&#10;&#10;import java.io.IOException;&#10;&#10;public class Application extends javafx.application.Application {&#10;    @Override&#10;    public void start(Stage stage) throws IOException {&#10;        FXMLLoader fxmlLoader = new FXMLLoader(Application.class.getResource(&quot;/com/juank/utp/finimpact/main-view.fxml&quot;));&#10;        Scene scene = new Scene(fxmlLoader.load(), 800, 600);&#10;        stage.setTitle(&quot;FinImpact - Sistema de Seguimiento de Iniciativas e Impactos Financieros&quot;);&#10;        stage.setScene(scene);&#10;        stage.setMinWidth(600);&#10;        stage.setMinHeight(400);&#10;        stage.show();&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        launch();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/LoginController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/LoginController.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.scene.control.PasswordField;&#10;import javafx.scene.control.TextField;&#10;import javafx.stage.Stage;&#10;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Controlador para la vista de login&#10; */&#10;public class LoginController {&#10;&#10;    @FXML&#10;    private TextField txtEmail;&#10;&#10;    @FXML&#10;    private PasswordField txtPassword;&#10;&#10;    @FXML&#10;    private Button btnIngresar;&#10;&#10;    @FXML&#10;    private Button btnCancelar;&#10;&#10;    @FXML&#10;    private Label lblEmailError;&#10;&#10;    @FXML&#10;    private Label lblPasswordError;&#10;&#10;    @FXML&#10;    private Label lblLoginError;&#10;&#10;    private MainController mainController;&#10;    private UsuarioRepository usuarioRepository;&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        usuarioRepository = new UsuarioRepository();&#10;        &#10;        // Configurar validaciones en tiempo real&#10;        txtEmail.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            limpiarErrorEmail();&#10;        });&#10;        &#10;        txtPassword.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            limpiarErrorPassword();&#10;        });&#10;&#10;        // Permitir login con Enter&#10;        txtPassword.setOnAction(event -&gt; handleLogin());&#10;    }&#10;&#10;    /**&#10;     * Establece la referencia al controlador principal&#10;     */&#10;    public void setMainController(MainController mainController) {&#10;        this.mainController = mainController;&#10;    }&#10;&#10;    /**&#10;     * Maneja el evento de login&#10;     */&#10;    @FXML&#10;    private void handleLogin() {&#10;        limpiarErrores();&#10;&#10;        if (!validarCampos()) {&#10;            return;&#10;        }&#10;&#10;        String email = txtEmail.getText().trim();&#10;        String password = txtPassword.getText();&#10;&#10;        // Deshabilitar botón mientras se procesa&#10;        btnIngresar.setDisable(true);&#10;        btnIngresar.setText(&quot;Ingresando...&quot;);&#10;&#10;        try {&#10;            // Intentar autenticación&#10;            Optional&lt;Usuario&gt; usuarioOpt = usuarioRepository.authenticate(email, password);&#10;&#10;            if (usuarioOpt.isPresent()) {&#10;                Usuario usuario = usuarioOpt.get();&#10;                &#10;                // Verificar que el usuario esté activo (doble verificación)&#10;                if (!usuario.isEstado()) {&#10;                    mostrarErrorLogin(&quot;Usuario inactivo. Contacte al administrador.&quot;);&#10;                    return;&#10;                }&#10;&#10;                // Login exitoso&#10;                mainController.setUsuarioLogueado(usuario);&#10;                cerrarVentana();&#10;                &#10;            } else {&#10;                mostrarErrorLogin(&quot;Email o contraseña incorrectos.&quot;);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error durante el login: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            mostrarErrorLogin(&quot;Error de conexión. Intente nuevamente.&quot;);&#10;        } finally {&#10;            // Rehabilitar botón&#10;            btnIngresar.setDisable(false);&#10;            btnIngresar.setText(&quot;Ingresar&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Maneja el evento de cancelar&#10;     */&#10;    @FXML&#10;    private void handleCancelar() {&#10;        cerrarVentana();&#10;    }&#10;&#10;    /**&#10;     * Valida que todos los campos estén llenos y correctos&#10;     */&#10;    private boolean validarCampos() {&#10;        boolean esValido = true;&#10;&#10;        // Validar email&#10;        String email = txtEmail.getText().trim();&#10;        if (email.isEmpty()) {&#10;            mostrarErrorEmail(&quot;El email es requerido&quot;);&#10;            esValido = false;&#10;        } else if (!esEmailValido(email)) {&#10;            mostrarErrorEmail(&quot;Formato de email inválido&quot;);&#10;            esValido = false;&#10;        }&#10;&#10;        // Validar contraseña&#10;        String password = txtPassword.getText();&#10;        if (password.isEmpty()) {&#10;            mostrarErrorPassword(&quot;La contraseña es requerida&quot;);&#10;            esValido = false;&#10;        } else if (password.length() &lt; 3) {&#10;            mostrarErrorPassword(&quot;La contraseña debe tener al menos 3 caracteres&quot;);&#10;            esValido = false;&#10;        }&#10;&#10;        return esValido;&#10;    }&#10;&#10;    /**&#10;     * Valida el formato del email&#10;     */&#10;    private boolean esEmailValido(String email) {&#10;        String emailRegex = &quot;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$&quot;;&#10;        return email.matches(emailRegex);&#10;    }&#10;&#10;    /**&#10;     * Muestra error en el campo email&#10;     */&#10;    private void mostrarErrorEmail(String mensaje) {&#10;        lblEmailError.setText(mensaje);&#10;        lblEmailError.setVisible(true);&#10;        txtEmail.setStyle(&quot;-fx-border-color: #BF616A; -fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Muestra error en el campo contraseña&#10;     */&#10;    private void mostrarErrorPassword(String mensaje) {&#10;        lblPasswordError.setText(mensaje);&#10;        lblPasswordError.setVisible(true);&#10;        txtPassword.setStyle(&quot;-fx-border-color: #BF616A; -fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Muestra error general de login&#10;     */&#10;    private void mostrarErrorLogin(String mensaje) {&#10;        lblLoginError.setText(mensaje);&#10;        lblLoginError.setVisible(true);&#10;    }&#10;&#10;    /**&#10;     * Limpia el error del campo email&#10;     */&#10;    private void limpiarErrorEmail() {&#10;        lblEmailError.setVisible(false);&#10;        txtEmail.setStyle(&quot;-fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Limpia el error del campo contraseña&#10;     */&#10;    private void limpiarErrorPassword() {&#10;        lblPasswordError.setVisible(false);&#10;        txtPassword.setStyle(&quot;-fx-background-radius: 5; -fx-border-radius: 5;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Limpia todos los errores&#10;     */&#10;    private void limpiarErrores() {&#10;        limpiarErrorEmail();&#10;        limpiarErrorPassword();&#10;        lblLoginError.setVisible(false);&#10;    }&#10;&#10;    /**&#10;     * Cierra la ventana de login&#10;     */&#10;    private void cerrarVentana() {&#10;        Stage stage = (Stage) btnCancelar.getScene().getWindow();&#10;        stage.close();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/MainController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/controller/MainController.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.controller;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.Button;&#10;import javafx.scene.control.Label;&#10;import javafx.stage.Modality;&#10;import javafx.stage.Stage;&#10;&#10;import java.io.IOException;&#10;&#10;/**&#10; * Controlador para la vista principal de la aplicación&#10; */&#10;public class MainController {&#10;&#10;    @FXML&#10;    private Button btnLogin;&#10;&#10;    @FXML&#10;    private Label lblStatus;&#10;&#10;    private Usuario usuarioLogueado;&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        actualizarEstadoUsuario();&#10;    }&#10;&#10;    /**&#10;     * Maneja el evento del botón de login&#10;     */&#10;    @FXML&#10;    private void handleLogin() {&#10;        if (usuarioLogueado == null) {&#10;            // Mostrar ventana de login&#10;            mostrarVentanaLogin();&#10;        } else {&#10;            // Realizar logout&#10;            realizarLogout();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Muestra la ventana de login como modal&#10;     */&#10;    private void mostrarVentanaLogin() {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;/com/juank/utp/finimpact/login-view.fxml&quot;));&#10;            Scene scene = new Scene(loader.load());&#10;&#10;            Stage loginStage = new Stage();&#10;            loginStage.setTitle(&quot;Iniciar Sesión - FinImpact&quot;);&#10;            loginStage.setScene(scene);&#10;            loginStage.setResizable(false);&#10;            loginStage.initModality(Modality.APPLICATION_MODAL);&#10;&#10;            // Obtener el controlador de login y pasarle referencia a este controlador&#10;            LoginController loginController = loader.getController();&#10;            loginController.setMainController(this);&#10;&#10;            // Mostrar la ventana y esperar&#10;            loginStage.showAndWait();&#10;&#10;        } catch (IOException e) {&#10;            System.err.println(&quot;Error al cargar la vista de login: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Realiza el logout del usuario&#10;     */&#10;    private void realizarLogout() {&#10;        usuarioLogueado = null;&#10;        actualizarEstadoUsuario();&#10;        System.out.println(&quot; Usuario deslogueado exitosamente&quot;);&#10;    }&#10;&#10;    /**&#10;     * Establece el usuario logueado (llamado desde LoginController)&#10;     */&#10;    public void setUsuarioLogueado(Usuario usuario) {&#10;        this.usuarioLogueado = usuario;&#10;        actualizarEstadoUsuario();&#10;        System.out.println(&quot;✅ Usuario logueado: &quot; + usuario.getNombreCompleto() + &quot; (&quot; + usuario.getRol() + &quot;)&quot;);&#10;    }&#10;&#10;    /**&#10;     * Actualiza la interfaz según el estado del usuario&#10;     */&#10;    private void actualizarEstadoUsuario() {&#10;        if (usuarioLogueado == null) {&#10;            btnLogin.setText(&quot;Login&quot;);&#10;            lblStatus.setText(&quot;No hay usuario autenticado&quot;);&#10;            btnLogin.setStyle(&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot;);&#10;        } else {&#10;            btnLogin.setText(&quot;Logout&quot;);&#10;            lblStatus.setText(&quot;Conectado como: &quot; + usuarioLogueado.getNombreCompleto() + &quot; (&quot; + &#10;                            getRolDisplayName(usuarioLogueado.getRol()) + &quot;)&quot;);&#10;            btnLogin.setStyle(&quot;-fx-background-color: #D08770; -fx-text-fill: white; -fx-background-radius: 5;&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Convierte el rol técnico a un nombre más amigable&#10;     */&#10;    private String getRolDisplayName(String rol) {&#10;        switch (rol.toLowerCase()) {&#10;            case &quot;admin&quot;:&#10;                return &quot;Administrador&quot;;&#10;            case &quot;analista&quot;:&#10;                return &quot;Analista&quot;;&#10;            case &quot;viewer&quot;:&#10;                return &quot;Visualizador&quot;;&#10;            default:&#10;                return rol;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Obtiene el usuario actualmente logueado&#10;     */&#10;    public Usuario getUsuarioLogueado() {&#10;        return usuarioLogueado;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Impacto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Impacto.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.model;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDate;&#10;&#10;/**&#10; * Modelo que representa un impacto financiero de una iniciativa&#10; */&#10;public class Impacto {&#10;    private int idImpacto;&#10;    private int idIniciativa;&#10;    private LocalDate fechaCreacion;&#10;    private String tipoImpacto; // Maquinaria, Generación, Optimización, Transformación&#10;    private int multiplicador; // 1 (positivo) o -1 (negativo)&#10;    private String atributoImpacto; // Planeado, Estimado, Real&#10;    private LocalDate fechaImpacto;&#10;    private BigDecimal impacto;&#10;&#10;    // Constructor vacío&#10;    public Impacto() {}&#10;&#10;    // Constructor completo&#10;    public Impacto(int idImpacto, int idIniciativa, LocalDate fechaCreacion, String tipoImpacto, &#10;                  int multiplicador, String atributoImpacto, LocalDate fechaImpacto, BigDecimal impacto) {&#10;        this.idImpacto = idImpacto;&#10;        this.idIniciativa = idIniciativa;&#10;        this.fechaCreacion = fechaCreacion;&#10;        this.tipoImpacto = tipoImpacto;&#10;        this.multiplicador = multiplicador;&#10;        this.atributoImpacto = atributoImpacto;&#10;        this.fechaImpacto = fechaImpacto;&#10;        this.impacto = impacto;&#10;    }&#10;&#10;    // Constructor sin ID (para inserción)&#10;    public Impacto(int idIniciativa, LocalDate fechaCreacion, String tipoImpacto, int multiplicador, &#10;                  String atributoImpacto, LocalDate fechaImpacto, BigDecimal impacto) {&#10;        this.idIniciativa = idIniciativa;&#10;        this.fechaCreacion = fechaCreacion;&#10;        this.tipoImpacto = tipoImpacto;&#10;        this.multiplicador = multiplicador;&#10;        this.atributoImpacto = atributoImpacto;&#10;        this.fechaImpacto = fechaImpacto;&#10;        this.impacto = impacto;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getIdImpacto() {&#10;        return idImpacto;&#10;    }&#10;&#10;    public void setIdImpacto(int idImpacto) {&#10;        this.idImpacto = idImpacto;&#10;    }&#10;&#10;    public int getIdIniciativa() {&#10;        return idIniciativa;&#10;    }&#10;&#10;    public void setIdIniciativa(int idIniciativa) {&#10;        this.idIniciativa = idIniciativa;&#10;    }&#10;&#10;    public LocalDate getFechaCreacion() {&#10;        return fechaCreacion;&#10;    }&#10;&#10;    public void setFechaCreacion(LocalDate fechaCreacion) {&#10;        this.fechaCreacion = fechaCreacion;&#10;    }&#10;&#10;    public String getTipoImpacto() {&#10;        return tipoImpacto;&#10;    }&#10;&#10;    public void setTipoImpacto(String tipoImpacto) {&#10;        this.tipoImpacto = tipoImpacto;&#10;    }&#10;&#10;    public int getMultiplicador() {&#10;        return multiplicador;&#10;    }&#10;&#10;    public void setMultiplicador(int multiplicador) {&#10;        this.multiplicador = multiplicador;&#10;    }&#10;&#10;    public String getAtributoImpacto() {&#10;        return atributoImpacto;&#10;    }&#10;&#10;    public void setAtributoImpacto(String atributoImpacto) {&#10;        this.atributoImpacto = atributoImpacto;&#10;    }&#10;&#10;    public LocalDate getFechaImpacto() {&#10;        return fechaImpacto;&#10;    }&#10;&#10;    public void setFechaImpacto(LocalDate fechaImpacto) {&#10;        this.fechaImpacto = fechaImpacto;&#10;    }&#10;&#10;    public BigDecimal getImpacto() {&#10;        return impacto;&#10;    }&#10;&#10;    public void setImpacto(BigDecimal impacto) {&#10;        this.impacto = impacto;&#10;    }&#10;&#10;    /**&#10;     * Calcula el impacto real aplicando el multiplicador&#10;     */&#10;    public BigDecimal getImpactoCalculado() {&#10;        if (impacto == null) return BigDecimal.ZERO;&#10;        return impacto.multiply(BigDecimal.valueOf(multiplicador));&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Impacto{&quot; +&#10;                &quot;idImpacto=&quot; + idImpacto +&#10;                &quot;, idIniciativa=&quot; + idIniciativa +&#10;                &quot;, fechaCreacion=&quot; + fechaCreacion +&#10;                &quot;, tipoImpacto='&quot; + tipoImpacto + '\'' +&#10;                &quot;, multiplicador=&quot; + multiplicador +&#10;                &quot;, atributoImpacto='&quot; + atributoImpacto + '\'' +&#10;                &quot;, fechaImpacto=&quot; + fechaImpacto +&#10;                &quot;, impacto=&quot; + impacto +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Iniciativa.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Iniciativa.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.model;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;&#10;/**&#10; * Modelo que representa una iniciativa empresarial&#10; */&#10;public class Iniciativa {&#10;    private int idIniciativa;&#10;    private String nombre;&#10;    private String descripcion;&#10;    private LocalDate fechaInicio;&#10;    private LocalDate fechaFin;&#10;    private String tipo;&#10;    private String estado; // planeado, en curso, finalizado, cancelado&#10;    private String riesgo; // alto, medio, bajo&#10;    private int idOwner;&#10;    private LocalDateTime fechaRegistro;&#10;&#10;    // Constructor vacío&#10;    public Iniciativa() {}&#10;&#10;    // Constructor completo&#10;    public Iniciativa(int idIniciativa, String nombre, String descripcion, LocalDate fechaInicio, &#10;                     LocalDate fechaFin, String tipo, String estado, String riesgo, int idOwner, &#10;                     LocalDateTime fechaRegistro) {&#10;        this.idIniciativa = idIniciativa;&#10;        this.nombre = nombre;&#10;        this.descripcion = descripcion;&#10;        this.fechaInicio = fechaInicio;&#10;        this.fechaFin = fechaFin;&#10;        this.tipo = tipo;&#10;        this.estado = estado;&#10;        this.riesgo = riesgo;&#10;        this.idOwner = idOwner;&#10;        this.fechaRegistro = fechaRegistro;&#10;    }&#10;&#10;    // Constructor sin ID (para inserción)&#10;    public Iniciativa(String nombre, String descripcion, LocalDate fechaInicio, LocalDate fechaFin, &#10;                     String tipo, String estado, String riesgo, int idOwner) {&#10;        this.nombre = nombre;&#10;        this.descripcion = descripcion;&#10;        this.fechaInicio = fechaInicio;&#10;        this.fechaFin = fechaFin;&#10;        this.tipo = tipo;&#10;        this.estado = estado;&#10;        this.riesgo = riesgo;&#10;        this.idOwner = idOwner;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getIdIniciativa() {&#10;        return idIniciativa;&#10;    }&#10;&#10;    public void setIdIniciativa(int idIniciativa) {&#10;        this.idIniciativa = idIniciativa;&#10;    }&#10;&#10;    public String getNombre() {&#10;        return nombre;&#10;    }&#10;&#10;    public void setNombre(String nombre) {&#10;        this.nombre = nombre;&#10;    }&#10;&#10;    public String getDescripcion() {&#10;        return descripcion;&#10;    }&#10;&#10;    public void setDescripcion(String descripcion) {&#10;        this.descripcion = descripcion;&#10;    }&#10;&#10;    public LocalDate getFechaInicio() {&#10;        return fechaInicio;&#10;    }&#10;&#10;    public void setFechaInicio(LocalDate fechaInicio) {&#10;        this.fechaInicio = fechaInicio;&#10;    }&#10;&#10;    public LocalDate getFechaFin() {&#10;        return fechaFin;&#10;    }&#10;&#10;    public void setFechaFin(LocalDate fechaFin) {&#10;        this.fechaFin = fechaFin;&#10;    }&#10;&#10;    public String getTipo() {&#10;        return tipo;&#10;    }&#10;&#10;    public void setTipo(String tipo) {&#10;        this.tipo = tipo;&#10;    }&#10;&#10;    public String getEstado() {&#10;        return estado;&#10;    }&#10;&#10;    public void setEstado(String estado) {&#10;        this.estado = estado;&#10;    }&#10;&#10;    public String getRiesgo() {&#10;        return riesgo;&#10;    }&#10;&#10;    public void setRiesgo(String riesgo) {&#10;        this.riesgo = riesgo;&#10;    }&#10;&#10;    public int getIdOwner() {&#10;        return idOwner;&#10;    }&#10;&#10;    public void setIdOwner(int idOwner) {&#10;        this.idOwner = idOwner;&#10;    }&#10;&#10;    public LocalDateTime getFechaRegistro() {&#10;        return fechaRegistro;&#10;    }&#10;&#10;    public void setFechaRegistro(LocalDateTime fechaRegistro) {&#10;        this.fechaRegistro = fechaRegistro;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Iniciativa{&quot; +&#10;                &quot;idIniciativa=&quot; + idIniciativa +&#10;                &quot;, nombre='&quot; + nombre + '\'' +&#10;                &quot;, descripcion='&quot; + descripcion + '\'' +&#10;                &quot;, fechaInicio=&quot; + fechaInicio +&#10;                &quot;, fechaFin=&quot; + fechaFin +&#10;                &quot;, tipo='&quot; + tipo + '\'' +&#10;                &quot;, estado='&quot; + estado + '\'' +&#10;                &quot;, riesgo='&quot; + riesgo + '\'' +&#10;                &quot;, idOwner=&quot; + idOwner +&#10;                &quot;, fechaRegistro=&quot; + fechaRegistro +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Usuario.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/model/Usuario.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.model;&#10;&#10;/**&#10; * Modelo que representa un usuario del sistema&#10; */&#10;public class Usuario {&#10;    private int idUsuario;&#10;    private String nombreCompleto;&#10;    private String email;&#10;    private String password; // Hash de la contraseña&#10;    private String rol; // admin, analista, viewer&#10;    private boolean estado; // true = activo, false = inactivo&#10;&#10;    // Constructor vacío&#10;    public Usuario() {}&#10;&#10;    // Constructor completo&#10;    public Usuario(int idUsuario, String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.idUsuario = idUsuario;&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Constructor sin ID (para inserción)&#10;    public Usuario(String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        this.nombreCompleto = nombreCompleto;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.rol = rol;&#10;        this.estado = estado;&#10;    }&#10;&#10;    // Getters y Setters&#10;    public int getIdUsuario() {&#10;        return idUsuario;&#10;    }&#10;&#10;    public void setIdUsuario(int idUsuario) {&#10;        this.idUsuario = idUsuario;&#10;    }&#10;&#10;    public String getNombreCompleto() {&#10;        return nombreCompleto;&#10;    }&#10;&#10;    public void setNombreCompleto(String nombreCompleto) {&#10;        this.nombreCompleto = nombreCompleto;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getRol() {&#10;        return rol;&#10;    }&#10;&#10;    public void setRol(String rol) {&#10;        this.rol = rol;&#10;    }&#10;&#10;    public boolean isEstado() {&#10;        return estado;&#10;    }&#10;&#10;    public void setEstado(boolean estado) {&#10;        this.estado = estado;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Usuario{&quot; +&#10;                &quot;idUsuario=&quot; + idUsuario +&#10;                &quot;, nombreCompleto='&quot; + nombreCompleto + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                &quot;, rol='&quot; + rol + '\'' +&#10;                &quot;, estado=&quot; + estado +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/ImpactoRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/ImpactoRepository.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.repository;&#10;&#10;import com.juank.utp.finimpact.model.Impacto;&#10;import com.juank.utp.finimpact.utils.DatabaseConfig;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;import java.time.LocalDate;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repositorio para operaciones CRUD de impactos financieros&#10; */&#10;public class ImpactoRepository {&#10;&#10;    /**&#10;     * Obtiene todos los impactos&#10;     */&#10;    public List&lt;Impacto&gt; findAll() {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos ORDER BY fecha_creacion DESC&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Busca un impacto por ID&#10;     */&#10;    public Optional&lt;Impacto&gt; findById(int id) {&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE id_impacto = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            if (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                return Optional.of(impacto);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar impacto por ID: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por iniciativa&#10;     */&#10;    public List&lt;Impacto&gt; findByIniciativa(int idIniciativa) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE id_iniciativa = ? ORDER BY fecha_impacto DESC&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, idIniciativa);&#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por iniciativa: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por tipo de impacto&#10;     */&#10;    public List&lt;Impacto&gt; findByTipoImpacto(String tipoImpacto) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE tipo_impacto = ? ORDER BY fecha_impacto DESC&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, tipoImpacto);&#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por tipo: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por atributo (Planeado, Estimado, Real)&#10;     */&#10;    public List&lt;Impacto&gt; findByAtributoImpacto(String atributoImpacto) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE atributo_impacto = ? ORDER BY fecha_impacto DESC&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, atributoImpacto);&#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por atributo: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos por rango de fechas&#10;     */&#10;    public List&lt;Impacto&gt; findByFechaRange(LocalDate fechaInicio, LocalDate fechaFin) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE fecha_impacto BETWEEN ? AND ? ORDER BY fecha_impacto DESC&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setDate(1, Date.valueOf(fechaInicio));&#10;            stmt.setDate(2, Date.valueOf(fechaFin));&#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por rango de fechas: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Obtiene impactos con filtros múltiples&#10;     */&#10;    public List&lt;Impacto&gt; findByFilters(String tipoImpacto, String atributoImpacto, Integer idIniciativa, LocalDate fechaInicio, LocalDate fechaFin) {&#10;        List&lt;Impacto&gt; impactos = new ArrayList&lt;&gt;();&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT id_impacto, id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto FROM impactos WHERE 1=1&quot;);&#10;        List&lt;Object&gt; parameters = new ArrayList&lt;&gt;();&#10;        &#10;        if (tipoImpacto != null &amp;&amp; !tipoImpacto.isEmpty()) {&#10;            sql.append(&quot; AND tipo_impacto = ?&quot;);&#10;            parameters.add(tipoImpacto);&#10;        }&#10;        &#10;        if (atributoImpacto != null &amp;&amp; !atributoImpacto.isEmpty()) {&#10;            sql.append(&quot; AND atributo_impacto = ?&quot;);&#10;            parameters.add(atributoImpacto);&#10;        }&#10;        &#10;        if (idIniciativa != null) {&#10;            sql.append(&quot; AND id_iniciativa = ?&quot;);&#10;            parameters.add(idIniciativa);&#10;        }&#10;        &#10;        if (fechaInicio != null) {&#10;            sql.append(&quot; AND fecha_impacto &gt;= ?&quot;);&#10;            parameters.add(Date.valueOf(fechaInicio));&#10;        }&#10;        &#10;        if (fechaFin != null) {&#10;            sql.append(&quot; AND fecha_impacto &lt;= ?&quot;);&#10;            parameters.add(Date.valueOf(fechaFin));&#10;        }&#10;        &#10;        sql.append(&quot; ORDER BY fecha_impacto DESC&quot;);&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql.toString())) {&#10;            &#10;            for (int i = 0; i &lt; parameters.size(); i++) {&#10;                stmt.setObject(i + 1, parameters.get(i));&#10;            }&#10;            &#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                Impacto impacto = createImpactoFromResultSet(rs);&#10;                impactos.add(impacto);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener impactos por filtros: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return impactos;&#10;    }&#10;&#10;    /**&#10;     * Crea un nuevo impacto&#10;     */&#10;    public boolean save(Impacto impacto) {&#10;        String sql = &quot;INSERT INTO impactos (id_iniciativa, fecha_creacion, tipo_impacto, multiplicador, atributo_impacto, fecha_impacto, impacto) VALUES (?, ?, ?, ?, ?, ?, ?)&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;            &#10;            stmt.setInt(1, impacto.getIdIniciativa());&#10;            stmt.setDate(2, Date.valueOf(impacto.getFechaCreacion()));&#10;            stmt.setString(3, impacto.getTipoImpacto());&#10;            stmt.setInt(4, impacto.getMultiplicador());&#10;            stmt.setString(5, impacto.getAtributoImpacto());&#10;            stmt.setDate(6, Date.valueOf(impacto.getFechaImpacto()));&#10;            stmt.setBigDecimal(7, impacto.getImpacto());&#10;            &#10;            int rowsAffected = stmt.executeUpdate();&#10;            &#10;            if (rowsAffected &gt; 0) {&#10;                ResultSet rs = stmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    impacto.setIdImpacto(rs.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al crear impacto: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza un impacto existente&#10;     */&#10;    public boolean update(Impacto impacto) {&#10;        String sql = &quot;UPDATE impactos SET id_iniciativa = ?, fecha_creacion = ?, tipo_impacto = ?, multiplicador = ?, atributo_impacto = ?, fecha_impacto = ?, impacto = ? WHERE id_impacto = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, impacto.getIdIniciativa());&#10;            stmt.setDate(2, Date.valueOf(impacto.getFechaCreacion()));&#10;            stmt.setString(3, impacto.getTipoImpacto());&#10;            stmt.setInt(4, impacto.getMultiplicador());&#10;            stmt.setString(5, impacto.getAtributoImpacto());&#10;            stmt.setDate(6, Date.valueOf(impacto.getFechaImpacto()));&#10;            stmt.setBigDecimal(7, impacto.getImpacto());&#10;            stmt.setInt(8, impacto.getIdImpacto());&#10;            &#10;            return stmt.executeUpdate() &gt; 0;&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar impacto: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Elimina un impacto&#10;     */&#10;    public boolean delete(int idImpacto) {&#10;        String sql = &quot;DELETE FROM impactos WHERE id_impacto = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, idImpacto);&#10;            return stmt.executeUpdate() &gt; 0;&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al eliminar impacto: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Calcula la suma de impactos por atributo en un rango de fechas&#10;     */&#10;    public BigDecimal sumImpactosByAtributoAndFecha(String atributoImpacto, LocalDate fechaInicio, LocalDate fechaFin) {&#10;        String sql = &quot;SELECT COALESCE(SUM(impacto * multiplicador), 0) FROM impactos WHERE atributo_impacto = ? AND fecha_impacto BETWEEN ? AND ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, atributoImpacto);&#10;            stmt.setDate(2, Date.valueOf(fechaInicio));&#10;            stmt.setDate(3, Date.valueOf(fechaFin));&#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            if (rs.next()) {&#10;                return rs.getBigDecimal(1);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al calcular suma de impactos: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return BigDecimal.ZERO;&#10;    }&#10;&#10;    /**&#10;     * Obtiene estadísticas de impactos por tipo&#10;     */&#10;    public List&lt;Object[]&gt; getEstadisticasPorTipo() {&#10;        List&lt;Object[]&gt; estadisticas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT tipo_impacto, COUNT(*) as cantidad, SUM(impacto * multiplicador) as total FROM impactos GROUP BY tipo_impacto ORDER BY total DESC&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                Object[] fila = new Object[3];&#10;                fila[0] = rs.getString(&quot;tipo_impacto&quot;);&#10;                fila[1] = rs.getInt(&quot;cantidad&quot;);&#10;                fila[2] = rs.getBigDecimal(&quot;total&quot;);&#10;                estadisticas.add(fila);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener estadísticas por tipo: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return estadisticas;&#10;    }&#10;&#10;    /**&#10;     * Método auxiliar para crear un objeto Impacto desde ResultSet&#10;     */&#10;    private Impacto createImpactoFromResultSet(ResultSet rs) throws SQLException {&#10;        Impacto impacto = new Impacto();&#10;        impacto.setIdImpacto(rs.getInt(&quot;id_impacto&quot;));&#10;        impacto.setIdIniciativa(rs.getInt(&quot;id_iniciativa&quot;));&#10;        impacto.setFechaCreacion(rs.getDate(&quot;fecha_creacion&quot;).toLocalDate());&#10;        impacto.setTipoImpacto(rs.getString(&quot;tipo_impacto&quot;));&#10;        impacto.setMultiplicador(rs.getInt(&quot;multiplicador&quot;));&#10;        impacto.setAtributoImpacto(rs.getString(&quot;atributo_impacto&quot;));&#10;        impacto.setFechaImpacto(rs.getDate(&quot;fecha_impacto&quot;).toLocalDate());&#10;        impacto.setImpacto(rs.getBigDecimal(&quot;impacto&quot;));&#10;        &#10;        return impacto;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/IniciativaRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/IniciativaRepository.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.repository;&#10;&#10;import com.juank.utp.finimpact.model.Iniciativa;&#10;import com.juank.utp.finimpact.utils.DatabaseConfig;&#10;&#10;import java.sql.*;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repositorio para operaciones CRUD de iniciativas&#10; */&#10;public class IniciativaRepository {&#10;&#10;    /**&#10;     * Obtiene todas las iniciativas&#10;     */&#10;    public List&lt;Iniciativa&gt; findAll() {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas ORDER BY fecha_registro DESC&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Busca una iniciativa por ID&#10;     */&#10;    public Optional&lt;Iniciativa&gt; findById(int id) {&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE id_iniciativa = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            if (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                return Optional.of(iniciativa);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar iniciativa por ID: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por owner&#10;     */&#10;    public List&lt;Iniciativa&gt; findByOwner(int idOwner) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE id_owner = ? ORDER BY fecha_registro DESC&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, idOwner);&#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por owner: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por estado&#10;     */&#10;    public List&lt;Iniciativa&gt; findByEstado(String estado) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE estado = ? ORDER BY fecha_registro DESC&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, estado);&#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por estado: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Obtiene iniciativas por múltiples filtros&#10;     */&#10;    public List&lt;Iniciativa&gt; findByFilters(String estado, String tipo, String riesgo, Integer idOwner) {&#10;        List&lt;Iniciativa&gt; iniciativas = new ArrayList&lt;&gt;();&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT id_iniciativa, nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner, fecha_registro FROM iniciativas WHERE 1=1&quot;);&#10;        List&lt;Object&gt; parameters = new ArrayList&lt;&gt;();&#10;        &#10;        if (estado != null &amp;&amp; !estado.isEmpty()) {&#10;            sql.append(&quot; AND estado = ?&quot;);&#10;            parameters.add(estado);&#10;        }&#10;        &#10;        if (tipo != null &amp;&amp; !tipo.isEmpty()) {&#10;            sql.append(&quot; AND tipo = ?&quot;);&#10;            parameters.add(tipo);&#10;        }&#10;        &#10;        if (riesgo != null &amp;&amp; !riesgo.isEmpty()) {&#10;            sql.append(&quot; AND riesgo = ?&quot;);&#10;            parameters.add(riesgo);&#10;        }&#10;        &#10;        if (idOwner != null) {&#10;            sql.append(&quot; AND id_owner = ?&quot;);&#10;            parameters.add(idOwner);&#10;        }&#10;        &#10;        sql.append(&quot; ORDER BY fecha_registro DESC&quot;);&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql.toString())) {&#10;            &#10;            for (int i = 0; i &lt; parameters.size(); i++) {&#10;                stmt.setObject(i + 1, parameters.get(i));&#10;            }&#10;            &#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                Iniciativa iniciativa = createIniciativaFromResultSet(rs);&#10;                iniciativas.add(iniciativa);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener iniciativas por filtros: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return iniciativas;&#10;    }&#10;&#10;    /**&#10;     * Crea una nueva iniciativa&#10;     */&#10;    public boolean save(Iniciativa iniciativa) {&#10;        String sql = &quot;INSERT INTO iniciativas (nombre, descripcion, fecha_inicio, fecha_fin, tipo, estado, riesgo, id_owner) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;            &#10;            stmt.setString(1, iniciativa.getNombre());&#10;            stmt.setString(2, iniciativa.getDescripcion());&#10;            stmt.setDate(3, iniciativa.getFechaInicio() != null ? Date.valueOf(iniciativa.getFechaInicio()) : null);&#10;            stmt.setDate(4, iniciativa.getFechaFin() != null ? Date.valueOf(iniciativa.getFechaFin()) : null);&#10;            stmt.setString(5, iniciativa.getTipo());&#10;            stmt.setString(6, iniciativa.getEstado());&#10;            stmt.setString(7, iniciativa.getRiesgo());&#10;            stmt.setInt(8, iniciativa.getIdOwner());&#10;            &#10;            int rowsAffected = stmt.executeUpdate();&#10;            &#10;            if (rowsAffected &gt; 0) {&#10;                ResultSet rs = stmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    iniciativa.setIdIniciativa(rs.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al crear iniciativa: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza una iniciativa existente&#10;     */&#10;    public boolean update(Iniciativa iniciativa) {&#10;        String sql = &quot;UPDATE iniciativas SET nombre = ?, descripcion = ?, fecha_inicio = ?, fecha_fin = ?, tipo = ?, estado = ?, riesgo = ?, id_owner = ? WHERE id_iniciativa = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, iniciativa.getNombre());&#10;            stmt.setString(2, iniciativa.getDescripcion());&#10;            stmt.setDate(3, iniciativa.getFechaInicio() != null ? Date.valueOf(iniciativa.getFechaInicio()) : null);&#10;            stmt.setDate(4, iniciativa.getFechaFin() != null ? Date.valueOf(iniciativa.getFechaFin()) : null);&#10;            stmt.setString(5, iniciativa.getTipo());&#10;            stmt.setString(6, iniciativa.getEstado());&#10;            stmt.setString(7, iniciativa.getRiesgo());&#10;            stmt.setInt(8, iniciativa.getIdOwner());&#10;            stmt.setInt(9, iniciativa.getIdIniciativa());&#10;            &#10;            return stmt.executeUpdate() &gt; 0;&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar iniciativa: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Elimina una iniciativa&#10;     */&#10;    public boolean delete(int idIniciativa) {&#10;        String sql = &quot;DELETE FROM iniciativas WHERE id_iniciativa = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, idIniciativa);&#10;            return stmt.executeUpdate() &gt; 0;&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al eliminar iniciativa: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Cuenta iniciativas activas&#10;     */&#10;    public int countIniciativasActivas() {&#10;        String sql = &quot;SELECT COUNT(*) FROM iniciativas WHERE estado IN ('planeado', 'en curso')&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            if (rs.next()) {&#10;                return rs.getInt(1);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al contar iniciativas activas: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return 0;&#10;    }&#10;&#10;    /**&#10;     * Método auxiliar para crear un objeto Iniciativa desde ResultSet&#10;     */&#10;    private Iniciativa createIniciativaFromResultSet(ResultSet rs) throws SQLException {&#10;        Iniciativa iniciativa = new Iniciativa();&#10;        iniciativa.setIdIniciativa(rs.getInt(&quot;id_iniciativa&quot;));&#10;        iniciativa.setNombre(rs.getString(&quot;nombre&quot;));&#10;        iniciativa.setDescripcion(rs.getString(&quot;descripcion&quot;));&#10;        &#10;        Date fechaInicio = rs.getDate(&quot;fecha_inicio&quot;);&#10;        if (fechaInicio != null) {&#10;            iniciativa.setFechaInicio(fechaInicio.toLocalDate());&#10;        }&#10;        &#10;        Date fechaFin = rs.getDate(&quot;fecha_fin&quot;);&#10;        if (fechaFin != null) {&#10;            iniciativa.setFechaFin(fechaFin.toLocalDate());&#10;        }&#10;        &#10;        iniciativa.setTipo(rs.getString(&quot;tipo&quot;));&#10;        iniciativa.setEstado(rs.getString(&quot;estado&quot;));&#10;        iniciativa.setRiesgo(rs.getString(&quot;riesgo&quot;));&#10;        iniciativa.setIdOwner(rs.getInt(&quot;id_owner&quot;));&#10;        &#10;        Timestamp fechaRegistro = rs.getTimestamp(&quot;fecha_registro&quot;);&#10;        if (fechaRegistro != null) {&#10;            iniciativa.setFechaRegistro(fechaRegistro.toLocalDateTime());&#10;        }&#10;        &#10;        return iniciativa;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/UsuarioRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/repository/UsuarioRepository.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.repository;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.utils.DatabaseConfig;&#10;import com.juank.utp.finimpact.utils.PasswordUtils;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Repositorio para operaciones CRUD de usuarios&#10; */&#10;public class UsuarioRepository {&#10;&#10;    /**&#10;     * Busca un usuario por email para autenticación&#10;     */&#10;    public Optional&lt;Usuario&gt; findByEmail(String email) {&#10;        String sql = &quot;SELECT id_usuario, nombre_completo, email, password, rol, estado FROM usuarios WHERE email = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, email);&#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            if (rs.next()) {&#10;                Usuario usuario = new Usuario(&#10;                    rs.getInt(&quot;id_usuario&quot;),&#10;                    rs.getString(&quot;nombre_completo&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getString(&quot;password&quot;),&#10;                    rs.getString(&quot;rol&quot;),&#10;                    rs.getBoolean(&quot;estado&quot;)&#10;                );&#10;                return Optional.of(usuario);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar usuario por email: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Autentica un usuario con email y contraseña&#10;     */&#10;    public Optional&lt;Usuario&gt; authenticate(String email, String password) {&#10;        Optional&lt;Usuario&gt; usuarioOpt = findByEmail(email);&#10;        &#10;        if (usuarioOpt.isPresent()) {&#10;            Usuario usuario = usuarioOpt.get();&#10;            if (usuario.isEstado() &amp;&amp; PasswordUtils.verifyPassword(password, usuario.getPassword())) {&#10;                return usuarioOpt;&#10;            }&#10;        }&#10;        &#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Obtiene todos los usuarios&#10;     */&#10;    public List&lt;Usuario&gt; findAll() {&#10;        List&lt;Usuario&gt; usuarios = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_usuario, nombre_completo, email, password, rol, estado FROM usuarios ORDER BY nombre_completo&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                Usuario usuario = new Usuario(&#10;                    rs.getInt(&quot;id_usuario&quot;),&#10;                    rs.getString(&quot;nombre_completo&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getString(&quot;password&quot;),&#10;                    rs.getString(&quot;rol&quot;),&#10;                    rs.getBoolean(&quot;estado&quot;)&#10;                );&#10;                usuarios.add(usuario);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al obtener usuarios: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return usuarios;&#10;    }&#10;&#10;    /**&#10;     * Busca un usuario por ID&#10;     */&#10;    public Optional&lt;Usuario&gt; findById(int id) {&#10;        String sql = &quot;SELECT id_usuario, nombre_completo, email, password, rol, estado FROM usuarios WHERE id_usuario = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, id);&#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            if (rs.next()) {&#10;                Usuario usuario = new Usuario(&#10;                    rs.getInt(&quot;id_usuario&quot;),&#10;                    rs.getString(&quot;nombre_completo&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getString(&quot;password&quot;),&#10;                    rs.getString(&quot;rol&quot;),&#10;                    rs.getBoolean(&quot;estado&quot;)&#10;                );&#10;                return Optional.of(usuario);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar usuario por ID: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return Optional.empty();&#10;    }&#10;&#10;    /**&#10;     * Crea un nuevo usuario&#10;     */&#10;    public boolean save(Usuario usuario) {&#10;        String sql = &quot;INSERT INTO usuarios (nombre_completo, email, password, rol, estado) VALUES (?, ?, ?, ?, ?)&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;            &#10;            stmt.setString(1, usuario.getNombreCompleto());&#10;            stmt.setString(2, usuario.getEmail());&#10;            stmt.setString(3, PasswordUtils.hashPassword(usuario.getPassword()));&#10;            stmt.setString(4, usuario.getRol());&#10;            stmt.setBoolean(5, usuario.isEstado());&#10;            &#10;            int rowsAffected = stmt.executeUpdate();&#10;            &#10;            if (rowsAffected &gt; 0) {&#10;                ResultSet rs = stmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    usuario.setIdUsuario(rs.getInt(1));&#10;                }&#10;                return true;&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al crear usuario: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza un usuario existente&#10;     */&#10;    public boolean update(Usuario usuario) {&#10;        String sql = &quot;UPDATE usuarios SET nombre_completo = ?, email = ?, rol = ?, estado = ? WHERE id_usuario = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, usuario.getNombreCompleto());&#10;            stmt.setString(2, usuario.getEmail());&#10;            stmt.setString(3, usuario.getRol());&#10;            stmt.setBoolean(4, usuario.isEstado());&#10;            stmt.setInt(5, usuario.getIdUsuario());&#10;            &#10;            return stmt.executeUpdate() &gt; 0;&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar usuario: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Actualiza la contraseña de un usuario&#10;     */&#10;    public boolean updatePassword(int idUsuario, String newPassword) {&#10;        String sql = &quot;UPDATE usuarios SET password = ? WHERE id_usuario = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, PasswordUtils.hashPassword(newPassword));&#10;            stmt.setInt(2, idUsuario);&#10;            &#10;            return stmt.executeUpdate() &gt; 0;&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al actualizar contraseña: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Elimina un usuario (soft delete - cambiar estado a inactivo)&#10;     */&#10;    public boolean delete(int idUsuario) {&#10;        String sql = &quot;UPDATE usuarios SET estado = 0 WHERE id_usuario = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, idUsuario);&#10;            return stmt.executeUpdate() &gt; 0;&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al eliminar usuario: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Obtiene usuarios activos por rol&#10;     */&#10;    public List&lt;Usuario&gt; findByRolAndEstado(String rol, boolean estado) {&#10;        List&lt;Usuario&gt; usuarios = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT id_usuario, nombre_completo, email, password, rol, estado FROM usuarios WHERE rol = ? AND estado = ? ORDER BY nombre_completo&quot;;&#10;        &#10;        try (Connection conn = DatabaseConfig.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, rol);&#10;            stmt.setBoolean(2, estado);&#10;            ResultSet rs = stmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                Usuario usuario = new Usuario(&#10;                    rs.getInt(&quot;id_usuario&quot;),&#10;                    rs.getString(&quot;nombre_completo&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getString(&quot;password&quot;),&#10;                    rs.getString(&quot;rol&quot;),&#10;                    rs.getBoolean(&quot;estado&quot;)&#10;                );&#10;                usuarios.add(usuario);&#10;            }&#10;            &#10;        } catch (SQLException e) {&#10;            System.err.println(&quot;Error al buscar usuarios por rol y estado: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return usuarios;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/utils/CrearUsuariosIniciales.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/utils/CrearUsuariosIniciales.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.utils;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;&#10;/**&#10; * Utilidad para crear usuarios iniciales del sistema&#10; */&#10;public class CrearUsuariosIniciales {&#10;&#10;    public static void main(String[] args) {&#10;        UsuarioRepository usuarioRepository = new UsuarioRepository();&#10;&#10;        try {&#10;            System.out.println(&quot; Iniciando creación de usuarios iniciales...\n&quot;);&#10;&#10;            // Crear usuario administrador&#10;            Usuario admin = new Usuario();&#10;            admin.setNombreCompleto(&quot;Administrador del Sistema&quot;);&#10;            admin.setEmail(&quot;admin@finimpact.com&quot;);&#10;            admin.setPassword(&quot;admin123&quot;); // Se hasheará automáticamente en el repositorio&#10;            admin.setRol(&quot;admin&quot;);&#10;            admin.setEstado(true);&#10;&#10;            if (usuarioRepository.save(admin)) {&#10;                System.out.println(&quot;✅ Usuario administrador creado exitosamente&quot;);&#10;                System.out.println(&quot;   Email: admin@finimpact.com&quot;);&#10;                System.out.println(&quot;   Password: admin123&quot;);&#10;                System.out.println(&quot;   ID generado: &quot; + admin.getIdUsuario());&#10;            } else {&#10;                System.out.println(&quot;❌ Error al crear usuario administrador&quot;);&#10;            }&#10;&#10;            // Crear usuario analista&#10;            Usuario analista = new Usuario();&#10;            analista.setNombreCompleto(&quot;Juan Analista&quot;);&#10;            analista.setEmail(&quot;analista@finimpact.com&quot;);&#10;            analista.setPassword(&quot;analista123&quot;); // Se hasheará automáticamente en el repositorio&#10;            analista.setRol(&quot;analista&quot;);&#10;            analista.setEstado(true);&#10;&#10;            if (usuarioRepository.save(analista)) {&#10;                System.out.println(&quot;✅ Usuario analista creado exitosamente&quot;);&#10;                System.out.println(&quot;   Email: analista@finimpact.com&quot;);&#10;                System.out.println(&quot;   Password: analista123&quot;);&#10;                System.out.println(&quot;   ID generado: &quot; + analista.getIdUsuario());&#10;            } else {&#10;                System.out.println(&quot;❌ Error al crear usuario analista&quot;);&#10;            }&#10;&#10;            // Crear usuario viewer&#10;            Usuario viewer = new Usuario();&#10;            viewer.setNombreCompleto(&quot;Maria Viewer&quot;);&#10;            viewer.setEmail(&quot;viewer@finimpact.com&quot;);&#10;            viewer.setPassword(&quot;viewer123&quot;); // Se hasheará automáticamente en el repositorio&#10;            viewer.setRol(&quot;viewer&quot;);&#10;            viewer.setEstado(true);&#10;&#10;            if (usuarioRepository.save(viewer)) {&#10;                System.out.println(&quot;✅ Usuario viewer creado exitosamente&quot;);&#10;                System.out.println(&quot;   Email: viewer@finimpact.com&quot;);&#10;                System.out.println(&quot;   Password: viewer123&quot;);&#10;                System.out.println(&quot;   ID generado: &quot; + viewer.getIdUsuario());&#10;            } else {&#10;                System.out.println(&quot;❌ Error al crear usuario viewer&quot;);&#10;            }&#10;&#10;            System.out.println(&quot;\n Proceso de creación de usuarios completado!&quot;);&#10;            System.out.println(&quot;Puedes usar cualquiera de estos usuarios para hacer login en la aplicación.&quot;);&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Error durante la creación de usuarios: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Método utilitario para crear un usuario específico&#10;     */&#10;    public static boolean crearUsuario(String nombreCompleto, String email, String password, String rol, boolean estado) {&#10;        UsuarioRepository usuarioRepository = new UsuarioRepository();&#10;        &#10;        try {&#10;            Usuario usuario = new Usuario();&#10;            usuario.setNombreCompleto(nombreCompleto);&#10;            usuario.setEmail(email);&#10;            usuario.setPassword(password); // Se hasheará automáticamente&#10;            usuario.setRol(rol);&#10;            usuario.setEstado(estado);&#10;&#10;            boolean resultado = usuarioRepository.save(usuario);&#10;            &#10;            if (resultado) {&#10;                System.out.println(&quot;✅ Usuario creado: &quot; + email + &quot; (ID: &quot; + usuario.getIdUsuario() + &quot;)&quot;);&#10;            } else {&#10;                System.out.println(&quot;❌ Error al crear usuario: &quot; + email);&#10;            }&#10;            &#10;            return resultado;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Error al crear usuario &quot; + email + &quot;: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/utils/DatabaseConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/utils/DatabaseConfig.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.utils;&#10;&#10;import java.sql.Connection;&#10;import java.sql.DriverManager;&#10;import java.sql.SQLException;&#10;&#10;/**&#10; * Configuración de conexión a la base de datos SQL Server&#10; */&#10;public class DatabaseConfig {&#10;    &#10;    // TODO: Configurar estos valores según tu entorno&#10;    private static final String SERVER = &quot;localhost&quot;; // O tu servidor&#10;    private static final String PORT = &quot;1433&quot;;&#10;    private static final String DATABASE_NAME = &quot;finimpact&quot;;&#10;    private static final String USERNAME = &quot;&quot;; // TODO: Agregar usuario&#10;    private static final String PASSWORD = &quot;&quot;; // TODO: Agregar contraseña&#10;    &#10;    private static final String CONNECTION_URL = String.format(&#10;        &quot;jdbc:sqlserver://%s:%s;databaseName=%s;encrypt=false;trustServerCertificate=true&quot;,&#10;        SERVER, PORT, DATABASE_NAME&#10;    );&#10;    &#10;    /**&#10;     * Obtiene una conexión a la base de datos&#10;     */&#10;    public static Connection getConnection() throws SQLException {&#10;        try {&#10;            Class.forName(&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;);&#10;            return DriverManager.getConnection(CONNECTION_URL, USERNAME, PASSWORD);&#10;        } catch (ClassNotFoundException e) {&#10;            throw new SQLException(&quot;Driver de SQL Server no encontrado&quot;, e);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Cierra una conexión de forma segura&#10;     */&#10;    public static void closeConnection(Connection connection) {&#10;        if (connection != null) {&#10;            try {&#10;                connection.close();&#10;            } catch (SQLException e) {&#10;                System.err.println(&quot;Error al cerrar conexión: &quot; + e.getMessage());&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/utils/PasswordUtils.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/utils/PasswordUtils.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.utils;&#10;&#10;import java.security.MessageDigest;&#10;import java.security.NoSuchAlgorithmException;&#10;import java.util.Base64;&#10;&#10;public class PasswordUtils {&#10;&#10;    private static final String HASH_ALGORITHM = &quot;SHA-256&quot;;&#10;&#10;    /**&#10;     * Hashea una contraseña directamente (sin salt)&#10;     */&#10;    public static String hashPassword(String password) {&#10;        try {&#10;            MessageDigest md = MessageDigest.getInstance(HASH_ALGORITHM);&#10;            byte[] hashedPassword = md.digest(password.getBytes());&#10;            return Base64.getEncoder().encodeToString(hashedPassword);&#10;        } catch (NoSuchAlgorithmException e) {&#10;            throw new RuntimeException(&quot;Error al hashear contraseña&quot;, e);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Verifica una contraseña contra su hash&#10;     */&#10;    public static boolean verifyPassword(String password, String hashedPassword) {&#10;        String hashToVerify = hashPassword(password);&#10;        return hashToVerify.equals(hashedPassword);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/utils/VerificarLogin.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/juank/utp/finimpact/utils/VerificarLogin.java" />
              <option name="updatedContent" value="package com.juank.utp.finimpact.utils;&#10;&#10;import com.juank.utp.finimpact.model.Usuario;&#10;import com.juank.utp.finimpact.repository.UsuarioRepository;&#10;import java.util.Optional;&#10;&#10;/**&#10; * Utilidad para verificar que el sistema de hashing y autenticación funciona correctamente&#10; */&#10;public class VerificarLogin {&#10;&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot; Iniciando verificación del sistema de login...\n&quot;);&#10;        &#10;        // Datos de prueba de los usuarios que ya existen en tu BD&#10;        String[][] usuariosPrueba = {&#10;            {&quot;admin@finimpact.com&quot;, &quot;admin123&quot;, &quot;admin&quot;},&#10;            {&quot;analista@finimpact.com&quot;, &quot;analista123&quot;, &quot;analista&quot;},&#10;            {&quot;viewer@finimpact.com&quot;, &quot;viewer123&quot;, &quot;viewer&quot;}&#10;        };&#10;        &#10;        UsuarioRepository usuarioRepository = new UsuarioRepository();&#10;        int exitosos = 0;&#10;        int fallidos = 0;&#10;        &#10;        for (String[] datosUsuario : usuariosPrueba) {&#10;            String email = datosUsuario[0];&#10;            String password = datosUsuario[1];&#10;            String rolEsperado = datosUsuario[2];&#10;            &#10;            System.out.println(&quot; Probando login para: &quot; + email);&#10;            &#10;            if (verificarUsuario(usuarioRepository, email, password, rolEsperado)) {&#10;                exitosos++;&#10;            } else {&#10;                fallidos++;&#10;            }&#10;            System.out.println(); // Línea en blanco para separar&#10;        }&#10;        &#10;        // Probar login con credenciales incorrectas&#10;        System.out.println(&quot; Probando login con credenciales incorrectas...&quot;);&#10;        if (probarCredencialesIncorrectas(usuarioRepository)) {&#10;            System.out.println(&quot;✅ Correctamente rechazó credenciales incorrectas&quot;);&#10;        } else {&#10;            System.out.println(&quot;❌ Error: aceptó credenciales incorrectas&quot;);&#10;            fallidos++;&#10;        }&#10;        &#10;        // Resumen&#10;        System.out.println(&quot;\n&quot; + &quot;=&quot;.repeat(50));&#10;        System.out.println(&quot; RESUMEN DE VERIFICACIÓN:&quot;);&#10;        System.out.println(&quot;✅ Logins exitosos: &quot; + exitosos);&#10;        System.out.println(&quot;❌ Logins fallidos: &quot; + fallidos);&#10;        &#10;        if (fallidos == 0) {&#10;            System.out.println(&quot; ¡Todos los tests pasaron! El sistema de login funciona correctamente.&quot;);&#10;        } else {&#10;            System.out.println(&quot;⚠️  Algunos tests fallaron. Revisa la configuración de la base de datos.&quot;);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Verifica que un usuario específico pueda hacer login correctamente&#10;     */&#10;    private static boolean verificarUsuario(UsuarioRepository repo, String email, String password, String rolEsperado) {&#10;        try {&#10;            // Paso 1: Verificar que el usuario existe en la BD&#10;            Optional&lt;Usuario&gt; usuarioOpt = repo.findByEmail(email);&#10;            if (usuarioOpt.isEmpty()) {&#10;                System.out.println(&quot;❌ Usuario no encontrado en la base de datos&quot;);&#10;                return false;&#10;            }&#10;            &#10;            Usuario usuario = usuarioOpt.get();&#10;            System.out.println(&quot;    Usuario encontrado: &quot; + usuario.getNombreCompleto());&#10;            System.out.println(&quot;   ️  Rol: &quot; + usuario.getRol());&#10;            System.out.println(&quot;    Estado: &quot; + (usuario.isEstado() ? &quot;Activo&quot; : &quot;Inactivo&quot;));&#10;            &#10;            // Paso 2: Verificar que el rol sea correcto&#10;            if (!usuario.getRol().equals(rolEsperado)) {&#10;                System.out.println(&quot;❌ Rol incorrecto. Esperado: &quot; + rolEsperado + &quot;, Actual: &quot; + usuario.getRol());&#10;                return false;&#10;            }&#10;            &#10;            // Paso 3: Probar autenticación con contraseña&#10;            Optional&lt;Usuario&gt; authResult = repo.authenticate(email, password);&#10;            if (authResult.isEmpty()) {&#10;                System.out.println(&quot;❌ Autenticación fallida - contraseña incorrecta o usuario inactivo&quot;);&#10;                return false;&#10;            }&#10;            &#10;            // Paso 4: Verificar que el hash funciona manualmente&#10;            String hashGenerado = PasswordUtils.hashPassword(password);&#10;            boolean hashValido = PasswordUtils.verifyPassword(password, usuario.getPassword());&#10;            &#10;            System.out.println(&quot;    Hash en BD: &quot; + usuario.getPassword().substring(0, 20) + &quot;...&quot;);&#10;            System.out.println(&quot;    Hash generado: &quot; + hashGenerado.substring(0, 20) + &quot;...&quot;);&#10;            System.out.println(&quot;   ✅ Verificación de hash: &quot; + (hashValido ? &quot;VÁLIDA&quot; : &quot;INVÁLIDA&quot;));&#10;            &#10;            if (!hashValido) {&#10;                System.out.println(&quot;❌ El hash no coincide con la contraseña&quot;);&#10;                return false;&#10;            }&#10;            &#10;            System.out.println(&quot;✅ LOGIN EXITOSO para &quot; + email);&#10;            return true;&#10;            &#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Error durante la verificación: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            return false;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Prueba que el sistema rechace credenciales incorrectas&#10;     */&#10;    private static boolean probarCredencialesIncorrectas(UsuarioRepository repo) {&#10;        try {&#10;            // Probar con email que no existe&#10;            Optional&lt;Usuario&gt; result1 = repo.authenticate(&quot;noexiste@test.com&quot;, &quot;cualquierpassword&quot;);&#10;            if (result1.isPresent()) {&#10;                System.out.println(&quot;❌ Error: aceptó email inexistente&quot;);&#10;                return false;&#10;            }&#10;            &#10;            // Probar con email válido pero contraseña incorrecta&#10;            Optional&lt;Usuario&gt; result2 = repo.authenticate(&quot;admin@finimpact.com&quot;, &quot;passwordincorrecto&quot;);&#10;            if (result2.isPresent()) {&#10;                System.out.println(&quot;❌ Error: aceptó contraseña incorrecta&quot;);&#10;                return false;&#10;            }&#10;            &#10;            System.out.println(&quot;   ✅ Rechazó email inexistente&quot;);&#10;            System.out.println(&quot;   ✅ Rechazó contraseña incorrecta&quot;);&#10;            return true;&#10;            &#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Error durante prueba de credenciales incorrectas: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Método utilitario para verificar un usuario específico desde código&#10;     */&#10;    public static boolean verificarLoginUsuario(String email, String password) {&#10;        UsuarioRepository repo = new UsuarioRepository();&#10;        Optional&lt;Usuario&gt; result = repo.authenticate(email, password);&#10;        &#10;        if (result.isPresent()) {&#10;            Usuario usuario = result.get();&#10;            System.out.println(&quot;✅ Login exitoso: &quot; + usuario.getNombreCompleto() + &quot; (&quot; + usuario.getRol() + &quot;)&quot;);&#10;            return true;&#10;        } else {&#10;            System.out.println(&quot;❌ Login fallido para: &quot; + email);&#10;            return false;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Método para probar el hashing de contraseñas manualmente&#10;     */&#10;    public static void probarHashing() {&#10;        System.out.println(&quot; Probando sistema de hashing...\n&quot;);&#10;        &#10;        String[] passwordsPrueba = {&quot;admin123&quot;, &quot;analista123&quot;, &quot;viewer123&quot;, &quot;password123&quot;};&#10;        &#10;        for (String password : passwordsPrueba) {&#10;            String hash1 = PasswordUtils.hashPassword(password);&#10;            String hash2 = PasswordUtils.hashPassword(password);&#10;            &#10;            boolean verificacion1 = PasswordUtils.verifyPassword(password, hash1);&#10;            boolean verificacion2 = PasswordUtils.verifyPassword(password, hash2);&#10;            boolean hashesIguales = hash1.equals(hash2);&#10;            &#10;            System.out.println(&quot;Password: &quot; + password);&#10;            System.out.println(&quot;  Hash 1: &quot; + hash1);&#10;            System.out.println(&quot;  Hash 2: &quot; + hash2);&#10;            System.out.println(&quot;  Hashes iguales: &quot; + hashesIguales);&#10;            System.out.println(&quot;  Verificación 1: &quot; + verificacion1);&#10;            System.out.println(&quot;  Verificación 2: &quot; + verificacion2);&#10;            System.out.println(&quot;  ✅ Estado: &quot; + (hashesIguales &amp;&amp; verificacion1 &amp;&amp; verificacion2 ? &quot;OK&quot; : &quot;ERROR&quot;));&#10;            System.out.println();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/module-info.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/module-info.java" />
              <option name="originalContent" value="module com.juank.utp.finimpact {&#10;    requires javafx.controls;&#10;    requires javafx.fxml;&#10;    requires javafx.web;&#10;&#10;    requires org.controlsfx.controls;&#10;    requires com.dlsc.formsfx;&#10;    requires net.synedra.validatorfx;&#10;    requires org.kordamp.ikonli.javafx;&#10;    requires org.kordamp.bootstrapfx.core;&#10;    requires eu.hansolo.tilesfx;&#10;&#10;    // Dependencias para base de datos&#10;    requires java.sql;&#10;    requires com.microsoft.sqlserver.jdbc;&#10;&#10;    opens com.juank.utp.finimpact to javafx.fxml;&#10;    opens com.juank.utp.finimpact.model to javafx.fxml;&#10;&#10;    exports com.juank.utp.finimpact;&#10;    exports com.juank.utp.finimpact.model;&#10;    exports com.juank.utp.finimpact.repository;&#10;    exports com.juank.utp.finimpact.utils;&#10;}" />
              <option name="updatedContent" value="module com.juank.utp.finimpact {&#10;    requires javafx.controls;&#10;    requires javafx.fxml;&#10;    requires javafx.web;&#10;&#10;    requires org.controlsfx.controls;&#10;    requires com.dlsc.formsfx;&#10;    requires net.synedra.validatorfx;&#10;    requires org.kordamp.ikonli.javafx;&#10;    requires org.kordamp.bootstrapfx.core;&#10;    requires eu.hansolo.tilesfx;&#10;&#10;    // Dependencias para base de datos&#10;    requires java.sql;&#10;    requires com.microsoft.sqlserver.jdbc;&#10;&#10;    opens com.juank.utp.finimpact to javafx.fxml;&#10;    opens com.juank.utp.finimpact.model to javafx.fxml;&#10;    opens com.juank.utp.finimpact.controller to javafx.fxml;&#10;&#10;    exports com.juank.utp.finimpact;&#10;    exports com.juank.utp.finimpact.model;&#10;    exports com.juank.utp.finimpact.repository;&#10;    exports com.juank.utp.finimpact.utils;&#10;    exports com.juank.utp.finimpact.controller;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/login-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/login-view.fxml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;VBox alignment=&quot;CENTER&quot; maxHeight=&quot;-Infinity&quot; maxWidth=&quot;-Infinity&quot; minHeight=&quot;-Infinity&quot; minWidth=&quot;-Infinity&quot; prefHeight=&quot;400.0&quot; prefWidth=&quot;350.0&quot; spacing=&quot;20.0&quot; style=&quot;-fx-background-color: #ECEFF4;&quot; xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.LoginController&quot;&gt;&#10;   &lt;children&gt;&#10;      &lt;VBox alignment=&quot;CENTER&quot; spacing=&quot;10.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Iniciar Sesión&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#2E3440&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Label text=&quot;FinImpact&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#5E81AC&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;16.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;         &lt;/children&gt;&#10;      &lt;/VBox&gt;&#10;      &#10;      &lt;VBox alignment=&quot;CENTER&quot; maxWidth=&quot;280.0&quot; spacing=&quot;15.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;VBox spacing=&quot;5.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label text=&quot;Email:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;14.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;                  &lt;TextField fx:id=&quot;txtEmail&quot; prefHeight=&quot;35.0&quot; promptText=&quot;usuario@finimpact.com&quot; style=&quot;-fx-background-radius: 5; -fx-border-radius: 5;&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;14.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/TextField&gt;&#10;                  &lt;Label fx:id=&quot;lblEmailError&quot; textFill=&quot;#BF616A&quot; visible=&quot;false&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;11.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;            &#10;            &lt;VBox spacing=&quot;5.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Label text=&quot;Contraseña:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;14.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;                  &lt;PasswordField fx:id=&quot;txtPassword&quot; prefHeight=&quot;35.0&quot; promptText=&quot;Ingresa tu contraseña&quot; style=&quot;-fx-background-radius: 5; -fx-border-radius: 5;&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;14.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/PasswordField&gt;&#10;                  &lt;Label fx:id=&quot;lblPasswordError&quot; textFill=&quot;#BF616A&quot; visible=&quot;false&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;11.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Label&gt;&#10;               &lt;/children&gt;&#10;            &lt;/VBox&gt;&#10;            &#10;            &lt;Label fx:id=&quot;lblLoginError&quot; alignment=&quot;CENTER&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#BF616A&quot; visible=&quot;false&quot; wrapText=&quot;true&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;12.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;            &#10;            &lt;HBox alignment=&quot;CENTER&quot; spacing=&quot;10.0&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;Button fx:id=&quot;btnCancelar&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleCancelar&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;80.0&quot; style=&quot;-fx-background-color: #D08770; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Cancelar&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;14.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Button&gt;&#10;                  &lt;Button fx:id=&quot;btnIngresar&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleLogin&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;80.0&quot; style=&quot;-fx-background-color: #A3BE8C; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Ingresar&quot;&gt;&#10;                     &lt;font&gt;&#10;                        &lt;Font size=&quot;14.0&quot; /&gt;&#10;                     &lt;/font&gt;&#10;                  &lt;/Button&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;         &lt;/children&gt;&#10;         &lt;VBox.margin&gt;&#10;            &lt;Insets /&gt;&#10;         &lt;/VBox.margin&gt;&#10;      &lt;/VBox&gt;&#10;      &#10;      &lt;VBox alignment=&quot;CENTER&quot; spacing=&quot;5.0&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Separator prefWidth=&quot;200.0&quot; /&gt;&#10;            &lt;Label text=&quot;Usuarios de prueba:&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;12.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Label text=&quot;admin@finimpact.com / admin123&quot; textFill=&quot;#5E81AC&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;10.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Label text=&quot;analista@finimpact.com / analista123&quot; textFill=&quot;#5E81AC&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;10.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Label text=&quot;viewer@finimpact.com / viewer123&quot; textFill=&quot;#5E81AC&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;10.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;         &lt;/children&gt;&#10;      &lt;/VBox&gt;&#10;   &lt;/children&gt;&#10;   &lt;padding&gt;&#10;      &lt;Insets bottom=&quot;20.0&quot; left=&quot;20.0&quot; right=&quot;20.0&quot; top=&quot;20.0&quot; /&gt;&#10;   &lt;/padding&gt;&#10;&lt;/VBox&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/main-view.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/com/juank/utp/finimpact/main-view.fxml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.*?&gt;&#10;&#10;&lt;BorderPane xmlns=&quot;http://javafx.com/javafx/11.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot; fx:controller=&quot;com.juank.utp.finimpact.controller.MainController&quot;&gt;&#10;   &lt;top&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;60.0&quot; style=&quot;-fx-background-color: #2E3440;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;FinImpact&quot; textFill=&quot;WHITE&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;24.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets left=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Region HBox.hgrow=&quot;ALWAYS&quot; /&gt;&#10;            &lt;Button fx:id=&quot;btnLogin&quot; mnemonicParsing=&quot;false&quot; onAction=&quot;#handleLogin&quot; prefHeight=&quot;35.0&quot; prefWidth=&quot;100.0&quot; style=&quot;-fx-background-color: #5E81AC; -fx-text-fill: white; -fx-background-radius: 5;&quot; text=&quot;Login&quot;&gt;&#10;               &lt;HBox.margin&gt;&#10;                  &lt;Insets right=&quot;20.0&quot; /&gt;&#10;               &lt;/HBox.margin&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;14.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/top&gt;&#10;   &lt;center&gt;&#10;      &lt;VBox alignment=&quot;CENTER&quot; prefHeight=&quot;400.0&quot; prefWidth=&quot;600.0&quot; spacing=&quot;20.0&quot; style=&quot;-fx-background-color: #ECEFF4;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label text=&quot;Bienvenido a FinImpact&quot; textAlignment=&quot;CENTER&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font name=&quot;System Bold&quot; size=&quot;28.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;            &lt;Label text=&quot;Sistema de Seguimiento de Iniciativas e Impactos Financieros&quot; textAlignment=&quot;CENTER&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;16.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;         &lt;/children&gt;&#10;      &lt;/VBox&gt;&#10;   &lt;/center&gt;&#10;   &lt;bottom&gt;&#10;      &lt;HBox alignment=&quot;CENTER&quot; prefHeight=&quot;40.0&quot; style=&quot;-fx-background-color: #D8DEE9;&quot; BorderPane.alignment=&quot;CENTER&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;Label fx:id=&quot;lblStatus&quot; text=&quot;No hay usuario autenticado&quot; textFill=&quot;#4C566A&quot;&gt;&#10;               &lt;font&gt;&#10;                  &lt;Font size=&quot;12.0&quot; /&gt;&#10;               &lt;/font&gt;&#10;            &lt;/Label&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;   &lt;/bottom&gt;&#10;&lt;/BorderPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>